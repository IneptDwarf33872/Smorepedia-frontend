{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst ResizableBuffer = require('./buffer');\nconst DataReader = require('./reader');\nconst DataWriter = require('./writer');\nconst BinaryProtocol = require('./protocol');\nconst serializers = require('./serializers');\nconst V3 = 3;\nconst V2 = 2;\n\n//We wish to handle multiple concurrent requests and at the same time\n//reuse the buffers (instead of allocating new buffer for\n//each new request).\nconst _freeBuffers = [];\nclass ProtocolManager {\n  static _serialVersion = V3;\n  static get serialVersion() {\n    return this._serialVersion;\n  }\n  static decrementSerialVersion() {\n    if (this._serialVersion === V3) {\n      this._serialVersion = V2;\n      return true;\n    }\n    return false;\n  }\n  static get contentType() {\n    return 'application/octet-stream';\n  }\n  static get encoding() {\n    return null;\n  }\n  static getBuffer() {\n    if (!_freeBuffers.length) {\n      return new ResizableBuffer();\n    }\n    const buf = _freeBuffers.pop();\n    assert(buf._free);\n    buf._free = false;\n    buf.clear();\n    return buf;\n  }\n  static releaseBuffer(buf) {\n    assert(!buf._free);\n    buf._free = true;\n    _freeBuffers.push(buf);\n  }\n  static addChunk(buf, chunk) {\n    buf.appendBuffer(chunk);\n  }\n  static getWriter(buf) {\n    //Is this too much optimization?\n    return !buf._dw ? buf._dw = new DataWriter(buf) : buf._dw.reset();\n  }\n\n  //Request content in a form suitable to write to stream.\n  static getContent(buf) {\n    return buf.slice();\n  }\n\n  //Content length in bytes.\n  static getContentLength(buf) {\n    return buf.length;\n  }\n  static getReader(buf) {\n    return !buf._dr ? buf._dr = new DataReader(buf) : buf._dr.reset();\n  }\n  static startWrite() {}\n  static startRead(reader, req) {\n    const sc = reader.readByte();\n    if (sc !== 0) {\n      throw BinaryProtocol.mapError(sc, reader.readString(), req);\n    }\n  }\n  static serializer(op) {\n    return this._serializers[op];\n  }\n}\n\n//Serializers\n\nProtocolManager._serializers = {\n  GetOp: serializers.GetSerializer,\n  PutOp: serializers.PutSerializer,\n  DeleteOp: serializers.DeleteSerializer,\n  MultiDeleteOp: serializers.MultiDeleteSerializer,\n  WriteMultipleOp: serializers.WriteMultipleSerializer,\n  TableDDLOp: serializers.TableRequestSerializer,\n  TableLimitsOp: serializers.TableRequestSerializer,\n  GetTableOp: serializers.GetTableSerializer,\n  TableUsageOp: serializers.TableUsageSerializer,\n  GetIndexesOp: serializers.GetIndexesSerializer,\n  ListTablesOp: serializers.ListTablesSerializer,\n  PrepareOp: serializers.PrepareSerializer,\n  QueryOp: serializers.QuerySerializer,\n  AdminDDLOp: serializers.SystemRequestSerializer,\n  AdminStatusOp: serializers.SystemStatusSerializer\n};\nmodule.exports = ProtocolManager;","map":{"version":3,"names":["assert","require","ResizableBuffer","DataReader","DataWriter","BinaryProtocol","serializers","V3","V2","_freeBuffers","ProtocolManager","_serialVersion","serialVersion","decrementSerialVersion","contentType","encoding","getBuffer","length","buf","pop","_free","clear","releaseBuffer","push","addChunk","chunk","appendBuffer","getWriter","_dw","reset","getContent","slice","getContentLength","getReader","_dr","startWrite","startRead","reader","req","sc","readByte","mapError","readString","serializer","op","_serializers","GetOp","GetSerializer","PutOp","PutSerializer","DeleteOp","DeleteSerializer","MultiDeleteOp","MultiDeleteSerializer","WriteMultipleOp","WriteMultipleSerializer","TableDDLOp","TableRequestSerializer","TableLimitsOp","GetTableOp","GetTableSerializer","TableUsageOp","TableUsageSerializer","GetIndexesOp","GetIndexesSerializer","ListTablesOp","ListTablesSerializer","PrepareOp","PrepareSerializer","QueryOp","QuerySerializer","AdminDDLOp","SystemRequestSerializer","AdminStatusOp","SystemStatusSerializer","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/binary_protocol/protocol_manager.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\n\nconst ResizableBuffer = require('./buffer');\nconst DataReader = require('./reader');\nconst DataWriter = require('./writer');\nconst BinaryProtocol = require('./protocol');\nconst serializers = require('./serializers');\n\nconst V3 = 3;\nconst V2 = 2;\n\n//We wish to handle multiple concurrent requests and at the same time\n//reuse the buffers (instead of allocating new buffer for\n//each new request).\nconst _freeBuffers = [];\n\nclass ProtocolManager {\n\n    static _serialVersion = V3;\n\n    static get serialVersion() {\n        return this._serialVersion;\n    }\n\n    static decrementSerialVersion() {\n        if (this._serialVersion === V3) {\n            this._serialVersion = V2;\n            return true;\n        }\n        return false;\n    }\n\n    static get contentType() {\n        return 'application/octet-stream';\n    }\n\n    static get encoding() {\n        return null;\n    }\n\n    static getBuffer() {\n        if (!_freeBuffers.length) {\n            return new ResizableBuffer();\n        }\n        const buf = _freeBuffers.pop();\n        assert(buf._free);\n        buf._free = false;\n        buf.clear();\n        return buf;\n    }\n\n    static releaseBuffer(buf) {\n        assert(!buf._free);\n        buf._free = true;\n        _freeBuffers.push(buf);\n    }\n\n    static addChunk(buf, chunk) {\n        buf.appendBuffer(chunk);\n    }\n\n    static getWriter(buf) {\n        //Is this too much optimization?\n        return !buf._dw ? (buf._dw = new DataWriter(buf)) : buf._dw.reset();\n    }\n\n    //Request content in a form suitable to write to stream.\n    static getContent(buf) {\n        return buf.slice();\n    }\n\n    //Content length in bytes.\n    static getContentLength(buf) {\n        return buf.length;\n    }\n\n    static getReader(buf) {\n        return !buf._dr ? (buf._dr = new DataReader(buf)) : buf._dr.reset();\n    }\n\n    static startWrite() {}\n\n    static startRead(reader, req) {\n        const sc = reader.readByte();\n        if (sc !== 0) {\n            throw BinaryProtocol.mapError(sc, reader.readString(), req);\n        }\n    }\n\n    static serializer(op) {\n        return this._serializers[op];\n    }\n\n}\n\n//Serializers\n\nProtocolManager._serializers = {\n    GetOp: serializers.GetSerializer,\n    PutOp: serializers.PutSerializer,\n    DeleteOp: serializers.DeleteSerializer,\n    MultiDeleteOp: serializers.MultiDeleteSerializer,\n    WriteMultipleOp: serializers.WriteMultipleSerializer,\n    TableDDLOp: serializers.TableRequestSerializer,\n    TableLimitsOp: serializers.TableRequestSerializer,\n    GetTableOp: serializers.GetTableSerializer,\n    TableUsageOp: serializers.TableUsageSerializer,\n    GetIndexesOp: serializers.GetIndexesSerializer,\n    ListTablesOp: serializers.ListTablesSerializer,\n    PrepareOp: serializers.PrepareSerializer,\n    QueryOp: serializers.QuerySerializer,\n    AdminDDLOp: serializers.SystemRequestSerializer,\n    AdminStatusOp: serializers.SystemStatusSerializer\n};\n\nmodule.exports = ProtocolManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}