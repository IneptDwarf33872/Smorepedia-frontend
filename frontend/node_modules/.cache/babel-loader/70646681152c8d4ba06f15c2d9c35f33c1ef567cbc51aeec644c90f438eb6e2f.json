{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst fs = require('fs');\nconst isPosInt32 = require('../../utils').isPosInt32;\nconst isPosInt32OrZero = require('../../utils').isPosInt32OrZero;\nconst promisified = require('../../utils').promisified;\nconst clearData = require('../../utils').clearData;\nconst ErrorCode = require('../../error_code');\nconst NoSQLArgumentError = require('../../error').NoSQLArgumentError;\nconst AuthError = require('../../error').NoSQLAuthorizationError;\nconst KVStoreTokenProvider = require('./token_provider');\nclass KVStoreFileCredentialsProvider {\n  constructor(credentialsFile) {\n    this._fileName = credentialsFile;\n    if (!this._fileName || typeof this._fileName !== 'string') {\n      throw new NoSQLArgumentError('Missing or invalid credentials file \\\nname');\n    }\n  }\n  _loadCredentials(callback) {\n    fs.readFile(this._fileName, 'utf8', (err, data) => {\n      if (err) {\n        return callback(AuthError.creds('Failed to load ' + `kvstore credentials file ${this._fileName}`, err));\n      }\n      try {\n        const creds = JSON.parse(data, (key, value) => {\n          return key === 'password' ? Buffer.from(value) : value;\n        });\n        callback(null, creds);\n      } catch (err) {\n        callback(AuthError.creds(`Failed to parse kvstore \\\ncredentials file ${this._fileName}`, err));\n      }\n    });\n  }\n  loadCredentials() {\n    return promisified(this, this._loadCredentials);\n  }\n}\nclass KVStoreAuthorizationProvider {\n  constructor(opt, cfg) {\n    if (!opt || typeof opt !== 'object') {\n      throw new NoSQLArgumentError('Missing or invalid auth.kvstore', cfg);\n    }\n\n    //Needed in case this provider is created outside NoSQLClient\n    //instance. Note that this is currently sufficient, because\n    //AuthConfig.defaults.kvstore has no nested properties. Otherwise the\n    //code below will need to change to use Config.inheritOpt().\n    opt.__proto__ = KVStoreAuthorizationProvider.configDefaults;\n\n    //init credentials provider if any\n    if (opt.credentials != null) {\n      if (opt.user != null || opt.password != null) {\n        throw new NoSQLArgumentError('May not specify \\\nauth.kvstore.credentials together with auth.kvstore.user or \\\nauth.kvstore.password', cfg);\n      }\n      if (typeof opt.credentials === 'string') {\n        this._credsProvider = new KVStoreFileCredentialsProvider(opt.credentials);\n      } else if (typeof opt.credentials === 'function') {\n        this._credsProvider = {\n          loadCredentials: opt.credentials\n        };\n      } else {\n        if (typeof opt.credentials !== 'object' || typeof opt.credentials.loadCredentials !== 'function') {\n          throw new NoSQLArgumentError('Invlaid value of auth.kvstore.credentials', cfg);\n        }\n        this._credsProvider = opt.credentials;\n      }\n    } else {\n      //user & password supplied directly\n      if (typeof opt.user !== 'string' || !opt.user.length) {\n        throw new NoSQLArgumentError('Missing or invalid value of auth.kvstore.user');\n      }\n      if (!Buffer.isBuffer(opt.password) && (typeof opt.password !== 'string' || !opt.password.length)) {\n        throw new NoSQLArgumentError('Missing or invalid value of \\\nopt.kvstore.password');\n      }\n      this._creds = {\n        user: opt.user,\n        password: Buffer.from(opt.password)\n      };\n    }\n    if (!isPosInt32(opt.timeout)) {\n      throw new NoSQLArgumentError('Invalid auth.kvstore.timeout value', cfg);\n    }\n    this._timeout = opt.timeout;\n    this._autoRenew = opt.autoRenew;\n    this._noRenewBeforeMs = opt.noRenewBeforeMs;\n    assert(isPosInt32OrZero(this._noRenewBeforeMs));\n  }\n  _setAuthResult(res) {\n    assert(res && res.token && res.expireAt);\n    this._auth = 'Bearer ' + res.token;\n    this._expireAt = res.expireAt;\n  }\n  _scheduleRenew() {\n    assert(this._auth && this._expireAt);\n    const currTime = Date.now();\n    const exp = this._expireAt - currTime;\n\n    //If it is 10 seconds before expiration, don't do further renew to\n    //avoid too many renew requests in the last few seconds.\n    if (exp <= this._noRenewBeforeMs) {\n      return;\n    }\n    if (this._renewTimer != null) {\n      clearTimeout(this._renewTimer);\n    }\n    this._renewTimer = setTimeout(async () => {\n      this._setAuthResult(await this._tokenProvider.renew(this._auth));\n      this._scheduleRenew();\n    }, exp / 2);\n  }\n  _isValidCreds(creds) {\n    return creds && typeof creds.user === 'string' && creds.user.length && (Buffer.isBuffer(creds.password) || typeof creds.password === 'string') && creds.password.length;\n  }\n  async _retrieveToken() {\n    let creds;\n    try {\n      if (this._credsProvider) {\n        try {\n          creds = await this._credsProvider.loadCredentials();\n        } catch (err) {\n          throw AuthError.creds('Error retrieving credentials', err);\n        }\n        if (!this._isValidCreds(creds)) {\n          throw AuthError.creds('Credentials provider returned \\\ninvalid or missing credentials, check user and password');\n        }\n      } else {\n        creds = this._creds;\n      }\n      assert(this._tokenProvider != null);\n      this._setAuthResult(await this._tokenProvider.login(creds.user, creds.password));\n      if (this._autoRenew) {\n        this._scheduleRenew();\n      }\n    } finally {\n      if (this._credsProvider) {\n        clearData(creds);\n      }\n    }\n  }\n  get credentialsProvider() {\n    return this._credsProvider;\n  }\n  onInit(cfg) {\n    this._tokenProvider = new KVStoreTokenProvider(this, cfg);\n  }\n  async getAuthorization(req) {\n    if (!this._auth || req.lastError && req.lastError.errorCode === ErrorCode.RETRY_AUTHENTICATION) {\n      await this._retrieveToken();\n    }\n    assert(this._auth);\n    return this._auth;\n  }\n  async close() {\n    if (this._auth) {\n      if (this._renewTimer != null) {\n        clearTimeout(this._renewTimer);\n      }\n      if (this._tokenProvider != null) {\n        try {\n          await this._tokenProvider.logout(this._auth);\n          //TODO: log the error\n        } catch (err) {} //eslint-disable-line no-empty\n      }\n    }\n    if (this._creds) {\n      clearData(this._creds);\n    }\n  }\n  static withCredentials(user, password) {\n    return new KVStoreAuthorizationProvider({\n      user,\n      password\n    });\n  }\n  static withCredentialsProvider(provider) {\n    if (!provider || typeof provider !== 'object' && typeof provider !== 'function') {\n      throw new NoSQLArgumentError('Missing or invalid credentials provider');\n    }\n    return new KVStoreAuthorizationProvider({\n      credentials: provider\n    });\n  }\n  static withCredentialsFile(file) {\n    if (!file || typeof file !== 'string') {\n      throw new NoSQLArgumentError(`Missing or invalid credentials file path: ${file}`);\n    }\n    return new KVStoreAuthorizationProvider({\n      credentials: file\n    });\n  }\n}\nKVStoreAuthorizationProvider.configDefaults = Object.freeze({\n  timeout: 30000,\n  autoRenew: true,\n  //The below properties are not exposed to the user but different\n  //values are used in tests.\n  noRenewBeforeMs: 10000\n});\nmodule.exports = KVStoreAuthorizationProvider;","map":{"version":3,"names":["assert","require","fs","isPosInt32","isPosInt32OrZero","promisified","clearData","ErrorCode","NoSQLArgumentError","AuthError","NoSQLAuthorizationError","KVStoreTokenProvider","KVStoreFileCredentialsProvider","constructor","credentialsFile","_fileName","_loadCredentials","callback","readFile","err","data","creds","JSON","parse","key","value","Buffer","from","loadCredentials","KVStoreAuthorizationProvider","opt","cfg","__proto__","configDefaults","credentials","user","password","_credsProvider","length","isBuffer","_creds","timeout","_timeout","_autoRenew","autoRenew","_noRenewBeforeMs","noRenewBeforeMs","_setAuthResult","res","token","expireAt","_auth","_expireAt","_scheduleRenew","currTime","Date","now","exp","_renewTimer","clearTimeout","setTimeout","_tokenProvider","renew","_isValidCreds","_retrieveToken","login","credentialsProvider","onInit","getAuthorization","req","lastError","errorCode","RETRY_AUTHENTICATION","close","logout","withCredentials","withCredentialsProvider","provider","withCredentialsFile","file","Object","freeze","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/kvstore/auth_provider.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst fs = require('fs');\nconst isPosInt32 = require('../../utils').isPosInt32;\nconst isPosInt32OrZero = require('../../utils').isPosInt32OrZero;\nconst promisified = require('../../utils').promisified;\nconst clearData = require('../../utils').clearData;\nconst ErrorCode = require('../../error_code');\nconst NoSQLArgumentError = require('../../error').NoSQLArgumentError;\nconst AuthError = require('../../error').NoSQLAuthorizationError;\nconst KVStoreTokenProvider = require('./token_provider');\n\nclass KVStoreFileCredentialsProvider {\n\n    constructor(credentialsFile) {\n        this._fileName = credentialsFile;\n        if (!this._fileName || typeof this._fileName !== 'string') {\n            throw new NoSQLArgumentError('Missing or invalid credentials file \\\nname');\n        }\n    }\n\n    _loadCredentials(callback) {\n        fs.readFile(this._fileName, 'utf8', (err, data) => {\n            if (err) {\n                return callback(AuthError.creds('Failed to load ' +\n                    `kvstore credentials file ${this._fileName}`, err));\n            }\n            try {\n                const creds = JSON.parse(data, (key, value) => {\n                    return key === 'password' ? Buffer.from(value) : value;\n                });\n                callback(null, creds);\n            } catch(err) {\n                callback(AuthError.creds(`Failed to parse kvstore \\\ncredentials file ${this._fileName}`, err));\n            }\n        });\n    }\n\n    loadCredentials() {\n        return promisified(this, this._loadCredentials);\n    }\n\n}\n\nclass KVStoreAuthorizationProvider {\n\n    constructor(opt, cfg) {\n        if (!opt || typeof opt !== 'object') {\n            throw new NoSQLArgumentError('Missing or invalid auth.kvstore',\n                cfg);\n        }\n\n        //Needed in case this provider is created outside NoSQLClient\n        //instance. Note that this is currently sufficient, because\n        //AuthConfig.defaults.kvstore has no nested properties. Otherwise the\n        //code below will need to change to use Config.inheritOpt().\n        opt.__proto__ = KVStoreAuthorizationProvider.configDefaults;\n\n        //init credentials provider if any\n        if (opt.credentials != null) {\n            if (opt.user != null || opt.password != null) {\n                throw new NoSQLArgumentError('May not specify \\\nauth.kvstore.credentials together with auth.kvstore.user or \\\nauth.kvstore.password', cfg);\n            }\n            if (typeof opt.credentials === 'string') {\n                this._credsProvider = new KVStoreFileCredentialsProvider(\n                    opt.credentials);\n            } else if (typeof opt.credentials === 'function') {\n                this._credsProvider = { loadCredentials : opt.credentials };\n            }\n            else {\n                if (typeof opt.credentials !== 'object' ||\n                    typeof opt.credentials.loadCredentials !== 'function') {\n                    throw new NoSQLArgumentError(\n                        'Invlaid value of auth.kvstore.credentials', cfg);\n                }\n                this._credsProvider = opt.credentials;\n            }\n        } else { //user & password supplied directly\n            if (typeof opt.user !== 'string' || !opt.user.length) {\n                throw new NoSQLArgumentError(\n                    'Missing or invalid value of auth.kvstore.user');\n            }\n            if (!Buffer.isBuffer(opt.password) &&\n                (typeof opt.password !== 'string' || !opt.password.length)) {\n                throw new NoSQLArgumentError('Missing or invalid value of \\\nopt.kvstore.password');\n            }\n            this._creds = {\n                user: opt.user,\n                password: Buffer.from(opt.password)\n            };\n        }\n\n        if (!isPosInt32(opt.timeout)) {\n            throw new NoSQLArgumentError('Invalid auth.kvstore.timeout value',\n                cfg);\n        }\n\n        this._timeout = opt.timeout;\n        this._autoRenew = opt.autoRenew;\n\n        this._noRenewBeforeMs = opt.noRenewBeforeMs;\n        assert(isPosInt32OrZero(this._noRenewBeforeMs));\n    }\n\n    _setAuthResult(res) {\n        assert(res && res.token && res.expireAt);\n        this._auth = 'Bearer ' + res.token;\n        this._expireAt = res.expireAt;\n    }\n\n    _scheduleRenew() {\n        assert(this._auth && this._expireAt);\n        const currTime = Date.now();\n        const exp = this._expireAt - currTime;\n\n        //If it is 10 seconds before expiration, don't do further renew to\n        //avoid too many renew requests in the last few seconds.\n        if (exp <= this._noRenewBeforeMs) {\n            return;\n        }\n        if (this._renewTimer != null) {\n            clearTimeout(this._renewTimer);\n        }\n        this._renewTimer = setTimeout(async () => {\n            this._setAuthResult(\n                await this._tokenProvider.renew(this._auth));\n            this._scheduleRenew();\n        }, exp / 2);\n    }\n\n    _isValidCreds(creds) {\n        return creds && typeof creds.user === 'string' && creds.user.length &&\n            (Buffer.isBuffer(creds.password) ||\n            typeof creds.password === 'string') &&\n            creds.password.length;\n    }\n\n    async _retrieveToken() {\n        let creds;\n        try {\n            if (this._credsProvider) {\n                try {\n                    creds = await this._credsProvider.loadCredentials();\n                } catch(err) {\n                    throw AuthError.creds('Error retrieving credentials',\n                        err);\n                }\n                if (!this._isValidCreds(creds)) {\n                    throw AuthError.creds('Credentials provider returned \\\ninvalid or missing credentials, check user and password');\n                }\n            } else {\n                creds = this._creds;\n            }\n            assert(this._tokenProvider != null);\n            this._setAuthResult(\n                await this._tokenProvider.login(creds.user, creds.password));\n            if (this._autoRenew) {\n                this._scheduleRenew();\n            }\n        } finally {\n            if (this._credsProvider) {\n                clearData(creds);\n            }\n        }\n    }\n\n    get credentialsProvider() {\n        return this._credsProvider;\n    }\n\n    onInit(cfg) {\n        this._tokenProvider = new KVStoreTokenProvider(this, cfg);\n    }\n\n    async getAuthorization(req) {\n        if (!this._auth || (req.lastError && req.lastError.errorCode ===\n            ErrorCode.RETRY_AUTHENTICATION)) {\n            await this._retrieveToken();\n        }\n        assert(this._auth);\n        return this._auth;\n    }\n\n    async close() {\n        if (this._auth) {\n            if (this._renewTimer != null) {\n                clearTimeout(this._renewTimer);\n            }\n            if (this._tokenProvider != null) {\n                try {\n                    await this._tokenProvider.logout(this._auth);\n                    //TODO: log the error\n                } catch(err) {} //eslint-disable-line no-empty\n            }\n        }\n        if (this._creds) {\n            clearData(this._creds);\n        }\n    }\n\n    static withCredentials(user, password) {\n        return new KVStoreAuthorizationProvider({\n            user,\n            password\n        });\n    }\n\n    static withCredentialsProvider(provider) {\n        if (!provider || (typeof provider !== 'object' &&\n            typeof provider !== 'function')) {\n            throw new NoSQLArgumentError(\n                'Missing or invalid credentials provider');\n        }\n        return new KVStoreAuthorizationProvider({\n            credentials: provider\n        });\n    }\n\n    static withCredentialsFile(file) {\n        if (!file || typeof file !== 'string') {\n            throw new NoSQLArgumentError(\n                `Missing or invalid credentials file path: ${file}`);\n        }\n        return new KVStoreAuthorizationProvider({\n            credentials: file\n        });\n    }\n}\n\nKVStoreAuthorizationProvider.configDefaults = Object.freeze({\n    timeout: 30000,\n    autoRenew: true,\n    //The below properties are not exposed to the user but different\n    //values are used in tests.\n    noRenewBeforeMs: 10000\n});\n\nmodule.exports = KVStoreAuthorizationProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}