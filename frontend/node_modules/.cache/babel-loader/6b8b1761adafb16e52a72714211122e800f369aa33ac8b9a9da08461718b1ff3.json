{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst isPosInt = require('../../utils').isPosInt;\nconst HttpConstants = require('../../constants').HttpConstants;\nconst NoSQLArgumentError = require('../../error').NoSQLArgumentError;\nconst NoSQLTimeoutError = require('../../error').NoSQLTimeoutError;\nconst NoSQLServiceError = require('../../error').NoSQLServiceError;\nconst AuthError = require('../../error').NoSQLAuthorizationError;\nconst HttpClient = require('../http_client');\nconst BASE_PATH = `/${HttpConstants.NOSQL_VERSION}/nosql/security`;\nconst LOGIN_ENDPOINT = '/login';\nconst RENEW_ENDPOINT = '/renew';\nconst LOGOUT_ENDPOINT = '/logout';\nclass KVStoreTokenProvider {\n  constructor(provider, cfg) {\n    if (cfg.url == null) {\n      throw new NoSQLArgumentError('Missing service endpoint', cfg);\n    }\n    assert(cfg.url instanceof URL);\n    if (!cfg.url.protocol.startsWith('https')) {\n      throw new NoSQLArgumentError(`Invalid protocol for \\\nauthorization: ${cfg.url.protocol}, https is required`, cfg);\n    }\n    this._loginUrl = new URL(BASE_PATH + LOGIN_ENDPOINT, cfg.url);\n    this._renewUrl = new URL(BASE_PATH + RENEW_ENDPOINT, cfg.url);\n    this._logoutUrl = new URL(BASE_PATH + LOGOUT_ENDPOINT, cfg.url);\n    this._timeout = provider._timeout;\n    this._httpClient = new HttpClient(cfg.httpOpt);\n  }\n  async _doGet(req) {\n    try {\n      return await this._httpClient.request(Object.assign(req, {\n        method: HttpConstants.GET,\n        timeout: this._timeout\n      }));\n    } finally {\n      this._httpClient.shutdown();\n    }\n  }\n  _parse(res) {\n    try {\n      res = JSON.parse(res);\n    } catch (err) {\n      throw AuthError.badProto('Failed to parse kvstore authentication \\\ntoken result', err);\n    }\n    if (typeof res.token !== 'string' || !res.token.length) {\n      throw AuthError.badProto(`Token missing or invalid in \\\nkvstore authentication token result: ${res.token}`);\n    }\n    if (!isPosInt(res.expireAt)) {\n      throw AuthError.badProto(`Expiration time missing or invalid in \\\nkvstore authentication token result: ${res.expireAt}`);\n    }\n    return res;\n  }\n  _handleError(err, action) {\n    if (err instanceof NoSQLTimeoutError) {\n      throw AuthError.timeout(`Failed to ${action}.  Operation timed \\\nout, see the cause`, err);\n    }\n    if (err instanceof NoSQLServiceError) {\n      throw AuthError.service(`Failed to ${action}, unexpected HTTP \\\nresponse.  Status code: ${err.statusCode}.  Error response: ${err.response}`, err);\n    }\n    throw AuthError.network(`Failed to ${action}, see the cause`, err);\n  }\n  async login(user, pwd) {\n    try {\n      const res = await this._doGet({\n        url: this._loginUrl,\n        clientId: user,\n        secret: Buffer.isBuffer(pwd) ? pwd : Buffer.from(pwd)\n      });\n      return this._parse(res);\n    } catch (err) {\n      return this._handleError(err, 'login to kvstore');\n    }\n  }\n  async renew(auth) {\n    try {\n      const res = await this._doGet({\n        url: this._renewUrl,\n        auth\n      });\n      return this._parse(res);\n    } catch (err) {\n      return this._handleError(err, 'renew kvstore authentication token');\n    }\n  }\n  async logout(auth) {\n    try {\n      return await this._doGet({\n        url: this._logoutUrl,\n        auth\n      });\n    } catch (err) {\n      return this._handleError(err, 'logout from kvstore');\n    }\n  }\n}\nmodule.exports = KVStoreTokenProvider;","map":{"version":3,"names":["assert","require","isPosInt","HttpConstants","NoSQLArgumentError","NoSQLTimeoutError","NoSQLServiceError","AuthError","NoSQLAuthorizationError","HttpClient","BASE_PATH","NOSQL_VERSION","LOGIN_ENDPOINT","RENEW_ENDPOINT","LOGOUT_ENDPOINT","KVStoreTokenProvider","constructor","provider","cfg","url","URL","protocol","startsWith","_loginUrl","_renewUrl","_logoutUrl","_timeout","_httpClient","httpOpt","_doGet","req","request","Object","assign","method","GET","timeout","shutdown","_parse","res","JSON","parse","err","badProto","token","length","expireAt","_handleError","action","service","statusCode","response","network","login","user","pwd","clientId","secret","Buffer","isBuffer","from","renew","auth","logout","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/kvstore/token_provider.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst isPosInt = require('../../utils').isPosInt;\nconst HttpConstants = require('../../constants').HttpConstants;\nconst NoSQLArgumentError = require('../../error').NoSQLArgumentError;\nconst NoSQLTimeoutError = require('../../error').NoSQLTimeoutError;\nconst NoSQLServiceError = require('../../error').NoSQLServiceError;\nconst AuthError = require('../../error').NoSQLAuthorizationError;\nconst HttpClient = require('../http_client');\n\nconst BASE_PATH = `/${HttpConstants.NOSQL_VERSION}/nosql/security`;\n\nconst LOGIN_ENDPOINT = '/login';\n\nconst RENEW_ENDPOINT = '/renew';\n\nconst LOGOUT_ENDPOINT = '/logout';\n\nclass KVStoreTokenProvider {\n\n    constructor(provider, cfg) {\n        if (cfg.url == null) {\n            throw new NoSQLArgumentError('Missing service endpoint', cfg);\n        }\n        assert(cfg.url instanceof URL);\n        if (!cfg.url.protocol.startsWith('https')) {\n            throw new NoSQLArgumentError(`Invalid protocol for \\\nauthorization: ${cfg.url.protocol}, https is required`, cfg);\n        }\n\n        this._loginUrl = new URL(BASE_PATH + LOGIN_ENDPOINT, cfg.url);\n        this._renewUrl = new URL(BASE_PATH + RENEW_ENDPOINT, cfg.url);\n        this._logoutUrl = new URL(BASE_PATH + LOGOUT_ENDPOINT, cfg.url);\n\n        this._timeout = provider._timeout;\n        this._httpClient = new HttpClient(cfg.httpOpt);\n    }\n\n    async _doGet(req) {\n        try {\n            return await this._httpClient.request(\n                Object.assign(req, {\n                    method: HttpConstants.GET,\n                    timeout: this._timeout\n                }));\n        } finally {\n            this._httpClient.shutdown();\n        }\n    }\n\n    _parse(res) {\n        try {\n            res = JSON.parse(res);\n        } catch(err) {\n            throw AuthError.badProto('Failed to parse kvstore authentication \\\ntoken result', err);\n        }\n        if (typeof res.token !== 'string' || !res.token.length) {\n            throw AuthError.badProto(`Token missing or invalid in \\\nkvstore authentication token result: ${res.token}`);\n        }\n        if (!isPosInt(res.expireAt)) {\n            throw AuthError.badProto(`Expiration time missing or invalid in \\\nkvstore authentication token result: ${res.expireAt}`);\n        }\n        return res;\n    }\n\n    _handleError(err, action) {\n        if (err instanceof NoSQLTimeoutError) {\n            throw AuthError.timeout(`Failed to ${action}.  Operation timed \\\nout, see the cause`, err);\n        }\n        if (err instanceof NoSQLServiceError) {\n            throw AuthError.service(`Failed to ${action}, unexpected HTTP \\\nresponse.  Status code: ${err.statusCode}.  Error response: ${err.response}`,\n            err);\n        }\n        throw AuthError.network(`Failed to ${action}, see the cause`, err);\n    }\n\n    async login(user, pwd) {\n        try {\n            const res = await this._doGet({\n                url: this._loginUrl,\n                clientId: user,\n                secret: Buffer.isBuffer(pwd) ? pwd : Buffer.from(pwd)\n            });\n            return this._parse(res);\n        }\n        catch (err) {\n            return this._handleError(err, 'login to kvstore');\n        }\n    }\n\n    async renew(auth) {\n        try {\n            const res = await this._doGet({\n                url: this._renewUrl,\n                auth,\n            });\n            return this._parse(res);\n        }\n        catch (err) {\n            return this._handleError(err,\n                'renew kvstore authentication token');\n        }\n    }\n\n    async logout(auth) {\n        try {\n            return await this._doGet({\n                url: this._logoutUrl,\n                auth\n            });\n        }\n        catch (err) {\n            return this._handleError(err, 'logout from kvstore');\n        }\n    }\n\n}\n\nmodule.exports = KVStoreTokenProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}