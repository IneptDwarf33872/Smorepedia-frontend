{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst ErrorCode = require('./error_code');\nconst HttpConstants = require('./constants').HttpConstants;\nfunction makeMsg(errCode, msg, cause) {\n  let m = `[${errCode.name}] ${msg}`;\n  if (cause) {\n    m += '; Caused by: ' + cause.message;\n  }\n  return m;\n}\n\n/**\n * This is the base class for all errors returned by the driver.\n * {@link NoSQLError} extends JavaScript Error class and all other errors used\n * by the driver extend {@link NoSQLError}.  Note that you don't create these\n * error objects explicitly, but the driver returns errors in the following\n * ways:\n * <ul>\n * <li>For synchronous APIs the error is thrown as an exception</li>\n * <li>For asynchronous APIs, which is most of the APIs in {@link NoSQLClient}\n * class, the error is the result of the rejection of Promise returned by\n * the API.  In async function, you can use <em>try...catch</em> to handle\n * these errors as if they were exceptions.\n * </ul>\n * <p>\n * Each error contains {@link ErrorCode} which can be used in the application\n * logic to take different actions upon different kinds of errors.  In\n * addition, an error may have an optional <em>cause</em>, which is another\n * error that caused this error.  The <em>cause</em> is typically also\n * instance of {@link NoSQLError} or its subclass, but sometimes may not be.\n * E.g. if an authorization error is caused by invalid JSON response, the\n * <em>cause</em> would be instance of <em>SyntaxError</em>.\n * <p>\n * In addition, each error has an optional operation object which describes\n * the operation that caused the error, including the API and its arguments,\n * see {@link Operation}. Not all errors have operation available.\n * <p>\n * Most errors returned from the server result in {@link NoSQLError}, but for\n * other cases specialized subclasses are used such as\n * {@link NoSQLArgumentError}, {@link NoSQLServiceError},\n * {@link NoSQLNetworkError}, {@link NoSQLAuthorizationError} and others.\n * \n * @extends {Error}\n * @hideconstructor\n * @tutorial tables\n */\nclass NoSQLError extends Error {\n  constructor(errCode, msg, cause, operation) {\n    super(makeMsg(errCode, msg, cause));\n    this._errCode = errCode;\n    this.name = this.constructor.name;\n    this._cause = cause;\n    this._req = operation;\n  }\n\n  /**\n   * {@link ErrorCode} of this error.\n   * @type {ErrorCode}\n   * @readonly\n   */\n  get errorCode() {\n    return this._errCode;\n  }\n\n  /**\n   * An error that caused this error.  In many cases it is also instance of\n   * {@link NoSQLError} and may itself have a cause.  You could iterate\n   * through the chain of causes like this:\n   * <p>\n   * <em>for(let cause = err.cause; cause; cause = cause.cause) {...</em>\n   * <p>\n   * If this error does not have a cause, the value of this property is\n   * <em>undefined</em>.\n   * @type {Error|undefined}\n   * @readonly\n   */\n  get cause() {\n    return this._cause;\n  }\n\n  /**\n   * Indicates whether this error is retryable.\n   * <p>\n   * APIs that result in retryable errors are automatically retried by the\n   * driver's default {@link RetryHandler}.  Default retry handler can be\n   * customized by properties in {@link RetryConfig}.  Alternatively, a\n   * custom {@link RetryHandler} can be set as\n   * {@link RetryConfig}#handler.\n   * <p>\n   * If necessary, APIs that result in retryable errors may also be\n   * explicitly retried by the application.\n   * @see {@link RetryConfig}\n   * @type {boolean}\n   * @readonly\n   */\n  get retryable() {\n    return this._errCode.retryable;\n  }\n\n  /**\n   * Operation that resulted in this error.\n   * {@link Operation} object contains the API and its arguments including\n   * the options used.  Operation object may not always be available, in\n   * which case the value of this property is <em>undefined</em>.\n   * <p>\n   * If this error happened during creation of new {@link NoSQLClient} then\n   * instead of {@link Operation} this property contains {@link Config}\n   * used to create {@link NoSQLClient} instance.\n   * @see {@link Operation}\n   * @see {@link Config}\n   * @type {Operation|Config|undefined}\n   * @readonly\n   */\n  get operation() {\n    return this._req;\n  }\n\n  /**\n   * @ignore\n   */\n  static create(errCode, msg, cause, operation) {\n    switch (errCode) {\n      case ErrorCode.ILLEGAL_ARGUMENT:\n        return new NoSQLArgumentError(msg, operation, cause);\n      case ErrorCode.UNSUPPORTED_PROTOCOL:\n        return new NoSQLUnsupportedProtocolError(msg, operation, cause);\n      case ErrorCode.BAD_PROTOCOL_MESSAGE:\n        if (msg.includes('Invalid driver serial version')) {\n          return new NoSQLUnsupportedProtocolError(msg, operation, cause);\n        }\n        return new NoSQLProtocolError(msg, cause, operation);\n      case ErrorCode.NETWORK_ERROR:\n        return new NoSQLNetworkError(msg, operation, cause);\n      case ErrorCode.SERVICE_ERROR:\n        return new NoSQLServiceError(msg, operation, cause);\n      default:\n        return new NoSQLError(errCode, msg, cause, operation);\n    }\n  }\n}\n\n/**\n * This error indicates that invalid argument(s) were passed to the API which\n * may include options in the <em>opt</em> argument passed to\n * {@link NoSQLClient} methods.  You may examine the arguments and options\n * passed using [operation]{@link NoSQLError#operation} property.\n * <p>\n * This error may also result from invalid configuration provided to\n * {@link NoSQLClient} constructor when {@link NoSQLClient} is created in\n * which case the [operation]{@link NoSQLError#operation} property will\n * contain the configuration object.\n * <p>\n * Errors of this class have error code {@link ErrorCode.ILLEGAL_ARGUMENT}.\n * @see {@link ErrorCode.ILLEGAL_ARGUMENT}\n * @see {@link NoSQLError#operation}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLArgumentError extends NoSQLError {\n  constructor(msg, operation, cause) {\n    super(ErrorCode.ILLEGAL_ARGUMENT, msg, cause, operation);\n    this._rejectedByDriver = true; //for testing\n  }\n}\n\n/**\n * This error indicates communication problem between the client and the\n * server that resulted from invalid protocol message from either client or\n * server.  It can be caused version mismatch between client and server or\n * other reasons and is not retryable.\n * Errors of this class have error code\n * {@link ErrorCode.BAD_PROTOCOL_MESSAGE}.\n * @see {@link ErrorCode.BAD_PROTOCOL_MESSAGE}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLProtocolError extends NoSQLError {\n  constructor(msg, cause, operation) {\n    super(ErrorCode.BAD_PROTOCOL_MESSAGE, msg ? msg : 'Invalid protocol message', cause, operation);\n  }\n}\n\n/**\n * This error indicates that the server is running at a lower protocol\n * version than the client (i.e. the client is using a newer protocol\n * version than the server supports). The client should attempt to\n * decrement its internal protocol version and try again.\n * Errors of this class have error code\n * {@link ErrorCode.UNSUPPORTED_PROTOCOL}.\n * @see {@link ErrorCode.UNSUPPORTED_PROTOCOL}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLUnsupportedProtocolError extends NoSQLError {\n  constructor(msg, cause, operation) {\n    super(ErrorCode.UNSUPPORTED_PROTOCOL, msg ? msg : 'Unsupported protocol', cause, operation);\n  }\n}\n\n/**\n * Indicates network error when trying to communicate with the service.\n * Can be due to inability to connect (e.g. if the network or\n * the service is down).  Note that this is different from unsuccessful\n * response from the service, which is indicated by {@link NoSQLServiceError}.\n * Errors of this class have error code {@link ErrorCode.NETWORK_ERROR}.\n * @see {@link ErrorCode.NETWORK_ERROR}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLNetworkError extends NoSQLError {\n  constructor(msg, operation, cause) {\n    super(ErrorCode.NETWORK_ERROR, msg ? msg : 'Network error', cause, operation);\n  }\n}\n\n/**\n * Indicates unsuccessful response from the service.  Even though the client\n * was able to communicate with the service, the service was not able to\n * process client request and thus returned unsuccessful response.\n * Additional information is provided in the error message.  Note that\n * this is different from inability to communicate with the service which is\n * indicated by {@link NoSQLNetworkError}.\n * Errors of this class have error code {@link ErrorCode.SERVICE_ERROR}\n * @see {@link ErrorCode.SERVICE_ERROR}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLServiceError extends NoSQLError {\n  constructor(res, errOutput, operation) {\n    super(ErrorCode.SERVICE_ERROR, `Unsuccessful HTTP response.  Status code: ${res.statusCode}. ` + `Status message: ${res.statusMessage}` + (errOutput ? `.  Error output: ${errOutput}` : ''), null, operation);\n    this._statusCode = res.statusCode;\n    this._statusMessage = res.statusMessage;\n    this._errOutput = errOutput;\n  }\n\n  /**\n   * HTTP status code.\n   * @type {number}\n   * @readonly\n   * @ignore\n   */\n  get statusCode() {\n    return this._statusCode;\n  }\n\n  /**\n   * HTTP status message that describes the status code.\n   * @type {string}\n   * @readonly\n   * @ignore\n   */\n  get statusMessage() {\n    return this._statusMessage;\n  }\n\n  /**\n   * Custom response message from the service.  If not present, the result\n   * of this property is <em>undefined</em>.\n   * @type {string|undefined}\n   * @readonly\n   * @ignore\n   */\n  get response() {\n    return this._errOutput;\n  }\n\n  /**\n   * @ignore\n   */\n  get retryable() {\n    return this._statusCode === HttpConstants.HTTP_SERVER_ERROR || this._statusCode === HttpConstants.HTTP_UNAVAILABLE;\n  }\n}\n\n/**\n * This error occurs if operation has exceeded the provided timeout interval.\n * It is possible that the operation has been retried a number of times before\n * this timeout occurred.  Whether the operation was retried depends on the\n * operation type, the errors caused by the operation and configured retry\n * handler(see {@link NoSQLError#retryable} for explanation).  For retryable\n * operations, the timeout is considered cumulative over all retries (not as\n * timeout of a single retry). If this error occurs when the service is\n * operating properly, you may want to adjust timeout values configured for\n * {@link NoSQLClient} or passed to the {@link NoSQLClient} methods in\n * <em>opt</em> argument.\n * <p>\n * Errors of this class have error code {@link ErrorCode.REQUEST_TIMEOUT}.\n * @see {@link Config}#timeout\n * @see {@link Config}#ddlTimeout\n * @see {@link ErrorCode.REQUEST_TIMEOUT}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLTimeoutError extends NoSQLError {\n  static _timeoutMsg(timeout, numRetries) {\n    let ret = `Operation timed out after ${timeout} ms`;\n    if (numRetries) {\n      ret += ` and ${numRetries} retries`;\n    }\n    return ret;\n  }\n  constructor(timeout, numRetries, operation, cause) {\n    super(ErrorCode.REQUEST_TIMEOUT, NoSQLTimeoutError._timeoutMsg(timeout, numRetries), cause, operation);\n  }\n}\n\n/**\n * This class covers all errors that occur while acquiring authorization to\n * perform an operation on NoSQL DB.  Because there could be several problems\n * acquiring authorization, the errors of this class may have one of several\n * error codes:\n * <ul>\n * <li>{@link ErrorCode.BAD_PROTOCOL_MESSAGE} indicates problem in\n * authorization protocol.</li>\n * <li>{@link ErrorCode.ILLEGAL_STATE} indicates that authorization operation\n * encountered unexpected state, such as missing or invalid information\n * received from authorization server.  See the error message for details.\n * </li>\n * <li>{@link ErrorCode.ILLEGAL_ARGUMENT} indicates problem with\n * authorization configuration provided as {@link AuthConfig} when\n * {@link NoSQLClient} instance is created.</li>\n * <li>{@link ErrorCode.REQUEST_TIMEOUT} indicates that timeout was exceeded\n * trying to obtain authorization information.</li>\n * <li>{@link ErrorCode.SERVICE_ERROR} indicates unsuccessful response\n * from authorization server.  This may be due to many factors, including\n * invalid user credentials (user name and password).  See error message for\n * more information</li>\n * <li>{@link ErrorCode.UNAUTHORIZED} may indicate insufficient permissions\n * while trying to obtain authorization information.\n * <li>{@link ErrorCode.CREDENTIALS_ERROR} indicates error accessing user or\n * application credentials.  The reason for this error depends on what\n * credential provider is used for the authorization.</li>\n * <li>{@link ErrorCode.NETWORK_ERROR} indicates error communicating with the\n * authorization server.  This error code is used for errors not due to any\n * cases above.\n * </ul>\n * <p>\n * Because the error could have different causes even for the same error code,\n * it is important to check the message of the error as well as its\n * {@link NoSQLError#cause}.  The message should contain HTTP status code and\n * authorization server response if they are present.\n * <p>\n * Note that this class is used only for errors that occur while\n * trying to obtain authorization string from authorization provider and not\n * errors that occur when making request to NoSQL DB with invalid\n * authorization string.  In the latter case, {@link NoSQLError} is returned\n * with error code {@link ErrorCode.INVALID_AUTHORIZATION}.\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLAuthorizationError extends NoSQLError {\n  constructor(errCode, msg, cause, operation) {\n    super(errCode, 'Authorization error: ' + msg, cause, operation);\n  }\n  static badProto(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.BAD_PROTOCOL_MESSAGE, '[protocol error]: ' + msg, cause, operation);\n  }\n  static illegalState(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.ILLEGAL_STATE, '[illegal state]: ' + msg, cause, operation);\n  }\n  static invalidArg(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.ILLEGAL_ARGUMENT, '[invalid arguments]: ' + msg, cause, operation);\n  }\n  static timeout(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.REQUEST_TIMEOUT, '[operation timeout]: ' + msg, cause, operation);\n  }\n  static unauthorized(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.UNAUTHORIZED, '[unauthorized]: ' + msg, cause, operation);\n  }\n  static service(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.SERVICE_ERROR, '[unsuccessful service response]: ' + msg, cause, operation);\n  }\n  static creds(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.CREDENTIALS_ERROR, '[credentials error]: ' + msg, cause, operation);\n  }\n  static network(msg, cause, operation) {\n    return new NoSQLAuthorizationError(ErrorCode.NETWORK_ERROR, '[invalid state]: ' + msg, cause, operation);\n  }\n}\n\n/**\n * This class covers errors that occur during client-side portion of query\n * execution, that is parts of the query plan executed by the driver.\n * Because different such problems may arise, the errors of this class may\n * have one of several error codes:\n * <ul>\n * <li>{@link ErrorCode.BAD_PROTOCOL_MESSAGE} indicates invalid protocol\n * message received by the client such as invalid part of a query plan or\n * invalid or inconsistent data for partition sorting.</li>\n * <li>{@link ErrorCode.ILLEGAL_ARGUMENT} indicates invalid or missing query\n * parameters or operands, such as missing value for bound variable,\n * non-numeric operand for arithmetic expression, non-numeric parameter for\n * OFFSET or LIMIT clause, etc.</li>\n * <li>{@link ErrorCode.ILLEGAL_STATE} indicates illegal state in the query\n * engine, which may be caused by a problem in the engine.  See the error\n * message for details.</li>\n * <li>{@link ErrorCode.MEMORY_LIMIT_EXCEEDED} indicates that local memory\n * consumed by the query execution exceeded the limit set by\n * <em>maxMemoryMB</em>.  See {@link ErrorCode.MEMORY_LIMIT_EXCEEDED}</li>\n * </ul>\n * <p>\n * Note that this class does not cover all errors that may occur during query\n * execution.  Besides error cases described above thrown by\n * {@link NoSQLQueryError}, other errors that are common to execution of all\n * APIs may also occur during execution of queries, such as network, service\n * or authorization-related errors and also errors due to invalid arguments\n * provided to the {@link NoSQLClient#query} API.  These may be thrown as\n * {@link NoSQLError}, {@link NoSQLServiceError}, {@link NoSQLArgumentError},\n * etc.\n * @see {@link NoSQLClient#query}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLQueryError extends NoSQLError {\n  constructor(errCode, msg, cause, operation) {\n    super(errCode, 'Query error: ' + msg, cause, operation);\n  }\n  static badProto(msg, operation, cause) {\n    return new NoSQLQueryError(ErrorCode.BAD_PROTOCOL_MESSAGE, '[protocol error]: ' + msg, cause, operation);\n  }\n  static illegalArg(msg, operation, cause) {\n    return new NoSQLQueryError(ErrorCode.ILLEGAL_ARGUMENT, '[invalid argument]: ' + msg, cause, operation);\n  }\n  static illegalState(msg, operation, cause) {\n    return new NoSQLQueryError(ErrorCode.ILLEGAL_STATE, '[illegal state]: ' + msg, cause, operation);\n  }\n  static memory(msg, operation, cause) {\n    return new NoSQLQueryError(ErrorCode.MEMORY_LIMIT_EXCEEDED, '[memory exceeded]: ' + msg, cause, operation);\n  }\n}\nmodule.exports = {\n  ErrorCode,\n  NoSQLError,\n  NoSQLArgumentError,\n  NoSQLProtocolError,\n  NoSQLUnsupportedProtocolError,\n  NoSQLNetworkError,\n  NoSQLServiceError,\n  NoSQLTimeoutError,\n  NoSQLAuthorizationError,\n  NoSQLQueryError\n};","map":{"version":3,"names":["ErrorCode","require","HttpConstants","makeMsg","errCode","msg","cause","m","name","message","NoSQLError","Error","constructor","operation","_errCode","_cause","_req","errorCode","retryable","create","ILLEGAL_ARGUMENT","NoSQLArgumentError","UNSUPPORTED_PROTOCOL","NoSQLUnsupportedProtocolError","BAD_PROTOCOL_MESSAGE","includes","NoSQLProtocolError","NETWORK_ERROR","NoSQLNetworkError","SERVICE_ERROR","NoSQLServiceError","_rejectedByDriver","res","errOutput","statusCode","statusMessage","_statusCode","_statusMessage","_errOutput","response","HTTP_SERVER_ERROR","HTTP_UNAVAILABLE","NoSQLTimeoutError","_timeoutMsg","timeout","numRetries","ret","REQUEST_TIMEOUT","NoSQLAuthorizationError","badProto","illegalState","ILLEGAL_STATE","invalidArg","unauthorized","UNAUTHORIZED","service","creds","CREDENTIALS_ERROR","network","NoSQLQueryError","illegalArg","memory","MEMORY_LIMIT_EXCEEDED","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/error.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst ErrorCode = require('./error_code');\nconst HttpConstants = require('./constants').HttpConstants;\n\nfunction makeMsg(errCode, msg, cause) {\n    let m = `[${errCode.name}] ${msg}`;\n    if (cause) {\n        m += '; Caused by: ' + cause.message;\n    }\n    return m;\n}\n\n/**\n * This is the base class for all errors returned by the driver.\n * {@link NoSQLError} extends JavaScript Error class and all other errors used\n * by the driver extend {@link NoSQLError}.  Note that you don't create these\n * error objects explicitly, but the driver returns errors in the following\n * ways:\n * <ul>\n * <li>For synchronous APIs the error is thrown as an exception</li>\n * <li>For asynchronous APIs, which is most of the APIs in {@link NoSQLClient}\n * class, the error is the result of the rejection of Promise returned by\n * the API.  In async function, you can use <em>try...catch</em> to handle\n * these errors as if they were exceptions.\n * </ul>\n * <p>\n * Each error contains {@link ErrorCode} which can be used in the application\n * logic to take different actions upon different kinds of errors.  In\n * addition, an error may have an optional <em>cause</em>, which is another\n * error that caused this error.  The <em>cause</em> is typically also\n * instance of {@link NoSQLError} or its subclass, but sometimes may not be.\n * E.g. if an authorization error is caused by invalid JSON response, the\n * <em>cause</em> would be instance of <em>SyntaxError</em>.\n * <p>\n * In addition, each error has an optional operation object which describes\n * the operation that caused the error, including the API and its arguments,\n * see {@link Operation}. Not all errors have operation available.\n * <p>\n * Most errors returned from the server result in {@link NoSQLError}, but for\n * other cases specialized subclasses are used such as\n * {@link NoSQLArgumentError}, {@link NoSQLServiceError},\n * {@link NoSQLNetworkError}, {@link NoSQLAuthorizationError} and others.\n * \n * @extends {Error}\n * @hideconstructor\n * @tutorial tables\n */\nclass NoSQLError extends Error {\n    \n    constructor(errCode, msg, cause, operation) {\n        super(makeMsg(errCode, msg, cause));\n        this._errCode = errCode;\n        this.name = this.constructor.name;\n        this._cause = cause;\n        this._req = operation;\n    }\n\n    /**\n     * {@link ErrorCode} of this error.\n     * @type {ErrorCode}\n     * @readonly\n     */\n    get errorCode() {\n        return this._errCode;\n    }\n\n    /**\n     * An error that caused this error.  In many cases it is also instance of\n     * {@link NoSQLError} and may itself have a cause.  You could iterate\n     * through the chain of causes like this:\n     * <p>\n     * <em>for(let cause = err.cause; cause; cause = cause.cause) {...</em>\n     * <p>\n     * If this error does not have a cause, the value of this property is\n     * <em>undefined</em>.\n     * @type {Error|undefined}\n     * @readonly\n     */\n    get cause() {\n        return this._cause;\n    }\n\n    /**\n     * Indicates whether this error is retryable.\n     * <p>\n     * APIs that result in retryable errors are automatically retried by the\n     * driver's default {@link RetryHandler}.  Default retry handler can be\n     * customized by properties in {@link RetryConfig}.  Alternatively, a\n     * custom {@link RetryHandler} can be set as\n     * {@link RetryConfig}#handler.\n     * <p>\n     * If necessary, APIs that result in retryable errors may also be\n     * explicitly retried by the application.\n     * @see {@link RetryConfig}\n     * @type {boolean}\n     * @readonly\n     */\n    get retryable() {\n        return this._errCode.retryable;\n    }\n\n    /**\n     * Operation that resulted in this error.\n     * {@link Operation} object contains the API and its arguments including\n     * the options used.  Operation object may not always be available, in\n     * which case the value of this property is <em>undefined</em>.\n     * <p>\n     * If this error happened during creation of new {@link NoSQLClient} then\n     * instead of {@link Operation} this property contains {@link Config}\n     * used to create {@link NoSQLClient} instance.\n     * @see {@link Operation}\n     * @see {@link Config}\n     * @type {Operation|Config|undefined}\n     * @readonly\n     */\n    get operation() {\n        return this._req;\n    }\n\n    /**\n     * @ignore\n     */\n    static create(errCode, msg, cause, operation) {\n        switch(errCode) {\n        case ErrorCode.ILLEGAL_ARGUMENT:\n            return new NoSQLArgumentError(msg, operation, cause);\n        case ErrorCode.UNSUPPORTED_PROTOCOL:\n            return new NoSQLUnsupportedProtocolError(msg, operation, cause);\n        case ErrorCode.BAD_PROTOCOL_MESSAGE:\n            if (msg.includes('Invalid driver serial version')) {\n                return new NoSQLUnsupportedProtocolError(msg, operation, cause);\n            }\n            return new NoSQLProtocolError(msg, cause, operation);\n        case ErrorCode.NETWORK_ERROR:\n            return new NoSQLNetworkError(msg, operation, cause);\n        case ErrorCode.SERVICE_ERROR:\n            return new NoSQLServiceError(msg, operation, cause);\n        default:\n            return new NoSQLError(errCode, msg, cause, operation);\n        }\n    }\n}\n\n/**\n * This error indicates that invalid argument(s) were passed to the API which\n * may include options in the <em>opt</em> argument passed to\n * {@link NoSQLClient} methods.  You may examine the arguments and options\n * passed using [operation]{@link NoSQLError#operation} property.\n * <p>\n * This error may also result from invalid configuration provided to\n * {@link NoSQLClient} constructor when {@link NoSQLClient} is created in\n * which case the [operation]{@link NoSQLError#operation} property will\n * contain the configuration object.\n * <p>\n * Errors of this class have error code {@link ErrorCode.ILLEGAL_ARGUMENT}.\n * @see {@link ErrorCode.ILLEGAL_ARGUMENT}\n * @see {@link NoSQLError#operation}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLArgumentError extends NoSQLError {\n    constructor(msg, operation, cause) {\n        super(ErrorCode.ILLEGAL_ARGUMENT, msg, cause, operation);\n        this._rejectedByDriver = true; //for testing\n    }\n}\n\n/**\n * This error indicates communication problem between the client and the\n * server that resulted from invalid protocol message from either client or\n * server.  It can be caused version mismatch between client and server or\n * other reasons and is not retryable.\n * Errors of this class have error code\n * {@link ErrorCode.BAD_PROTOCOL_MESSAGE}.\n * @see {@link ErrorCode.BAD_PROTOCOL_MESSAGE}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLProtocolError extends NoSQLError {\n    constructor(msg, cause, operation) {\n        super(ErrorCode.BAD_PROTOCOL_MESSAGE,\n            msg ? msg : 'Invalid protocol message',\n            cause, operation);\n    }\n}\n\n/**\n * This error indicates that the server is running at a lower protocol\n * version than the client (i.e. the client is using a newer protocol\n * version than the server supports). The client should attempt to\n * decrement its internal protocol version and try again.\n * Errors of this class have error code\n * {@link ErrorCode.UNSUPPORTED_PROTOCOL}.\n * @see {@link ErrorCode.UNSUPPORTED_PROTOCOL}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLUnsupportedProtocolError extends NoSQLError {\n    constructor(msg, cause, operation) {\n        super(ErrorCode.UNSUPPORTED_PROTOCOL,\n            msg ? msg : 'Unsupported protocol',\n            cause, operation);\n    }\n}\n\n/**\n * Indicates network error when trying to communicate with the service.\n * Can be due to inability to connect (e.g. if the network or\n * the service is down).  Note that this is different from unsuccessful\n * response from the service, which is indicated by {@link NoSQLServiceError}.\n * Errors of this class have error code {@link ErrorCode.NETWORK_ERROR}.\n * @see {@link ErrorCode.NETWORK_ERROR}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLNetworkError extends NoSQLError {\n    constructor(msg, operation, cause) {\n        super(ErrorCode.NETWORK_ERROR,\n            msg ? msg : 'Network error',\n            cause,\n            operation);\n    }\n}\n\n/**\n * Indicates unsuccessful response from the service.  Even though the client\n * was able to communicate with the service, the service was not able to\n * process client request and thus returned unsuccessful response.\n * Additional information is provided in the error message.  Note that\n * this is different from inability to communicate with the service which is\n * indicated by {@link NoSQLNetworkError}.\n * Errors of this class have error code {@link ErrorCode.SERVICE_ERROR}\n * @see {@link ErrorCode.SERVICE_ERROR}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLServiceError extends NoSQLError {\n    constructor(res, errOutput, operation) {\n        super(ErrorCode.SERVICE_ERROR,\n            `Unsuccessful HTTP response.  Status code: ${res.statusCode}. ` +\n            `Status message: ${res.statusMessage}` +\n            (errOutput ? `.  Error output: ${errOutput}` : ''),\n            null, operation);\n        this._statusCode = res.statusCode;\n        this._statusMessage = res.statusMessage;\n        this._errOutput = errOutput;\n    }\n\n    /**\n     * HTTP status code.\n     * @type {number}\n     * @readonly\n     * @ignore\n     */\n    get statusCode() {\n        return this._statusCode;\n    }\n\n    /**\n     * HTTP status message that describes the status code.\n     * @type {string}\n     * @readonly\n     * @ignore\n     */\n    get statusMessage() {\n        return this._statusMessage;\n    }\n\n    /**\n     * Custom response message from the service.  If not present, the result\n     * of this property is <em>undefined</em>.\n     * @type {string|undefined}\n     * @readonly\n     * @ignore\n     */\n    get response() {\n        return this._errOutput;\n    }\n\n    /**\n     * @ignore\n     */\n    get retryable() {\n        return this._statusCode === HttpConstants.HTTP_SERVER_ERROR ||\n            this._statusCode === HttpConstants.HTTP_UNAVAILABLE;\n    }\n}\n\n/**\n * This error occurs if operation has exceeded the provided timeout interval.\n * It is possible that the operation has been retried a number of times before\n * this timeout occurred.  Whether the operation was retried depends on the\n * operation type, the errors caused by the operation and configured retry\n * handler(see {@link NoSQLError#retryable} for explanation).  For retryable\n * operations, the timeout is considered cumulative over all retries (not as\n * timeout of a single retry). If this error occurs when the service is\n * operating properly, you may want to adjust timeout values configured for\n * {@link NoSQLClient} or passed to the {@link NoSQLClient} methods in\n * <em>opt</em> argument.\n * <p>\n * Errors of this class have error code {@link ErrorCode.REQUEST_TIMEOUT}.\n * @see {@link Config}#timeout\n * @see {@link Config}#ddlTimeout\n * @see {@link ErrorCode.REQUEST_TIMEOUT}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLTimeoutError extends NoSQLError {\n    \n    static _timeoutMsg(timeout, numRetries) {\n        let ret = `Operation timed out after ${timeout} ms`;\n        if (numRetries) {\n            ret += ` and ${numRetries} retries`;\n        }\n        return ret;\n    }\n\n    constructor(timeout, numRetries, operation, cause) {\n        super(ErrorCode.REQUEST_TIMEOUT,\n            NoSQLTimeoutError._timeoutMsg(timeout, numRetries), cause,\n            operation);\n    }\n}\n\n/**\n * This class covers all errors that occur while acquiring authorization to\n * perform an operation on NoSQL DB.  Because there could be several problems\n * acquiring authorization, the errors of this class may have one of several\n * error codes:\n * <ul>\n * <li>{@link ErrorCode.BAD_PROTOCOL_MESSAGE} indicates problem in\n * authorization protocol.</li>\n * <li>{@link ErrorCode.ILLEGAL_STATE} indicates that authorization operation\n * encountered unexpected state, such as missing or invalid information\n * received from authorization server.  See the error message for details.\n * </li>\n * <li>{@link ErrorCode.ILLEGAL_ARGUMENT} indicates problem with\n * authorization configuration provided as {@link AuthConfig} when\n * {@link NoSQLClient} instance is created.</li>\n * <li>{@link ErrorCode.REQUEST_TIMEOUT} indicates that timeout was exceeded\n * trying to obtain authorization information.</li>\n * <li>{@link ErrorCode.SERVICE_ERROR} indicates unsuccessful response\n * from authorization server.  This may be due to many factors, including\n * invalid user credentials (user name and password).  See error message for\n * more information</li>\n * <li>{@link ErrorCode.UNAUTHORIZED} may indicate insufficient permissions\n * while trying to obtain authorization information.\n * <li>{@link ErrorCode.CREDENTIALS_ERROR} indicates error accessing user or\n * application credentials.  The reason for this error depends on what\n * credential provider is used for the authorization.</li>\n * <li>{@link ErrorCode.NETWORK_ERROR} indicates error communicating with the\n * authorization server.  This error code is used for errors not due to any\n * cases above.\n * </ul>\n * <p>\n * Because the error could have different causes even for the same error code,\n * it is important to check the message of the error as well as its\n * {@link NoSQLError#cause}.  The message should contain HTTP status code and\n * authorization server response if they are present.\n * <p>\n * Note that this class is used only for errors that occur while\n * trying to obtain authorization string from authorization provider and not\n * errors that occur when making request to NoSQL DB with invalid\n * authorization string.  In the latter case, {@link NoSQLError} is returned\n * with error code {@link ErrorCode.INVALID_AUTHORIZATION}.\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLAuthorizationError extends NoSQLError {\n    constructor(errCode, msg, cause, operation) {\n        super(errCode, 'Authorization error: ' + msg, cause, operation);\n    }\n\n    static badProto(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.BAD_PROTOCOL_MESSAGE,\n            '[protocol error]: ' + msg, cause, operation);\n    }\n\n    static illegalState(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.ILLEGAL_STATE,\n            '[illegal state]: ' + msg, cause, operation);\n    }\n\n    static invalidArg(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.ILLEGAL_ARGUMENT,\n            '[invalid arguments]: ' + msg, cause, operation);\n    }\n\n    static timeout(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.REQUEST_TIMEOUT,\n            '[operation timeout]: ' + msg, cause, operation);\n    }\n\n    static unauthorized(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.UNAUTHORIZED,\n            '[unauthorized]: ' + msg, cause, operation);\n    }\n\n    static service(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.SERVICE_ERROR,\n            '[unsuccessful service response]: ' + msg, cause, operation);\n    }\n\n    static creds(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.CREDENTIALS_ERROR,\n            '[credentials error]: ' + msg, cause, operation);\n    }\n\n    static network(msg, cause, operation) {\n        return new NoSQLAuthorizationError(ErrorCode.NETWORK_ERROR,\n            '[invalid state]: ' + msg, cause, operation);\n    }\n}\n\n/**\n * This class covers errors that occur during client-side portion of query\n * execution, that is parts of the query plan executed by the driver.\n * Because different such problems may arise, the errors of this class may\n * have one of several error codes:\n * <ul>\n * <li>{@link ErrorCode.BAD_PROTOCOL_MESSAGE} indicates invalid protocol\n * message received by the client such as invalid part of a query plan or\n * invalid or inconsistent data for partition sorting.</li>\n * <li>{@link ErrorCode.ILLEGAL_ARGUMENT} indicates invalid or missing query\n * parameters or operands, such as missing value for bound variable,\n * non-numeric operand for arithmetic expression, non-numeric parameter for\n * OFFSET or LIMIT clause, etc.</li>\n * <li>{@link ErrorCode.ILLEGAL_STATE} indicates illegal state in the query\n * engine, which may be caused by a problem in the engine.  See the error\n * message for details.</li>\n * <li>{@link ErrorCode.MEMORY_LIMIT_EXCEEDED} indicates that local memory\n * consumed by the query execution exceeded the limit set by\n * <em>maxMemoryMB</em>.  See {@link ErrorCode.MEMORY_LIMIT_EXCEEDED}</li>\n * </ul>\n * <p>\n * Note that this class does not cover all errors that may occur during query\n * execution.  Besides error cases described above thrown by\n * {@link NoSQLQueryError}, other errors that are common to execution of all\n * APIs may also occur during execution of queries, such as network, service\n * or authorization-related errors and also errors due to invalid arguments\n * provided to the {@link NoSQLClient#query} API.  These may be thrown as\n * {@link NoSQLError}, {@link NoSQLServiceError}, {@link NoSQLArgumentError},\n * etc.\n * @see {@link NoSQLClient#query}\n * @extends NoSQLError\n * @hideconstructor\n */\nclass NoSQLQueryError extends NoSQLError {\n    constructor(errCode, msg, cause, operation) {\n        super(errCode, 'Query error: ' + msg, cause, operation);\n    }\n\n    static badProto(msg, operation, cause) {\n        return new NoSQLQueryError(ErrorCode.BAD_PROTOCOL_MESSAGE,\n            '[protocol error]: ' + msg, cause, operation);\n    }\n\n    static illegalArg(msg, operation, cause) {\n        return new NoSQLQueryError(ErrorCode.ILLEGAL_ARGUMENT,\n            '[invalid argument]: ' + msg, cause, operation);\n    }\n\n    static illegalState(msg, operation, cause) {\n        return new NoSQLQueryError(ErrorCode.ILLEGAL_STATE,\n            '[illegal state]: ' + msg, cause, operation);\n    }\n\n    static memory(msg, operation, cause) {\n        return new NoSQLQueryError(ErrorCode.MEMORY_LIMIT_EXCEEDED,\n            '[memory exceeded]: ' + msg, cause, operation);\n    }\n\n}\n\nmodule.exports = {\n    ErrorCode,\n    NoSQLError,\n    NoSQLArgumentError,\n    NoSQLProtocolError,\n    NoSQLUnsupportedProtocolError,\n    NoSQLNetworkError,\n    NoSQLServiceError,\n    NoSQLTimeoutError,\n    NoSQLAuthorizationError,\n    NoSQLQueryError\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}