{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst ServiceType = require('./constants').ServiceType;\nconst Consistency = require('./constants').Consistency;\nconst ErrorCode = require('./error_code');\nconst NoSQLArgumentError = require('./error').NoSQLArgumentError;\nconst isPosInt32 = require('./utils').isPosInt32;\nconst isPosInt32OrZero = require('./utils').isPosInt32OrZero;\nconst isPlainObject = require('./utils').isPlainObject;\nconst requireNoWP = require('./utils').requireNoWP;\nconst path = require('path');\nconst AuthConfig = require('./auth/config');\nconst NumberTypeHandler = require('./db_number');\nconst Region = require('./region');\nclass Config {\n  //default retry.handler.doRetry()\n  static _shouldRetry(req, numRetries, err) {\n    assert(err);\n    switch (err.errorCode) {\n      case ErrorCode.OPERATION_LIMIT_EXCEEDED:\n        return req.opt.retry.controlOpBaseDelay && req.opt.timeout > req.opt.retry.controlOpBaseDelay;\n      case ErrorCode.SECURITY_INFO_UNAVAILABLE:\n      case ErrorCode.NETWORK_ERROR:\n        return true;\n      case ErrorCode.INVALID_AUTHORIZATION:\n        //Retry once in case the error is due to expired authorization.  But\n        //if last error was the same, then the error is not due to expiration\n        //so we don't retry anymore.\n        return !req.lastError || req.lastError.errorCode !== ErrorCode.INVALID_AUTHORIZATION;\n      default:\n        break;\n    }\n    assert(req._op);\n    if (!req._op.shouldRetry(req)) {\n      return false;\n    }\n    return numRetries < req.opt.retry.maxRetries;\n  }\n  static _backoffDelay(numRetries, baseDelay) {\n    let ms = (1 << numRetries - 1) * baseDelay;\n    ms += Math.floor(Math.random() * baseDelay);\n    return ms;\n  }\n  static _secInfoNotReadyDelay(numRetries, numBackoff, baseDelay) {\n    return numRetries > numBackoff ? Config._backoffDelay(numRetries - numBackoff, baseDelay) : baseDelay;\n  }\n\n  //default retry.handler.delay()\n  static _retryDelay(req, numRetries, err) {\n    switch (err.errorCode) {\n      case ErrorCode.OPERATION_LIMIT_EXCEEDED:\n        return Config._backoffDelay(numRetries, req.opt.retry.controlOpBaseDelay);\n      case ErrorCode.SECURITY_INFO_UNAVAILABLE:\n        return Config._secInfoNotReadyDelay(numRetries, req.opt.retry.secInfoNumBackoff, req.opt.retry.secInfoBaseDelay);\n      default:\n        return Config._backoffDelay(numRetries, req.opt.retry.baseDelay);\n    }\n  }\n\n  //Validate and make uniform interface for retry handler\n  static _initRetry(cfg) {\n    if (cfg.retry == null) {\n      cfg.retry = {};\n    } else if (typeof cfg.retry !== 'object') {\n      throw new NoSQLArgumentError('Invalid retry value', cfg);\n    }\n    if (cfg.retry.handler == null) {\n      cfg.retry.handler = {};\n    } else if (typeof cfg.retry.handler !== 'object') {\n      throw new NoSQLArgumentError('Invalid retry.handler value', cfg);\n    }\n    if (!cfg.retry.handler.doRetry) {\n      if (cfg.retry.handler.delay != null) {\n        throw new NoSQLArgumentError('Missing retry.handler.doRetry value', cfg);\n      }\n      cfg.retry.handler.doRetry = () => false;\n      return;\n    }\n    if (cfg.retry.handler.doRetry === true) {\n      cfg.retry.handler.doRetry = () => true;\n    } else if (typeof cfg.retry.handler.doRetry !== 'function') {\n      throw new NoSQLArgumentError('Invalid retry.handler.doRetry value', cfg);\n    }\n    //If using default doRetry, maxRetries must be valid\n    if (cfg.retry.handler.doRetry === this._shouldRetry && !isPosInt32(cfg.retry.maxRetries)) {\n      throw new NoSQLArgumentError('Missing or invalid retry.maxRetries value', cfg);\n    }\n    if (isPosInt32(cfg.retry.handler.delay)) {\n      const val = cfg.retry.handler.delay;\n      cfg.retry.handler.delay = () => val;\n      return;\n    }\n    if (typeof cfg.retry.handler.delay !== 'function') {\n      throw new NoSQLArgumentError('Invalid retry.handler.delay value', cfg);\n    }\n    //If using default delay, the following parameters must be valid\n    if (cfg.retry.handler.delay === this._retryDelay) {\n      for (let n of ['baseDelay', 'secInfoBaseDelay']) {\n        if (!isPosInt32(cfg.retry[n])) {\n          throw new NoSQLArgumentError(`Invalid retry.${n} value`, cfg);\n        }\n      }\n      if (!isPosInt32OrZero(cfg.retry.secInfoNumBackoff)) {\n        throw new NoSQLArgumentError('Invalid retry.secInfoNumBackoff value', cfg);\n      }\n      if (cfg.retry.controlOpBaseDelay != null && !isPosInt32(cfg.retry.controlOpBaseDelay)) {\n        throw new NoSQLArgumentError('Invalid retry.controlOpBaseDelay value', cfg);\n      }\n    }\n  }\n  static _endpoint2url(cfg) {\n    let endpoint = cfg.endpoint;\n    if (endpoint instanceof URL) {\n      endpoint = endpoint.href;\n      if (endpoint.endsWith('/')) {\n        endpoint = endpoint.slice(0, -1);\n      }\n    }\n    let host = endpoint;\n    let proto;\n    let port;\n    let i = endpoint.indexOf('://');\n    if (i !== -1) {\n      proto = endpoint.substring(0, i).toLowerCase();\n      if (proto !== 'http' && proto !== 'https') {\n        throw new NoSQLArgumentError(`Invalid service protocol \\\n${proto} in endpoint ${endpoint}`, cfg);\n      }\n      host = endpoint.substring(i + 3);\n    }\n    if (host.includes('/')) {\n      throw new NoSQLArgumentError(`Invalid endpoint: ${endpoint}, may \\\nnot contain path`, cfg);\n    }\n    const parts = host.split(':');\n    host = parts[0];\n    if (!parts.length || parts.length > 2) {\n      throw new NoSQLArgumentError(`Invalid endpoint: ${endpoint}`, cfg);\n    }\n    if (parts.length === 2) {\n      port = Number(parts[1]);\n      if (!isPosInt32(port)) {\n        throw new NoSQLArgumentError(`Invalid port value ${parts[1]} \\\n    for endpoint ${endpoint}`, cfg);\n      }\n    }\n    /*\n     * If protocol is not specified and the port isn't 443, assume we're\n     * using http. Cases where we may use port 80, 8080, or a non-standard\n     * port include internal testing to the proxy or minicloud.\n     */\n    if (proto == null) {\n      if (port == null) {\n        port = 443;\n      }\n      proto = port === 443 ? 'https' : 'http';\n    } else if (port == null) {\n      port = proto === 'https' ? 443 : 8080;\n    }\n    try {\n      return new URL(`${proto}://${host}:${port}`);\n    } catch (err) {\n      throw new NoSQLArgumentError(`Invalid endpoint: ${endpoint}, \\\nfailed to construct URL`, cfg);\n    }\n  }\n  static initUrl(cfg, isStrict) {\n    if (cfg.url != null) {\n      throw new NoSQLArgumentError('May not specify property \"url\", \\\nuse \"endpoint\" or \"region\" instead');\n    }\n    if (cfg.region != null) {\n      if (cfg.endpoint != null) {\n        throw new NoSQLArgumentError('Config may not contain both \\\nservice endpoint and region', cfg);\n      }\n      if (typeof cfg.region === 'string') {\n        cfg.region = Region.fromRegionId(cfg.region);\n      }\n      if (!(cfg.region instanceof Region)) {\n        throw new NoSQLArgumentError('Invalid region', cfg);\n      }\n      cfg.endpoint = cfg.region.endpoint;\n    }\n    if (cfg.endpoint != null) {\n      if (typeof cfg.endpoint !== 'string' && !(cfg.endpoint instanceof URL)) {\n        throw new NoSQLArgumentError('Invalid service endpoint', cfg);\n      }\n      cfg.url = this._endpoint2url(cfg);\n    } else if (isStrict) {\n      throw new NoSQLArgumentError('Missing service endpoint or region', cfg);\n    }\n  }\n  static _init(cfg) {\n    if (cfg.serviceType != null) {\n      if (typeof cfg.serviceType === 'string') {\n        cfg.serviceType = ServiceType[cfg.serviceType.toUpperCase()];\n      }\n      if (!(cfg.serviceType instanceof ServiceType)) {\n        throw new NoSQLArgumentError(`Invalid service type: ${cfg.serviceType}`, cfg);\n      }\n    }\n    this.initUrl(cfg);\n    for (let n of ['timeout', 'ddlTimeout', 'securityInfoTimeout', 'tablePollDelay', 'adminPollDelay', 'maxMemoryMB']) {\n      if (!isPosInt32(cfg[n])) {\n        throw new NoSQLArgumentError(`Invalid ${n} value: ${cfg[n]}`, cfg);\n      }\n    }\n    for (let n of ['tablePollTimeout', 'adminPollTimeout']) {\n      if (cfg[n] !== Infinity && !isPosInt32(cfg[n])) {\n        throw new NoSQLArgumentError(`Invalid ${n} value: ${cfg[n]}`, cfg);\n      }\n    }\n    if (cfg.tablePollTimeout < cfg.tablePollDelay) {\n      throw new NoSQLArgumentError('Table poll timeout cannot be less \\\nthan table poll delay', cfg);\n    }\n    if (typeof cfg.consistency === 'string') {\n      cfg.consistency = Consistency[cfg.consistency.toUpperCase()];\n    }\n    if (!(cfg.consistency instanceof Consistency)) {\n      throw new NoSQLArgumentError(`Invalid consistency value: ${cfg.consistency}`, cfg);\n    }\n    if (cfg.httpOpt != null && typeof cfg.httpOpt !== 'object') {\n      throw new NoSQLArgumentError(`Invalid HTTP options: ${cfg.httpOpt}`, cfg);\n    }\n    this._initRetry(cfg);\n    AuthConfig.init(cfg);\n    //In the special case the value of url may be set by\n    //IAMAuthorizationProvider by getting region from OCI config file\n    //In any case, the url must be set at this point.\n    if (cfg.url == null) {\n      throw new NoSQLArgumentError('Missing service endpoint or region', cfg);\n    }\n    if (cfg.dbNumber != null) {\n      cfg._dbNumber = new NumberTypeHandler(cfg);\n    }\n  }\n  static _shouldInheritDefault(key, val) {\n    //We inherit default properties only for plain Javascript objects,\n    //not instances of classes.  In addition we don't inherit handlers or\n    //providers.  We assume that in these cases the objects fully\n    //implement their functionality.\n    if (!isPlainObject(val)) {\n      return false;\n    }\n    const keyLwr = key.toLowerCase();\n    return !keyLwr.endsWith('handler') && !keyLwr.endsWith('provider');\n  }\n  static _inheritOpt(opt, def) {\n    for (let [key, val] of Object.entries(opt)) {\n      //Recurse if the property should also be inherited and default\n      //has matching key\n      if (this._shouldInheritDefault(key, val)) {\n        const defVal = def[key];\n        if (defVal != null) {\n          this._inheritOpt(val, defVal);\n        }\n      }\n    }\n    opt.__proto__ = def;\n  }\n  static _copyOpt(opt) {\n    opt = Object.assign({}, opt);\n    for (let [key, val] of Object.entries(opt)) {\n      //Recurse if the property should also be inherited and default\n      //has matching key\n      if (isPlainObject(val)) {\n        opt[key] = this._copyOpt(val);\n      }\n    }\n    return opt;\n  }\n\n  //last argument \"req\" is only for error reporting\n  static inheritOpt(opt, def, req) {\n    if (opt == null) {\n      opt = {};\n    } else if (typeof opt !== 'object') {\n      throw new NoSQLArgumentError('Invalid options object', req ? req : opt);\n    }\n    if (opt.__proto__ !== def) {\n      this._inheritOpt(opt, def);\n    }\n    return opt;\n  }\n  static create(cfg) {\n    if (typeof cfg === 'string') {\n      try {\n        cfg = requireNoWP(path.resolve(cfg));\n      } catch (err) {\n        throw new NoSQLArgumentError('Error loading configuration ' + `file ${cfg}`, 'NoSQLClient', err);\n      }\n    } else {\n      if (cfg == null) {\n        //Make an exception for cloud where default oci config file\n        //may contain all required configuration (region and OCI\n        //credentials).\n        cfg = {\n          serviceType: ServiceType.CLOUD\n        };\n      } else if (typeof cfg !== 'object') {\n        throw new NoSQLArgumentError('Missing or invalid configuration', 'NoSQLClient');\n      }\n    }\n    //Copy cfg to prevent further user's changes from having effect.  We\n    //also copy defaults to make sure all changes during _init() are done\n    //on separate object.\n    cfg = this.inheritOpt(this._copyOpt(cfg), this._copyOpt(this.defaults));\n    this._init(cfg);\n    return cfg;\n  }\n  static destroy(cfg) {\n    return AuthConfig.close(cfg);\n  }\n}\n\n//Default configuration values\n\nConfig.defaults = Object.freeze({\n  timeout: 5000,\n  ddlTimeout: 10000,\n  securityInfoTimeout: 10000,\n  tablePollTimeout: Infinity,\n  tablePollDelay: 1000,\n  adminPollTimeout: Infinity,\n  adminPollDelay: 1000,\n  consistency: Consistency.EVENTUAL,\n  maxMemoryMB: 1024,\n  retry: Object.freeze({\n    maxRetries: 10,\n    baseDelay: 200,\n    controlOpBaseDelay: 60000,\n    secInfoBaseDelay: 100,\n    secInfoNumBackoff: 10,\n    handler: Object.freeze({\n      doRetry: Config._shouldRetry,\n      delay: Config._retryDelay\n    })\n  }),\n  httpOpt: Object.freeze({\n    keepAlive: true\n  }),\n  auth: AuthConfig.defaults\n});\nmodule.exports = Config;","map":{"version":3,"names":["assert","require","ServiceType","Consistency","ErrorCode","NoSQLArgumentError","isPosInt32","isPosInt32OrZero","isPlainObject","requireNoWP","path","AuthConfig","NumberTypeHandler","Region","Config","_shouldRetry","req","numRetries","err","errorCode","OPERATION_LIMIT_EXCEEDED","opt","retry","controlOpBaseDelay","timeout","SECURITY_INFO_UNAVAILABLE","NETWORK_ERROR","INVALID_AUTHORIZATION","lastError","_op","shouldRetry","maxRetries","_backoffDelay","baseDelay","ms","Math","floor","random","_secInfoNotReadyDelay","numBackoff","_retryDelay","secInfoNumBackoff","secInfoBaseDelay","_initRetry","cfg","handler","doRetry","delay","val","n","_endpoint2url","endpoint","URL","href","endsWith","slice","host","proto","port","i","indexOf","substring","toLowerCase","includes","parts","split","length","Number","initUrl","isStrict","url","region","fromRegionId","_init","serviceType","toUpperCase","Infinity","tablePollTimeout","tablePollDelay","consistency","httpOpt","init","dbNumber","_dbNumber","_shouldInheritDefault","key","keyLwr","_inheritOpt","def","Object","entries","defVal","__proto__","_copyOpt","assign","inheritOpt","create","resolve","CLOUD","defaults","destroy","close","freeze","ddlTimeout","securityInfoTimeout","adminPollTimeout","adminPollDelay","EVENTUAL","maxMemoryMB","keepAlive","auth","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/config.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\n\nconst ServiceType = require('./constants').ServiceType;\nconst Consistency = require('./constants').Consistency;\nconst ErrorCode = require('./error_code');\nconst NoSQLArgumentError = require('./error').NoSQLArgumentError;\nconst isPosInt32 = require('./utils').isPosInt32;\nconst isPosInt32OrZero = require('./utils').isPosInt32OrZero;\nconst isPlainObject = require('./utils').isPlainObject;\nconst requireNoWP = require('./utils').requireNoWP;\nconst path = require('path');\nconst AuthConfig = require('./auth/config');\nconst NumberTypeHandler = require('./db_number');\nconst Region = require('./region');\n\nclass Config {\n\n    //default retry.handler.doRetry()\n    static _shouldRetry(req, numRetries, err) {\n        assert(err);\n        switch(err.errorCode) {\n        case ErrorCode.OPERATION_LIMIT_EXCEEDED:\n            return req.opt.retry.controlOpBaseDelay &&\n                req.opt.timeout > req.opt.retry.controlOpBaseDelay;\n        case ErrorCode.SECURITY_INFO_UNAVAILABLE:\n        case ErrorCode.NETWORK_ERROR:\n            return true;\n        case ErrorCode.INVALID_AUTHORIZATION:\n        //Retry once in case the error is due to expired authorization.  But\n        //if last error was the same, then the error is not due to expiration\n        //so we don't retry anymore.\n            return !req.lastError || req.lastError.errorCode !==\n                ErrorCode.INVALID_AUTHORIZATION;\n        default:\n            break;\n        }\n        assert(req._op);\n        if (!req._op.shouldRetry(req)) {\n            return false;\n        }\n        return numRetries < req.opt.retry.maxRetries;\n    }\n\n    static _backoffDelay(numRetries, baseDelay) {\n        let ms = (1 << (numRetries - 1)) * baseDelay;\n        ms += Math.floor(Math.random() * baseDelay);\n        return ms;\n    }\n\n    static _secInfoNotReadyDelay(numRetries, numBackoff, baseDelay) {\n        return numRetries > numBackoff ?\n            Config._backoffDelay(numRetries - numBackoff, baseDelay) :\n            baseDelay;\n    }\n\n    //default retry.handler.delay()\n    static _retryDelay(req, numRetries, err) {\n        switch(err.errorCode) {\n        case ErrorCode.OPERATION_LIMIT_EXCEEDED:\n            return Config._backoffDelay(numRetries,\n                req.opt.retry.controlOpBaseDelay);\n        case ErrorCode.SECURITY_INFO_UNAVAILABLE:\n            return Config._secInfoNotReadyDelay(numRetries,\n                req.opt.retry.secInfoNumBackoff,\n                req.opt.retry.secInfoBaseDelay);\n        default:\n            return Config._backoffDelay(numRetries, req.opt.retry.baseDelay);\n        }\n    }\n\n    //Validate and make uniform interface for retry handler\n    static _initRetry(cfg) {\n        if (cfg.retry == null) {\n            cfg.retry = {};\n        } else if (typeof cfg.retry !== 'object') {\n            throw new NoSQLArgumentError('Invalid retry value', cfg);\n        }\n        if (cfg.retry.handler == null) {\n            cfg.retry.handler = {};\n        } else if (typeof cfg.retry.handler !== 'object') {\n            throw new NoSQLArgumentError('Invalid retry.handler value', cfg);\n        }\n        if (!cfg.retry.handler.doRetry) {\n            if (cfg.retry.handler.delay != null) {\n                throw new NoSQLArgumentError(\n                    'Missing retry.handler.doRetry value', cfg);\n            }\n            cfg.retry.handler.doRetry = () => false;\n            return;\n        }\n        if (cfg.retry.handler.doRetry === true) {\n            cfg.retry.handler.doRetry = () => true;\n        } else if (typeof cfg.retry.handler.doRetry !== 'function') {\n            throw new NoSQLArgumentError(\n                'Invalid retry.handler.doRetry value', cfg);\n        }\n        //If using default doRetry, maxRetries must be valid\n        if (cfg.retry.handler.doRetry === this._shouldRetry &&\n            !isPosInt32(cfg.retry.maxRetries)) {\n            throw new NoSQLArgumentError(\n                'Missing or invalid retry.maxRetries value', cfg);\n        }\n        if (isPosInt32(cfg.retry.handler.delay)) {\n            const val = cfg.retry.handler.delay;\n            cfg.retry.handler.delay = () => val;\n            return;\n        }\n        if (typeof cfg.retry.handler.delay !== 'function') {\n            throw new NoSQLArgumentError(\n                'Invalid retry.handler.delay value', cfg);\n        }\n        //If using default delay, the following parameters must be valid\n        if (cfg.retry.handler.delay === this._retryDelay) {\n            for(let n of ['baseDelay', 'secInfoBaseDelay']) {\n                if (!isPosInt32(cfg.retry[n])) {\n                    throw new NoSQLArgumentError(\n                        `Invalid retry.${n} value`, cfg);\n                }\n            }\n            if (!isPosInt32OrZero(cfg.retry.secInfoNumBackoff)) {\n                throw new NoSQLArgumentError(\n                    'Invalid retry.secInfoNumBackoff value', cfg);\n            }\n            if (cfg.retry.controlOpBaseDelay != null &&\n                !isPosInt32(cfg.retry.controlOpBaseDelay)) {\n                throw new NoSQLArgumentError(\n                    'Invalid retry.controlOpBaseDelay value', cfg);\n            }\n        }\n    }\n\n    static _endpoint2url(cfg) {\n        let endpoint = cfg.endpoint;\n        if (endpoint instanceof URL) {\n            endpoint = endpoint.href;\n            if (endpoint.endsWith('/')) {\n                endpoint = endpoint.slice(0, -1);\n            }\n        }\n        \n        let host = endpoint;\n        let proto;\n        let port;\n        let i = endpoint.indexOf('://');\n        if (i !== -1) {\n            proto = endpoint.substring(0, i).toLowerCase();\n            if (proto !== 'http' && proto !== 'https') {\n                throw new NoSQLArgumentError(`Invalid service protocol \\\n${proto} in endpoint ${endpoint}`, cfg);\n            }\n            host = endpoint.substring(i + 3);\n        }\n        if (host.includes('/')) {\n            throw new NoSQLArgumentError(`Invalid endpoint: ${endpoint}, may \\\nnot contain path`, cfg);\n        }\n        const parts = host.split(':');\n        host = parts[0];\n        if (!parts.length || parts.length > 2) {\n            throw new NoSQLArgumentError(`Invalid endpoint: ${endpoint}`,\n                cfg);\n        }\n        if (parts.length === 2) {\n            port = Number(parts[1]);\n            if (!isPosInt32(port)) {\n                throw new NoSQLArgumentError(`Invalid port value ${parts[1]} \\\n    for endpoint ${endpoint}`, cfg);\n            }\n        }\n        /*\n         * If protocol is not specified and the port isn't 443, assume we're\n         * using http. Cases where we may use port 80, 8080, or a non-standard\n         * port include internal testing to the proxy or minicloud.\n         */\n        if (proto == null) {\n            if (port == null) {\n                port = 443;\n            }\n            proto = port === 443 ? 'https' : 'http';\n        } else if (port == null) {\n            port = proto === 'https' ? 443 : 8080;\n        }\n        try {\n            return new URL(`${proto}://${host}:${port}`);\n        } catch(err) {\n            throw new NoSQLArgumentError(`Invalid endpoint: ${endpoint}, \\\nfailed to construct URL`, cfg);\n        }\n    }\n\n    static initUrl(cfg, isStrict) {\n        if (cfg.url != null) {\n            throw new NoSQLArgumentError('May not specify property \"url\", \\\nuse \"endpoint\" or \"region\" instead');\n        }\n        if (cfg.region != null) {\n            if (cfg.endpoint != null) {\n                throw new NoSQLArgumentError('Config may not contain both \\\nservice endpoint and region', cfg);\n            }\n            if (typeof cfg.region === 'string') {\n                cfg.region = Region.fromRegionId(cfg.region);\n            }\n            if (!(cfg.region instanceof Region)) {\n                throw new NoSQLArgumentError('Invalid region', cfg);\n            }\n            cfg.endpoint = cfg.region.endpoint;\n        }\n        if (cfg.endpoint != null) {\n            if (typeof cfg.endpoint !== 'string' &&\n                !(cfg.endpoint instanceof URL)) {\n                throw new NoSQLArgumentError('Invalid service endpoint', cfg);\n            }\n            cfg.url = this._endpoint2url(cfg);\n        } else if (isStrict) {\n            throw new NoSQLArgumentError('Missing service endpoint or region',\n                cfg);\n        }\n    }\n    \n    static _init(cfg) {\n        if (cfg.serviceType != null) {\n            if (typeof cfg.serviceType === 'string') {\n                cfg.serviceType = ServiceType[cfg.serviceType.toUpperCase()];\n            }\n            if (!(cfg.serviceType instanceof ServiceType)) {\n                throw new NoSQLArgumentError(\n                    `Invalid service type: ${cfg.serviceType}`, cfg);\n            }\n        }\n        this.initUrl(cfg);\n\n        for(let n of ['timeout', 'ddlTimeout', 'securityInfoTimeout',\n            'tablePollDelay', 'adminPollDelay', 'maxMemoryMB']) {\n            if (!isPosInt32(cfg[n])) {\n                throw new NoSQLArgumentError(\n                    `Invalid ${n} value: ${cfg[n]}`, cfg);\n            }\n        }\n        for(let n of ['tablePollTimeout', 'adminPollTimeout']) {\n            if (cfg[n] !== Infinity && !isPosInt32(cfg[n])) {\n                throw new NoSQLArgumentError(\n                    `Invalid ${n} value: ${cfg[n]}`, cfg);\n            }\n        }\n\n        if (cfg.tablePollTimeout < cfg.tablePollDelay) {\n            throw new NoSQLArgumentError('Table poll timeout cannot be less \\\nthan table poll delay', cfg);\n        }\n        if (typeof cfg.consistency === 'string') {\n            cfg.consistency = Consistency[cfg.consistency.toUpperCase()];\n        }\n        if (!(cfg.consistency instanceof Consistency)) {\n            throw new NoSQLArgumentError(\n                `Invalid consistency value: ${cfg.consistency}`, cfg);\n        }\n        if (cfg.httpOpt != null && typeof cfg.httpOpt !== 'object') {\n            throw new NoSQLArgumentError(\n                `Invalid HTTP options: ${cfg.httpOpt}`, cfg);\n        }\n\n        this._initRetry(cfg);\n        AuthConfig.init(cfg);\n        //In the special case the value of url may be set by\n        //IAMAuthorizationProvider by getting region from OCI config file\n        //In any case, the url must be set at this point.\n        if (cfg.url == null) {\n            throw new NoSQLArgumentError('Missing service endpoint or region',\n                cfg);\n        }\n\n        if (cfg.dbNumber != null) {\n            cfg._dbNumber = new NumberTypeHandler(cfg);\n        }\n    }\n\n    static _shouldInheritDefault(key, val) {\n        //We inherit default properties only for plain Javascript objects,\n        //not instances of classes.  In addition we don't inherit handlers or\n        //providers.  We assume that in these cases the objects fully\n        //implement their functionality.\n        if (!isPlainObject(val)) {\n            return false;\n        }\n        const keyLwr = key.toLowerCase();\n        return !keyLwr.endsWith('handler') && !keyLwr.endsWith('provider');\n    }\n\n    static _inheritOpt(opt, def) {\n        for(let [key, val] of Object.entries(opt)) {\n            //Recurse if the property should also be inherited and default\n            //has matching key\n            if (this._shouldInheritDefault(key, val)) {\n                const defVal = def[key];\n                if (defVal != null) {\n                    this._inheritOpt(val, defVal);\n                }\n            }\n        }\n        opt.__proto__ = def;\n    }\n\n    static _copyOpt(opt) {\n        opt = Object.assign({}, opt);\n        for(let [key, val] of Object.entries(opt)) {\n            //Recurse if the property should also be inherited and default\n            //has matching key\n            if (isPlainObject(val)) {\n                opt[key] = this._copyOpt(val);\n            }\n        }\n        return opt;\n    }\n\n    //last argument \"req\" is only for error reporting\n    static inheritOpt(opt, def, req) {\n        if (opt == null) {\n            opt = {};\n        } else if (typeof opt !== 'object') {\n            throw new NoSQLArgumentError('Invalid options object',\n                req ? req : opt);\n        }\n        if (opt.__proto__ !== def) {\n            this._inheritOpt(opt, def);\n        }\n        return opt;\n    }\n\n    static create(cfg) {\n        if (typeof cfg === 'string') {\n            try {\n                cfg = requireNoWP(path.resolve(cfg));\n            } catch(err) {\n                throw new NoSQLArgumentError('Error loading configuration ' +\n                    `file ${cfg}`, 'NoSQLClient', err);\n            }\n        } else {\n            if (cfg == null) {\n                //Make an exception for cloud where default oci config file\n                //may contain all required configuration (region and OCI\n                //credentials).\n                cfg = {\n                    serviceType: ServiceType.CLOUD\n                };\n            } else if (typeof cfg !== 'object') {\n                throw new NoSQLArgumentError(\n                    'Missing or invalid configuration',\n                    'NoSQLClient');\n            }\n        }\n        //Copy cfg to prevent further user's changes from having effect.  We\n        //also copy defaults to make sure all changes during _init() are done\n        //on separate object.\n        cfg = this.inheritOpt(this._copyOpt(cfg),\n            this._copyOpt(this.defaults));\n        this._init(cfg);\n        return cfg;\n    }\n\n    static destroy(cfg) {\n        return AuthConfig.close(cfg);\n    }\n\n}\n\n//Default configuration values\n\nConfig.defaults = Object.freeze({\n    timeout: 5000,\n    ddlTimeout: 10000,\n    securityInfoTimeout: 10000,\n    tablePollTimeout: Infinity,\n    tablePollDelay: 1000,\n    adminPollTimeout: Infinity,\n    adminPollDelay: 1000,\n    consistency: Consistency.EVENTUAL,\n    maxMemoryMB: 1024,\n    retry: Object.freeze({\n        maxRetries: 10,\n        baseDelay: 200,\n        controlOpBaseDelay: 60000,\n        secInfoBaseDelay: 100,\n        secInfoNumBackoff: 10,\n        handler: Object.freeze({\n            doRetry: Config._shouldRetry,\n            delay: Config._retryDelay\n        })\n    }),\n    httpOpt: Object.freeze({\n        keepAlive: true\n    }),\n    auth: AuthConfig.defaults\n});\n\nmodule.exports = Config;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}