{"ast":null,"code":"const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst {\n  Region\n} = require(\"oracle-nosqldb\");\nconst {\n  ServiceType\n} = require(\"oracle-nosqldb/lib/constants\");\nconst NoSQLClient = require(\"oracle-nosqldb\").NoSQLClient;\nconst app = express();\napp.use(bodyParser.json());\nconst client = new NoSQLClient({\n  region: Region.US_ASHBURN_1,\n  serviceType: ServiceType.CLOUD,\n  compartment: \"ocid1.compartment.oc1..aaaaaaaahaycpzfjgklhl4e7jic6xoufxxwwtxcylcl3fpsiooyycamd5igq\",\n  auth: {\n    iam: {\n      tenantId: \"ocid1.tenancy.oc1..aaaaaaaabgpwfc7gq645lm7h6wjehohak2fd4xbedpvrmpplh3egjvjvnhgq\",\n      userId: \"ocid1.user.oc1..aaaaaaaanamjf2u5sdw57hsuuvi4adbeotpigzolekzehywix3ilz6osb3yq\",\n      fingerprint: \"9e:23:38:8a:5b:b6:c7:b5:16:b6:72:1a:a5:92:9f:75\",\n      passphrase: \"\",\n      privateKeyFile: \"./.oci/privateKey.pem\"\n    }\n  }\n});\napp.post('/add', async (req, res) => {\n  let {\n    id,\n    title,\n    content,\n    infobox\n  } = req.body;\n  console.log(id);\n  try {\n    const result = await client.put('pages', {\n      id,\n      title,\n      content,\n      infobox\n    });\n    console.log(result);\n    res.json({\n      result: result.success\n    });\n    if (!result.consumedCapacity) {\n      res.status(500).json({\n        error: 'Failed to add item'\n      });\n    }\n  } catch (err) {\n    console.error('failed to insert data', err);\n    res.status(500).json({\n      error: err\n    });\n  }\n});\napp.get(\"/maxid\", async (req, res) => {\n  try {\n    let result = await client.query('SELECT id FROM pages');\n    result = result.rows;\n    let highest = 0;\n    for (let i = 0; i < result.length; i++) {\n      if (result[i].id > highest) {\n        highest = result[i].id;\n      }\n    }\n    const jayson = {\n      high: highest\n    };\n    console.log(jayson.high);\n    res.json(jayson);\n  } catch (err) {\n    console.error(\"failed to get data\", err);\n    res.status(500).json({\n      error: err\n    });\n  }\n});\napp.get(\"/byid\", async (req, res) => {\n  try {\n    let {\n      id\n    } = req.body;\n    console.log(\"ID: \" + id);\n    const result = await client.get('pages', {\n      id\n    });\n    res.json(result.row);\n  } catch (err) {\n    console.error(\"failed to get data\", err);\n    res.status(500).json({\n      error: err\n    });\n  }\n});\napp.delete('/byid', async (req, res) => {\n  const {\n    id\n  } = req.body;\n  try {\n    const result = await client.delete('pages', {\n      id\n    });\n    res.json({\n      result: result.success\n    });\n  } catch (err) {\n    console.error('failed to delete data', err);\n    res.status(500).json({\n      error: err\n    });\n  }\n});\napp.get(\"/\", async (req, res) => {\n  try {\n    const result = await client.query('SELECT * FROM pages');\n    res.json(result.rows);\n  } catch (err) {\n    console.error(\"failed to get data\", err);\n    res.status(500).json({\n      error: err\n    });\n  }\n});\napp.get(\"/byprop\", async (req, res) => {\n  try {\n    let {\n      prop\n    } = req.body;\n    const result = await client.query(`SELECT ${prop} FROM pages`);\n    res.json(result.rows);\n  } catch (err) {\n    console.error(\"failed to get data\", err);\n    res.status(500).json({\n      error: err\n    });\n  }\n});\nmodule.exports = app;","map":{"version":3,"names":["express","require","bodyParser","Region","ServiceType","NoSQLClient","app","use","json","client","region","US_ASHBURN_1","serviceType","CLOUD","compartment","auth","iam","tenantId","userId","fingerprint","passphrase","privateKeyFile","post","req","res","id","title","content","infobox","body","console","log","result","put","success","consumedCapacity","status","error","err","get","query","rows","highest","i","length","jayson","high","row","delete","prop","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/src/server.js"],"sourcesContent":["const express = require(\"express\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst { Region } = require(\"oracle-nosqldb\");\r\nconst { ServiceType } = require(\"oracle-nosqldb/lib/constants\");\r\nconst NoSQLClient = require(\"oracle-nosqldb\").NoSQLClient;\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\nconst client = new NoSQLClient({\r\n  region: Region.US_ASHBURN_1,\r\n  serviceType: ServiceType.CLOUD,\r\n  compartment:\r\n\"ocid1.compartment.oc1..aaaaaaaahaycpzfjgklhl4e7jic6xoufxxwwtxcylcl3fpsiooyycamd5igq\",\r\n  auth: {\r\n    iam: {\r\n      tenantId:      \"ocid1.tenancy.oc1..aaaaaaaabgpwfc7gq645lm7h6wjehohak2fd4xbedpvrmpplh3egjvjvnhgq\",\r\n      userId:\r\n\"ocid1.user.oc1..aaaaaaaanamjf2u5sdw57hsuuvi4adbeotpigzolekzehywix3ilz6osb3yq\",\r\n      fingerprint: \"9e:23:38:8a:5b:b6:c7:b5:16:b6:72:1a:a5:92:9f:75\",\r\n      passphrase: \"\",\r\n      privateKeyFile: \"./.oci/privateKey.pem\",\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\n\r\n\r\napp.post('/add', async (req, res) => {\r\n    let { id, title, content, infobox } = req.body;\r\n    console.log(id);\r\n    try {\r\n        const result = await client.put('pages', {\r\n            id,\r\n            title,\r\n            content,\r\n            infobox,\r\n        });\r\n        console.log(result);\r\n        res.json({ result: result.success});\r\n      if (!result.consumedCapacity) {\r\n          res.status(500).json({ error: 'Failed to add item' });\r\n      }\r\n    } catch (err) {\r\n        console.error('failed to insert data', err);\r\n        res.status(500).json({ error: err });\r\n    }\r\n});\r\n\r\n\r\n\r\napp.get(\"/maxid\", async (req, res) => {\r\n  try {\r\n    let result = await client.query('SELECT id FROM pages');\r\n    result = result.rows;\r\n    let highest = 0;\r\n    for(let i = 0; i < result.length; i++){\r\n      if(result[i].id > highest){\r\n        highest = result[i].id;\r\n      }\r\n    }\r\n    const jayson = { high: highest };\r\n    console.log(jayson.high);\r\n    res.json(jayson);\r\n  } catch (err) {\r\n    console.error(\"failed to get data\", err);\r\n    res.status(500).json({ error: err });\r\n  }\r\n});\r\n\r\napp.get(\"/byid\", async (req, res) => {\r\n  try {\r\n    let { id } = req.body;\r\n    console.log(\"ID: \" + id);\r\n    const result = await client.get('pages', { id })\r\n    res.json(result.row);\r\n  } catch (err) {\r\n    console.error(\"failed to get data\", err);\r\n    res.status(500).json({ error: err });\r\n  }\r\n});\r\napp.delete('/byid', async (req, res) => {\r\n    const { id } = req.body;\r\n    \r\n    try {\r\n        const result = await client.delete('pages', { id });\r\n        res.json({ result: result.success});\r\n    } catch (err) {\r\n        console.error('failed to delete data', err);\r\n        res.status(500).json({ error: err });\r\n    }\r\n});\r\napp.get(\"/\", async (req, res) => {\r\n  try {\r\n    const result = await client.query('SELECT * FROM pages');\r\n    res.json(result.rows);\r\n  } catch (err) {\r\n    console.error(\"failed to get data\", err);\r\n    res.status(500).json({ error: err });\r\n  }\r\n});\r\napp.get(\"/byprop\", async (req, res) => {\r\n    try {\r\n        let { prop } = req.body;\r\n      const result = await client.query(`SELECT ${prop} FROM pages`);\r\n      res.json(result.rows);\r\n    } catch (err) {\r\n      console.error(\"failed to get data\", err);\r\n      res.status(500).json({ error: err });\r\n    }\r\n  });\r\n\r\n\r\nmodule.exports = app;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}