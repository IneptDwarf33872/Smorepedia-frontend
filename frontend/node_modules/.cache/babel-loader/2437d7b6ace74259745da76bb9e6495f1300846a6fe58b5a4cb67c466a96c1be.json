{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\nconst assert = require('assert');\nconst Utils = require('./utils_node');\nassert(global.crypto);\nconst SubtleCrypto = global.crypto.subtle;\nassert(SubtleCrypto);\nconst CryptoKey = global.CryptoKey;\nassert(CryptoKey);\nconst SIGN_ALG = {\n  name: 'RSASSA-PKCS1-v1_5',\n  modulusLength: 2048,\n  publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n  // 65537\n  hash: {\n    name: 'SHA-256'\n  }\n};\nclass WebUtils extends Utils {\n  static get isInBrowser() {\n    return true;\n  }\n  static async _sign(signingContent, privateKey) {\n    if (!(privateKey instanceof CryptoKey)) {\n      return super._sign(signingContent, privateKey);\n    }\n    const data = typeof signingContent === 'string' ? Buffer.from(signingContent, 'utf8') : signingContent;\n    const sign = await SubtleCrypto.sign(SIGN_ALG, privateKey, data);\n    return Buffer.from(sign).toString('base64');\n  }\n}\nmodule.exports = WebUtils;","map":{"version":3,"names":["assert","require","Utils","global","crypto","SubtleCrypto","subtle","CryptoKey","SIGN_ALG","name","modulusLength","publicExponent","Uint8Array","hash","WebUtils","isInBrowser","_sign","signingContent","privateKey","data","Buffer","from","sign","toString","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/iam/utils_browser.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\nconst assert = require('assert');\nconst Utils = require('./utils_node');\n\nassert(global.crypto);\n\nconst SubtleCrypto = global.crypto.subtle;\nassert(SubtleCrypto);\n\nconst CryptoKey = global.CryptoKey;\nassert(CryptoKey);\n\nconst SIGN_ALG =  {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n    hash: { name: 'SHA-256' }\n};\n\nclass WebUtils extends Utils {\n\n    static get isInBrowser() { return true; }\n\n    static async _sign(signingContent, privateKey) {\n        if (!(privateKey instanceof CryptoKey)) {\n            return super._sign(signingContent, privateKey);\n        }\n        const data = typeof signingContent === 'string' ?\n            Buffer.from(signingContent, 'utf8') : signingContent;\n        const sign = await SubtleCrypto.sign(SIGN_ALG, privateKey, data);\n        return Buffer.from(sign).toString('base64');\n    }\n}\n\nmodule.exports = WebUtils;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAc,CAAC;AAErCD,MAAM,CAACG,MAAM,CAACC,MAAM,CAAC;AAErB,MAAMC,YAAY,GAAGF,MAAM,CAACC,MAAM,CAACE,MAAM;AACzCN,MAAM,CAACK,YAAY,CAAC;AAEpB,MAAME,SAAS,GAAGJ,MAAM,CAACI,SAAS;AAClCP,MAAM,CAACO,SAAS,CAAC;AAEjB,MAAMC,QAAQ,GAAI;EACdC,IAAI,EAAE,mBAAmB;EACzBC,aAAa,EAAE,IAAI;EACnBC,cAAc,EAAE,IAAIC,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EAAE;EACpDC,IAAI,EAAE;IAAEJ,IAAI,EAAE;EAAU;AAC5B,CAAC;AAED,MAAMK,QAAQ,SAASZ,KAAK,CAAC;EAEzB,WAAWa,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI;EAAE;EAExC,aAAaC,KAAKA,CAACC,cAAc,EAAEC,UAAU,EAAE;IAC3C,IAAI,EAAEA,UAAU,YAAYX,SAAS,CAAC,EAAE;MACpC,OAAO,KAAK,CAACS,KAAK,CAACC,cAAc,EAAEC,UAAU,CAAC;IAClD;IACA,MAAMC,IAAI,GAAG,OAAOF,cAAc,KAAK,QAAQ,GAC3CG,MAAM,CAACC,IAAI,CAACJ,cAAc,EAAE,MAAM,CAAC,GAAGA,cAAc;IACxD,MAAMK,IAAI,GAAG,MAAMjB,YAAY,CAACiB,IAAI,CAACd,QAAQ,EAAEU,UAAU,EAAEC,IAAI,CAAC;IAChE,OAAOC,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;EAC/C;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGX,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}