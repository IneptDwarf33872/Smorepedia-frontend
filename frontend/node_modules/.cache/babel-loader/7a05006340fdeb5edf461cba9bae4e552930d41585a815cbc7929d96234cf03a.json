{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst DataWriter = require('../binary_protocol/writer');\nconst Type = require('../binary_protocol/constants').Type;\nclass NsonWriter {\n  constructor(buf) {\n    this._dw = new DataWriter(buf);\n    this._stack = [];\n  }\n  _incrSize() {\n    if (this._stack.length) {\n      this._stack[this._stack.length - 1].size++;\n    }\n  }\n  _startComplexValue() {\n    this._stack.push({\n      off: this._dw.buffer.length,\n      size: 0\n    });\n    this._dw.writeInt32BE(0); //size in bytes\n    this._dw.writeInt32BE(0); //number of elements\n  }\n  _endComplexValue() {\n    const elem = this._stack.pop();\n    assert(elem);\n    //Write byte size and number of elements into the space reserved.\n    //Object starts at off + 4.\n    this._dw.buffer.writeInt32BE(this._dw.buffer.length - elem.off - 4, elem.off);\n    this._dw.buffer.writeInt32BE(elem.size, elem.off + 4);\n    this._incrSize();\n  }\n  get dataWriter() {\n    return this._dw;\n  }\n  get buffer() {\n    return this._dw.buffer;\n  }\n  get length() {\n    return this._dw.buffer.length;\n  }\n  reset() {\n    this._stack.length = 0;\n    this._dw.reset();\n    return this;\n  }\n  writeFieldName(name) {\n    this._dw.writeString(name);\n  }\n  writeBoolean(value) {\n    this._dw.writeByte(Type.BOOLEAN);\n    this._dw.writeBoolean(value);\n    this._incrSize();\n  }\n  writeBooleanField(name, value) {\n    this.writeFieldName(name);\n    this.writeBoolean(value);\n  }\n  writeInt(value) {\n    this._dw.writeByte(Type.INTEGER);\n    this._dw.writeInt(value);\n    this._incrSize();\n  }\n  writeIntField(name, value) {\n    this.writeFieldName(name);\n    this.writeInt(value);\n  }\n  writeLong(value) {\n    this._dw.writeByte(Type.LONG);\n    this._dw.writeLong(value);\n    this._incrSize();\n  }\n  writeLongField(name, value) {\n    this.writeFieldName(name);\n    this.writeLong(value);\n  }\n  writeDouble(value) {\n    this._dw.writeByte(Type.DOUBLE);\n    this._dw.writeDouble(value);\n    this._incrSize();\n  }\n  writeDoubleField(name, value) {\n    this.writeFieldName(name);\n    this.writeDouble(value);\n  }\n  writeString(value) {\n    this._dw.writeByte(Type.STRING);\n    this._dw.writeString(value);\n    this._incrSize();\n  }\n  writeStringField(name, value) {\n    this.writeFieldName(name);\n    this.writeString(value);\n  }\n  writeBinary(value) {\n    this._dw.writeByte(Type.BINARY);\n    this._dw.writeBinary(value);\n    this._incrSize();\n  }\n  writeBinaryField(name, value) {\n    this.writeFieldName(name);\n    this.writeBinary(value);\n  }\n  writeDate(value) {\n    this._dw.writeByte(Type.TIMESTAMP);\n    this._dw.writeDate(value);\n    this._incrSize();\n  }\n  writeDateField(name, value) {\n    this.writeFieldName(name);\n    this.writeDate(value);\n  }\n\n  //write Nson NUMBER value supplied as string.\n  writeStringAsNumber(value) {\n    this._dw.writeByte(Type.NUMBER);\n    this._dw.writeString(value);\n    this._incrSize();\n  }\n  writeStringAsNumberField(name, value) {\n    this.writeFieldName(name);\n    this.writeStringAsNumber(value);\n  }\n  writeJsonNull() {\n    this._dw.writeByte(Type.JSON_NULL);\n    this._incrSize();\n  }\n  writeJsonNullField(name) {\n    this.writeFieldName(name);\n    this.writeJsonNull();\n  }\n  writeNull() {\n    this._dw.writeByte(Type.NULL);\n    this._incrSize();\n  }\n  writeNullField(name) {\n    this.writeFieldName(name);\n    this.writeNull();\n  }\n  writeEmpty() {\n    this._dw.writeByte(Type.EMPTY);\n    this._incrSize();\n  }\n  writeEmptyField(name) {\n    this.writeFieldName(name);\n    this.writeEmpty();\n  }\n  startArray() {\n    this._dw.writeByte(Type.ARRAY);\n    this._startComplexValue();\n  }\n  startArrayField(name) {\n    this.writeFieldName(name);\n    this.startArray();\n  }\n  endArray() {\n    this._endComplexValue();\n  }\n  endArrayField() {\n    this.endArray();\n  }\n  startMap() {\n    this._dw.writeByte(Type.MAP);\n    this._startComplexValue();\n  }\n  startMapField(name) {\n    this.writeFieldName(name);\n    this.startMap();\n  }\n  endMap() {\n    this._endComplexValue();\n  }\n  endMapField() {\n    this.endMap();\n  }\n}\nmodule.exports = NsonWriter;","map":{"version":3,"names":["assert","require","DataWriter","Type","NsonWriter","constructor","buf","_dw","_stack","_incrSize","length","size","_startComplexValue","push","off","buffer","writeInt32BE","_endComplexValue","elem","pop","dataWriter","reset","writeFieldName","name","writeString","writeBoolean","value","writeByte","BOOLEAN","writeBooleanField","writeInt","INTEGER","writeIntField","writeLong","LONG","writeLongField","writeDouble","DOUBLE","writeDoubleField","STRING","writeStringField","writeBinary","BINARY","writeBinaryField","writeDate","TIMESTAMP","writeDateField","writeStringAsNumber","NUMBER","writeStringAsNumberField","writeJsonNull","JSON_NULL","writeJsonNullField","writeNull","NULL","writeNullField","writeEmpty","EMPTY","writeEmptyField","startArray","ARRAY","startArrayField","endArray","endArrayField","startMap","MAP","startMapField","endMap","endMapField","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/nson_protocol/writer.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst DataWriter = require('../binary_protocol/writer');\nconst Type = require('../binary_protocol/constants').Type;\n\nclass NsonWriter {\n\n    constructor(buf) {\n        this._dw = new DataWriter(buf);\n        this._stack = [];\n    }\n\n    _incrSize() {\n        if (this._stack.length) {\n            this._stack[this._stack.length - 1].size++;\n        }\n    }\n\n    _startComplexValue() {\n        this._stack.push({ off: this._dw.buffer.length, size: 0});\n        this._dw.writeInt32BE(0); //size in bytes\n        this._dw.writeInt32BE(0); //number of elements\n    }\n\n    _endComplexValue() {\n        const elem = this._stack.pop();\n        assert(elem);\n        //Write byte size and number of elements into the space reserved.\n        //Object starts at off + 4.\n        this._dw.buffer.writeInt32BE(this._dw.buffer.length - elem.off - 4,\n            elem.off);\n        this._dw.buffer.writeInt32BE(elem.size, elem.off + 4);\n        this._incrSize();\n    }\n\n    get dataWriter() {\n        return this._dw;\n    }\n\n    get buffer() {\n        return this._dw.buffer;\n    }\n\n    get length() {\n        return this._dw.buffer.length;\n    }\n\n    reset() {\n        this._stack.length = 0;\n        this._dw.reset();\n        return this;\n    }\n\n    writeFieldName(name) {\n        this._dw.writeString(name);\n    }\n\n    writeBoolean(value) {\n        this._dw.writeByte(Type.BOOLEAN);\n        this._dw.writeBoolean(value);\n        this._incrSize();\n    }\n\n    writeBooleanField(name, value) {\n        this.writeFieldName(name);\n        this.writeBoolean(value);\n    }\n\n    writeInt(value) {\n        this._dw.writeByte(Type.INTEGER);\n        this._dw.writeInt(value);\n        this._incrSize();\n    }\n\n    writeIntField(name, value) {\n        this.writeFieldName(name);\n        this.writeInt(value);\n    }\n\n    writeLong(value) {\n        this._dw.writeByte(Type.LONG);\n        this._dw.writeLong(value);\n        this._incrSize();\n    }\n\n    writeLongField(name, value) {\n        this.writeFieldName(name);\n        this.writeLong(value);\n    }\n\n    writeDouble(value) {\n        this._dw.writeByte(Type.DOUBLE);\n        this._dw.writeDouble(value);\n        this._incrSize();\n    }\n\n    writeDoubleField(name, value) {\n        this.writeFieldName(name);\n        this.writeDouble(value);\n    }\n\n    writeString(value) {\n        this._dw.writeByte(Type.STRING);\n        this._dw.writeString(value);\n        this._incrSize();\n    }\n\n    writeStringField(name, value) {\n        this.writeFieldName(name);\n        this.writeString(value);\n    }\n\n    writeBinary(value) {\n        this._dw.writeByte(Type.BINARY);\n        this._dw.writeBinary(value);\n        this._incrSize();\n    }\n\n    writeBinaryField(name, value) {\n        this.writeFieldName(name);\n        this.writeBinary(value);\n    }\n\n    writeDate(value) {\n        this._dw.writeByte(Type.TIMESTAMP);\n        this._dw.writeDate(value);\n        this._incrSize();\n    }\n\n    writeDateField(name, value) {\n        this.writeFieldName(name);\n        this.writeDate(value);\n    }\n\n    //write Nson NUMBER value supplied as string.\n    writeStringAsNumber(value) {\n        this._dw.writeByte(Type.NUMBER);\n        this._dw.writeString(value);\n        this._incrSize();\n    }\n\n    writeStringAsNumberField(name, value) {\n        this.writeFieldName(name);\n        this.writeStringAsNumber(value);\n    }\n\n    writeJsonNull() {\n        this._dw.writeByte(Type.JSON_NULL);\n        this._incrSize();\n    }\n\n    writeJsonNullField(name) {\n        this.writeFieldName(name);\n        this.writeJsonNull();\n    }\n\n    writeNull() {\n        this._dw.writeByte(Type.NULL);\n        this._incrSize();\n    }\n\n    writeNullField(name) {\n        this.writeFieldName(name);\n        this.writeNull();\n    }\n\n    writeEmpty() {\n        this._dw.writeByte(Type.EMPTY);\n        this._incrSize();\n    }\n\n    writeEmptyField(name) {\n        this.writeFieldName(name);\n        this.writeEmpty();\n    }\n\n    startArray() {\n        this._dw.writeByte(Type.ARRAY);\n        this._startComplexValue();\n    }\n\n    startArrayField(name) {\n        this.writeFieldName(name);\n        this.startArray();\n    }\n\n    endArray() {\n        this._endComplexValue();\n    }\n\n    endArrayField() {\n        this.endArray();\n    }\n\n    startMap() {\n        this._dw.writeByte(Type.MAP);\n        this._startComplexValue();\n    }\n\n    startMapField(name) {\n        this.writeFieldName(name);\n        this.startMap();\n    }\n\n    endMap() {\n        this._endComplexValue();\n    }\n\n    endMapField() {\n        this.endMap();\n    }\n\n}\n\nmodule.exports = NsonWriter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}