{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\n/**\n * Defines types used for NoSQL driver authorization.\n */\n\n/**\n * Authorization configuration for the driver provided as {@link Config}#auth\n * when {@link NoSQLClient} instance is created.\n * <p>\n * Every request to the server made by {@link NoSQLClient} methods requires\n * authorization information.  The way authorization information is obtained\n * depends on the {@link ServiceType} used (set as\n * {@link Config}#serviceType):\n * <ul>\n * <li>For {@link ServiceType.CLOUD}, authorization information is obtained\n * using Oracle Cloud Infrastructure Identity and Access Management (IAM).  To\n * enable authorization, you must set IAM configuration in the form of\n * {@link IAMConfig} as {@link AuthConfig}#iam property.</li>\n * <li>For {@link ServiceType.CLOUDSIM}, authorization is not required and\n * you do not need to specify {@link Config}#auth property.</li>\n * <li>For {@link ServiceType.KVSTORE}, if using secure store, you need to\n * specify the store authentication information such as user name and password\n * as {@link AuthConfig}#kvstore property in the form of\n * {@link KVStoreAuthConfig}.  If using non-secure store, authorization is not\n * required and you do not need to specify {@link Config}#auth property.</li>\n * <li>You may also choose to implement your own authorization provider to\n * obtain authorization information for each request depending on the\n * operation performed.  In this case, set this provider as\n * {@link AuthConfig}#provider property.  If the provider is set,\n * {@link ServiceType} can be undefined, although it may also be possible to\n * have custom provider for existing service types.</li>\n * </ul>\n * <p>\n * Note that you may specify both {@link AuthConfig}#iam and\n * {@link AuthConfig}#kvstore in the same configuration object only if\n * {@link Config}#serviceType is set to valid {@link ServiceType}.\n * If {@link Config}#serviceType is not set (in which case the driver will try\n * to deduce service type, see {@link ServiceType}), specifying both\n * {@link AuthConfig}#iam and {@link AuthConfig}#kvstore will\n * result in error.\n * \n * @see {@link Config}\n * @see {@link ServiceType}\n * @see {@link IAMConfig}\n * @see {@link KVStoreAuthConfig}\n * @see {@link AuthorizationProvider}\n * @tutorial connect-cloud\n * @tutorial connect-on-prem\n * \n * @example //This AuthConfig object contains required properties to obtain\n * authorization from IAM via OCI configuration file\n * {\n *     iam: {\n *         configFile: '~/myapp/.oci/config',\n *         profileName: 'John'\n *     }\n * };\n * \n * @example //This AuthConfig object contains required information to connect\n * //to secure kvstore and assumes the user credentials are stored in\n * //separate file credentials.json\n * {\n *     kvstore: {\n *         credentials: '/path/to/credentials.json'\n *     }\n * }\n * \n * @global\n * @typedef {object} AuthConfig\n * @property {IAMConfig} [iam] IAM configuration, see {@link IAMConfig}.\n * Must be set to use Oracle NoSQL Cloud service\n * @property {KVStoreAuthConfig} [kvstore] Configuration to authenticate with\n * secure On-Premise NoSQL database.  Must be set to connect to secure store\n * @property {AuthorizationProvider} [provider] Custom authorization provider\n */\n\n/**\n * Interface to acquire authorization information.  Authorization information\n * may be returned as a string or as an object:\n * <ul>\n * <li>If represented as a <em>string</em>, it will be used as a value of HTTP\n * <em>Authorization</em> header for the service request.</li>\n * <li>If represented as an <em>object</em>, this object's properties will be\n * added as HTTP headers for the service request.</li>\n * </ul>\n * The specifics depend on the authorization protocol used.\n * \n * @see {@link AuthorizationProvider}\n * \n * @global\n * @callback getAuthorization\n * @async\n * @param {Operation} operation NoSQL database operation that requires\n * authorization information, see {@link Operation}\n * @returns {Promise} Promise resolved with authorization <em>string</em> or\n * authorization <em>object</em> or rejected with an error\n */\n\n/**\n * AuthorizationProvider is an interface to obtain authorization information\n * for NoSQL database operation.  By default, the driver will use its own\n * authorization providers based on specified {@link ServiceType} and/or\n * presense of service-specific configurations such as {@link IAMConfig} and\n * {@link KVStoreAuthConfig}.  Alternatively, the application may choose to\n * use custom authorization provider and set it as {@link AuthConfig}#provider\n * property.  This custom provider may be specified either as a\n * {@link getAuthorization} function or as an object implementing\n * {@link getAuthorization} function.\n * \n * @global\n * @typedef {object|getAuthorization} AuthorizationProvider\n * @property {getAuthorization} getAuthorization Retrieves authorization\n * string for an operation\n * @property {function()} [close] If specified, releases any resources\n * associated with this provider when {@link NoSQLClient} instance is closed.\n * Note that this operation may be asynchronous in which case this function\n * should return a <em>Promise</em> (resolved value is ignored), otherwise\n * return value is ignored.  If error occurs, the function should only log it\n * rather than throwing exception or causing Promise rejection\n */\nconst assert = require('assert');\nconst IAMAuthorizationProvider = require('./iam/auth_provider');\nconst KVStoreAuthorizationProvider = require('./kvstore/auth_provider');\nconst ServiceType = require('../constants').ServiceType;\nconst NoSQLArgumentError = require('../error').NoSQLArgumentError;\nconst hasOwnProperty = require('../utils').hasOwnProperty;\nclass AuthConfig {\n  static _str2provider(s) {\n    return {\n      getAuthorization() {\n        return Promise.resolve(s);\n      }\n    };\n  }\n  static _chkInitProvider(cfg) {\n    if (typeof cfg.auth === 'string') {\n      cfg.auth = {\n        provider: this._str2provider(cfg.auth)\n      };\n      return;\n    }\n    if (cfg.auth == null) {\n      cfg.auth = {};\n      return;\n    }\n    if (typeof cfg.auth !== 'object') {\n      throw new NoSQLArgumentError('Invalid value of auth', cfg);\n    }\n    if (typeof cfg.auth.provider === 'function') {\n      const authProvider = cfg.auth.provider;\n      cfg.auth.provider = {\n        getAuthorization(req) {\n          return authProvider(req);\n        }\n      };\n      return;\n    }\n    if (cfg.auth.provider != null && (typeof cfg.auth.provider !== 'object' || typeof cfg.auth.provider.getAuthorization !== 'function')) {\n      throw new NoSQLArgumentError('Invalid auth.provider value', cfg);\n    }\n  }\n  static _chkInitServiceType(cfg) {\n    assert(cfg.auth != null && typeof cfg.auth === 'object');\n    const ownsAuth = hasOwnProperty(cfg, 'auth');\n    const isIAM = ownsAuth && hasOwnProperty(cfg.auth, 'iam');\n    const isKVStore = ownsAuth && hasOwnProperty(cfg.auth, 'kvstore');\n    const hasProvider = cfg.auth.provider != null;\n    if (isIAM && hasProvider || isKVStore && hasProvider || isIAM && isKVStore) {\n      throw new NoSQLArgumentError('You may only specify one of auth.iam, auth.kvstore or \\\nauth.provider properties', cfg);\n    }\n    let serviceType;\n    if (isIAM) {\n      if (typeof cfg.auth.iam !== 'object') {\n        throw new NoSQLArgumentError('Invalid auth.iam value', cfg);\n      }\n      serviceType = ServiceType.CLOUD;\n    } else if (isKVStore) {\n      if (typeof cfg.auth.kvstore !== 'object') {\n        throw new NoSQLArgumentError('Invalid auth.kvstore value', cfg);\n      }\n      serviceType = ServiceType.KVSTORE;\n    } else if (cfg.serviceType == null && cfg.auth.provider == null) {\n      serviceType = cfg.region == null ? ServiceType.CLOUDSIM : ServiceType.CLOUD;\n    } else if (cfg.auth.provider instanceof IAMAuthorizationProvider) {\n      serviceType = ServiceType.CLOUD;\n    } else if (cfg.auth.provider instanceof KVStoreAuthorizationProvider) {\n      serviceType = ServiceType.KVSTORE;\n    }\n    if (cfg.serviceType == null) {\n      cfg.serviceType = serviceType;\n    } else if (serviceType != null && cfg.serviceType !== serviceType) {\n      throw new NoSQLArgumentError(`Incorrect service type specified: \\\n${cfg.serviceType}, auth configuration specifies ${serviceType}`, cfg);\n    }\n  }\n  static init(cfg) {\n    this._chkInitProvider(cfg);\n    this._chkInitServiceType(cfg);\n    if (cfg.auth.provider == null) {\n      switch (cfg.serviceType) {\n        case ServiceType.CLOUDSIM:\n          cfg.auth.provider = this._str2provider('Bearer TestTenant');\n          break;\n        case ServiceType.CLOUD:\n          {\n            cfg.auth.provider = new IAMAuthorizationProvider(cfg.auth.iam, cfg);\n            break;\n          }\n        case ServiceType.KVSTORE:\n          //Create KVStoreAuthorizationProvider instance if either\n          //credentials provider/file or user/password is specified.\n          //Otherwise assume this is unsecure kvstore and authorization\n          //provider is not needed.\n          if (cfg.auth.kvstore != null && (cfg.auth.kvstore.credentials != null || cfg.auth.kvstore.user != null || cfg.auth.kvstore.password != null)) {\n            cfg.auth.provider = new KVStoreAuthorizationProvider(cfg.auth.kvstore, cfg);\n          } else {\n            cfg.auth.provider = this._str2provider(null);\n          }\n          break;\n        default:\n          assert(cfg.serviceType && cfg.serviceType._isInternal);\n      }\n    }\n    if (typeof cfg.auth.provider.onInit === 'function') {\n      cfg.auth.provider.onInit(cfg);\n    }\n  }\n  static close(cfg) {\n    assert(cfg.auth && cfg.auth.provider);\n    if (typeof cfg.auth.provider.close === 'function') {\n      return cfg.auth.provider.close();\n    }\n  }\n}\nAuthConfig.defaults = Object.freeze({\n  iam: IAMAuthorizationProvider.configDefaults,\n  kvstore: KVStoreAuthorizationProvider.configDefaults\n});\nmodule.exports = AuthConfig;","map":{"version":3,"names":["assert","require","IAMAuthorizationProvider","KVStoreAuthorizationProvider","ServiceType","NoSQLArgumentError","hasOwnProperty","AuthConfig","_str2provider","s","getAuthorization","Promise","resolve","_chkInitProvider","cfg","auth","provider","authProvider","req","_chkInitServiceType","ownsAuth","isIAM","isKVStore","hasProvider","serviceType","iam","CLOUD","kvstore","KVSTORE","region","CLOUDSIM","init","credentials","user","password","_isInternal","onInit","close","defaults","Object","freeze","configDefaults","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/config.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\n/**\n * Defines types used for NoSQL driver authorization.\n */\n\n/**\n * Authorization configuration for the driver provided as {@link Config}#auth\n * when {@link NoSQLClient} instance is created.\n * <p>\n * Every request to the server made by {@link NoSQLClient} methods requires\n * authorization information.  The way authorization information is obtained\n * depends on the {@link ServiceType} used (set as\n * {@link Config}#serviceType):\n * <ul>\n * <li>For {@link ServiceType.CLOUD}, authorization information is obtained\n * using Oracle Cloud Infrastructure Identity and Access Management (IAM).  To\n * enable authorization, you must set IAM configuration in the form of\n * {@link IAMConfig} as {@link AuthConfig}#iam property.</li>\n * <li>For {@link ServiceType.CLOUDSIM}, authorization is not required and\n * you do not need to specify {@link Config}#auth property.</li>\n * <li>For {@link ServiceType.KVSTORE}, if using secure store, you need to\n * specify the store authentication information such as user name and password\n * as {@link AuthConfig}#kvstore property in the form of\n * {@link KVStoreAuthConfig}.  If using non-secure store, authorization is not\n * required and you do not need to specify {@link Config}#auth property.</li>\n * <li>You may also choose to implement your own authorization provider to\n * obtain authorization information for each request depending on the\n * operation performed.  In this case, set this provider as\n * {@link AuthConfig}#provider property.  If the provider is set,\n * {@link ServiceType} can be undefined, although it may also be possible to\n * have custom provider for existing service types.</li>\n * </ul>\n * <p>\n * Note that you may specify both {@link AuthConfig}#iam and\n * {@link AuthConfig}#kvstore in the same configuration object only if\n * {@link Config}#serviceType is set to valid {@link ServiceType}.\n * If {@link Config}#serviceType is not set (in which case the driver will try\n * to deduce service type, see {@link ServiceType}), specifying both\n * {@link AuthConfig}#iam and {@link AuthConfig}#kvstore will\n * result in error.\n * \n * @see {@link Config}\n * @see {@link ServiceType}\n * @see {@link IAMConfig}\n * @see {@link KVStoreAuthConfig}\n * @see {@link AuthorizationProvider}\n * @tutorial connect-cloud\n * @tutorial connect-on-prem\n * \n * @example //This AuthConfig object contains required properties to obtain\n * authorization from IAM via OCI configuration file\n * {\n *     iam: {\n *         configFile: '~/myapp/.oci/config',\n *         profileName: 'John'\n *     }\n * };\n * \n * @example //This AuthConfig object contains required information to connect\n * //to secure kvstore and assumes the user credentials are stored in\n * //separate file credentials.json\n * {\n *     kvstore: {\n *         credentials: '/path/to/credentials.json'\n *     }\n * }\n * \n * @global\n * @typedef {object} AuthConfig\n * @property {IAMConfig} [iam] IAM configuration, see {@link IAMConfig}.\n * Must be set to use Oracle NoSQL Cloud service\n * @property {KVStoreAuthConfig} [kvstore] Configuration to authenticate with\n * secure On-Premise NoSQL database.  Must be set to connect to secure store\n * @property {AuthorizationProvider} [provider] Custom authorization provider\n */\n\n/**\n * Interface to acquire authorization information.  Authorization information\n * may be returned as a string or as an object:\n * <ul>\n * <li>If represented as a <em>string</em>, it will be used as a value of HTTP\n * <em>Authorization</em> header for the service request.</li>\n * <li>If represented as an <em>object</em>, this object's properties will be\n * added as HTTP headers for the service request.</li>\n * </ul>\n * The specifics depend on the authorization protocol used.\n * \n * @see {@link AuthorizationProvider}\n * \n * @global\n * @callback getAuthorization\n * @async\n * @param {Operation} operation NoSQL database operation that requires\n * authorization information, see {@link Operation}\n * @returns {Promise} Promise resolved with authorization <em>string</em> or\n * authorization <em>object</em> or rejected with an error\n */\n\n/**\n * AuthorizationProvider is an interface to obtain authorization information\n * for NoSQL database operation.  By default, the driver will use its own\n * authorization providers based on specified {@link ServiceType} and/or\n * presense of service-specific configurations such as {@link IAMConfig} and\n * {@link KVStoreAuthConfig}.  Alternatively, the application may choose to\n * use custom authorization provider and set it as {@link AuthConfig}#provider\n * property.  This custom provider may be specified either as a\n * {@link getAuthorization} function or as an object implementing\n * {@link getAuthorization} function.\n * \n * @global\n * @typedef {object|getAuthorization} AuthorizationProvider\n * @property {getAuthorization} getAuthorization Retrieves authorization\n * string for an operation\n * @property {function()} [close] If specified, releases any resources\n * associated with this provider when {@link NoSQLClient} instance is closed.\n * Note that this operation may be asynchronous in which case this function\n * should return a <em>Promise</em> (resolved value is ignored), otherwise\n * return value is ignored.  If error occurs, the function should only log it\n * rather than throwing exception or causing Promise rejection\n */\n\nconst assert = require('assert');\nconst IAMAuthorizationProvider = require('./iam/auth_provider');\nconst KVStoreAuthorizationProvider = require('./kvstore/auth_provider');\nconst ServiceType = require('../constants').ServiceType;\nconst NoSQLArgumentError = require('../error').NoSQLArgumentError;\nconst hasOwnProperty = require('../utils').hasOwnProperty;\n\nclass AuthConfig {\n\n    static _str2provider(s) {\n        return {\n            getAuthorization() {\n                return Promise.resolve(s);\n            }\n        };\n    }\n    \n    static _chkInitProvider(cfg) {\n        if (typeof cfg.auth === 'string') {\n            cfg.auth = {\n                provider: this._str2provider(cfg.auth)\n            };\n            return;\n        }\n        if (cfg.auth == null) {\n            cfg.auth = {};\n            return;\n        }\n        if (typeof cfg.auth !== 'object') {\n            throw new NoSQLArgumentError('Invalid value of auth', cfg);\n        }\n        if (typeof cfg.auth.provider === 'function') {\n            const authProvider = cfg.auth.provider;\n            cfg.auth.provider = {\n                getAuthorization(req) {\n                    return authProvider(req);\n                }\n            };\n            return;\n        }\n        if (cfg.auth.provider != null &&\n            (typeof cfg.auth.provider !== 'object' ||\n            typeof cfg.auth.provider.getAuthorization !== 'function')) {\n            throw new NoSQLArgumentError('Invalid auth.provider value',\n                cfg);\n        }\n    }\n\n    static _chkInitServiceType(cfg) {\n        assert(cfg.auth != null && typeof cfg.auth === 'object');\n        const ownsAuth = hasOwnProperty(cfg, 'auth');\n        const isIAM = ownsAuth && hasOwnProperty(cfg.auth, 'iam');\n        const isKVStore = ownsAuth && hasOwnProperty(cfg.auth, 'kvstore');\n        const hasProvider = cfg.auth.provider != null;\n        \n        if ((isIAM && hasProvider) || (isKVStore && hasProvider) ||\n            (isIAM && isKVStore)) {\n            throw new NoSQLArgumentError(\n                'You may only specify one of auth.iam, auth.kvstore or \\\nauth.provider properties', cfg);\n        }\n\n        let serviceType;\n        \n        if (isIAM) {\n            if (typeof cfg.auth.iam !== 'object') {\n                throw new NoSQLArgumentError('Invalid auth.iam value', cfg);\n            }\n            serviceType = ServiceType.CLOUD;\n        } else if (isKVStore) {\n            if (typeof cfg.auth.kvstore !== 'object') {\n                throw new NoSQLArgumentError('Invalid auth.kvstore value',\n                    cfg);\n            }\n            serviceType = ServiceType.KVSTORE;\n        } else if (cfg.serviceType == null && cfg.auth.provider == null) {\n            serviceType = cfg.region == null ? ServiceType.CLOUDSIM :\n                ServiceType.CLOUD;\n        } else if (cfg.auth.provider instanceof IAMAuthorizationProvider) {\n            serviceType = ServiceType.CLOUD;\n        } else if (cfg.auth.provider instanceof\n            KVStoreAuthorizationProvider) {\n            serviceType = ServiceType.KVSTORE;\n        }\n\n        if (cfg.serviceType == null) {\n            cfg.serviceType = serviceType;\n        } else if (serviceType != null && cfg.serviceType !== serviceType) {\n            throw new NoSQLArgumentError(`Incorrect service type specified: \\\n${cfg.serviceType}, auth configuration specifies ${serviceType}`, cfg);\n        }\n    }\n\n    static init(cfg) {\n        this._chkInitProvider(cfg);\n        this._chkInitServiceType(cfg);\n\n        if (cfg.auth.provider == null) {\n            switch(cfg.serviceType) {\n            case ServiceType.CLOUDSIM:\n                cfg.auth.provider = this._str2provider('Bearer TestTenant');\n                break;\n            case ServiceType.CLOUD: {\n                cfg.auth.provider = new IAMAuthorizationProvider(cfg.auth.iam,\n                    cfg);\n                break;\n            }\n            case ServiceType.KVSTORE:\n                //Create KVStoreAuthorizationProvider instance if either\n                //credentials provider/file or user/password is specified.\n                //Otherwise assume this is unsecure kvstore and authorization\n                //provider is not needed.\n                if (cfg.auth.kvstore != null &&\n                    (cfg.auth.kvstore.credentials != null ||\n                    cfg.auth.kvstore.user != null ||\n                    cfg.auth.kvstore.password != null)) {\n                    cfg.auth.provider = new KVStoreAuthorizationProvider(\n                        cfg.auth.kvstore, cfg);\n                } else {\n                    cfg.auth.provider = this._str2provider(null);\n                }\n                break;\n            default:\n                assert(cfg.serviceType && cfg.serviceType._isInternal);\n            }\n        }\n\n        if (typeof cfg.auth.provider.onInit === 'function') {\n            cfg.auth.provider.onInit(cfg);\n        }\n    }\n\n    static close(cfg) {\n        assert(cfg.auth && cfg.auth.provider);\n        if (typeof cfg.auth.provider.close === 'function') {\n            return cfg.auth.provider.close();\n        }\n    }\n\n}\n\nAuthConfig.defaults = Object.freeze({\n    iam: IAMAuthorizationProvider.configDefaults,\n    kvstore: KVStoreAuthorizationProvider.configDefaults\n});\n\nmodule.exports = AuthConfig;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC/D,MAAME,4BAA4B,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACvE,MAAMG,WAAW,GAAGH,OAAO,CAAC,cAAc,CAAC,CAACG,WAAW;AACvD,MAAMC,kBAAkB,GAAGJ,OAAO,CAAC,UAAU,CAAC,CAACI,kBAAkB;AACjE,MAAMC,cAAc,GAAGL,OAAO,CAAC,UAAU,CAAC,CAACK,cAAc;AAEzD,MAAMC,UAAU,CAAC;EAEb,OAAOC,aAAaA,CAACC,CAAC,EAAE;IACpB,OAAO;MACHC,gBAAgBA,CAAA,EAAG;QACf,OAAOC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MAC7B;IACJ,CAAC;EACL;EAEA,OAAOI,gBAAgBA,CAACC,GAAG,EAAE;IACzB,IAAI,OAAOA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;MAC9BD,GAAG,CAACC,IAAI,GAAG;QACPC,QA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}