{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst OpCode = require('./constants').OpCode;\nconst Protocol = require('./protocol');\nconst NoSQLProtocolError = require('../error').NoSQLProtocolError;\nconst PutOp = require('../ops').PutOp;\nconst DeleteOp = require('../ops').DeleteOp;\nconst QUERY_VERSION = require('../ops').QueryOp.QUERY_VERSION;\nconst QueryPlanSerializer = require('../query/binary_protocol/serializer');\nfunction numberOrZero(n) {\n  return n ? n : 0;\n}\nclass TableRequestSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.TABLE_REQUEST, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.stmt);\n    const tl = req.opt.tableLimits;\n    if (tl) {\n      dw.writeBoolean(true);\n      dw.writeInt32BE(tl.readUnits);\n      dw.writeInt32BE(tl.writeUnits);\n      dw.writeInt32BE(tl.storageGB);\n      if (serialVersion > 2) {\n        if (tl.mode != null) {\n          dw.writeByte(tl.mode.ordinal);\n        } else {\n          dw.writeByte(1);\n        }\n      }\n      if (req.tableName) {\n        dw.writeBoolean(true);\n        dw.writeString(req.tableName);\n      } else {\n        dw.writeBoolean(false);\n      }\n    } else {\n      dw.writeBoolean(false);\n    }\n  }\n  static deserialize(dr, req, serialVersion) {\n    return this.deserializeTableResult(dr, req.opt, serialVersion);\n  }\n}\nclass GetTableSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.GET_TABLE, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.tableName);\n    dw.writeString(req.opt.operationId);\n  }\n  static deserialize(dr, req, serialVersion) {\n    return this.deserializeTableResult(dr, req.opt, serialVersion);\n  }\n}\nclass TableUsageSerializer extends Protocol {\n  static _deserializeUsage(dr) {\n    const usage = {};\n    usage.startTime = new Date(dr.readLong());\n    usage.secondsInPeriod = dr.readInt();\n    usage.readUnits = dr.readInt();\n    usage.writeUnits = dr.readInt();\n    usage.storageGB = dr.readInt();\n    usage.readThrottleCount = dr.readInt();\n    usage.writeThrottleCount = dr.readInt();\n    usage.storageThrottleCount = dr.readInt();\n    return usage;\n  }\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.GET_TABLE_USAGE, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.tableName);\n    //Already converted to Date during validation\n    dw.writeLong(req.opt.startTime ? req.opt.startTime.getTime() : 0);\n    dw.writeLong(req.opt.endTime ? req.opt.endTime.getTime() : 0);\n    dw.writeInt(numberOrZero(req.opt.limit));\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    //eslint-disable-next-line no-unused-vars\n    const tenantId = dr.readString();\n    res.tableName = dr.readString();\n    res.usageRecords = new Array(dr.readInt());\n    for (let i = 0; i < res.usageRecords.length; i++) {\n      res.usageRecords[i] = this._deserializeUsage(dr);\n    }\n    return res;\n  }\n}\nclass GetIndexesSerializer extends Protocol {\n  static _deserializeIndexInfo(dr) {\n    const info = {};\n    info.indexName = dr.readString();\n    info.fields = new Array(dr.readInt());\n    for (let i = 0; i < info.fields.length; i++) {\n      info.fields[i] = dr.readString();\n    }\n    return info;\n  }\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.GET_INDEXES, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.tableName);\n    if (req.opt.indexName) {\n      dw.writeBoolean(true);\n      dw.writeString(req.opt.indexName);\n    } else {\n      dw.writeBoolean(false);\n    }\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    const res = new Array(dr.readInt());\n    for (let i = 0; i < res.length; i++) {\n      res[i] = this._deserializeIndexInfo(dr);\n    }\n    return res;\n  }\n}\nclass ListTablesSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.LIST_TABLES, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeInt32BE(numberOrZero(req.opt.startIndex));\n    dw.writeInt32BE(numberOrZero(req.opt.limit));\n    dw.writeString(req.opt.namespace);\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    res.tables = new Array(dr.readInt());\n    for (let i = 0; i < res.tables.length; i++) {\n      res.tables[i] = dr.readString();\n    }\n    res.lastIndex = dr.readInt();\n    return res;\n  }\n}\nclass GetSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.GET, serialVersion);\n    this.serializeReadRequest(dw, req);\n    this.writeFieldValue(dw, req.key, req.opt);\n  }\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    const hasRow = dr.readBoolean();\n    if (hasRow) {\n      res.row = this.readRecord(dr, req.opt);\n      const expTime = dr.readLong();\n      if (expTime) {\n        res.expirationTime = new Date(expTime);\n      }\n      res.version = this.readVersion(dr);\n      if (serialVersion > 2) {\n        res.modificationTime = new Date(dr.readLong());\n      }\n    } else {\n      res.row = null;\n    }\n    return res;\n  }\n}\nclass PutSerializer extends Protocol {\n  static _opcode(opt) {\n    if (opt.ifAbsent) {\n      return OpCode.PUT_IF_ABSENT;\n    }\n    if (opt.ifPresent) {\n      return OpCode.PUT_IF_PRESENT;\n    }\n    if (opt.matchVersion) {\n      return OpCode.PUT_IF_VERSION;\n    }\n    return OpCode.PUT;\n  }\n  static serialize(dw, req, serialVersion, isSubRequest = false) {\n    const opt = req.opt;\n    if (isSubRequest) {\n      this.writeSubOpCode(dw, this._opcode(opt));\n      dw.writeBoolean(opt.returnExisting);\n    } else {\n      this.writeOpCode(dw, this._opcode(opt), serialVersion);\n      this.serializeWriteRequest(dw, req, serialVersion);\n    }\n    dw.writeBoolean(opt.exactMatch);\n    dw.writeInt(numberOrZero(opt.identityCacheSize));\n    this.writeFieldValue(dw, req.row, req.opt);\n    dw.writeBoolean(PutOp.needUpdateTTL(req));\n    this.writeTTL(dw, opt.ttl);\n    if (opt.matchVersion) {\n      this.writeVersion(dw, opt.matchVersion);\n    }\n  }\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    res.success = dr.readBoolean();\n    if (res.success) {\n      res.version = this.readVersion(dr);\n    }\n    return this.deserializeWriteResponseWithId(dr, req.opt, res, serialVersion);\n  }\n}\nclass DeleteSerializer extends Protocol {\n  static serialize(dw, req, serialVersion, isSubRequest = false) {\n    const opt = req.opt;\n    const opCode = opt.matchVersion ? OpCode.DELETE_IF_VERSION : OpCode.DELETE;\n    if (isSubRequest) {\n      this.writeSubOpCode(dw, opCode);\n      dw.writeBoolean(opt.returnExisting);\n    } else {\n      this.writeOpCode(dw, opCode, serialVersion);\n      this.serializeWriteRequest(dw, req, serialVersion);\n    }\n    this.writeFieldValue(dw, req.key, req.opt);\n    if (opt.matchVersion) {\n      this.writeVersion(dw, opt.matchVersion);\n    }\n  }\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    res.success = dr.readBoolean();\n    return this.deserializeWriteResponse(dr, req.opt, res, serialVersion);\n  }\n}\nclass MultiDeleteSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    const opt = req.opt;\n    this.writeOpCode(dw, OpCode.MULTI_DELETE, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.tableName);\n    this.writeDurability(dw, opt.durability, serialVersion);\n    this.writeFieldValue(dw, req.key, req.opt);\n    this.writeFieldRange(dw, opt.fieldRange, req.opt);\n    dw.writeInt(numberOrZero(opt.maxWriteKB));\n    dw.writeBinary(opt.continuationKey);\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    res.deletedCount = dr.readInt();\n    res.continuationKey = dr.readBinary();\n    return res;\n  }\n}\nclass WriteMultipleSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.WRITE_MULTIPLE, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.tableName != null ? req.tableName : req.ops.map(op => op.tableName).join(','));\n    dw.writeInt(req.ops.length);\n    this.writeDurability(dw, req.opt.durability, serialVersion);\n    for (let op of req.ops) {\n      const start = dw.buffer.length;\n      dw.writeBoolean(op.opt.abortOnFail);\n      if (op.put) {\n        PutSerializer.serialize(dw, op, serialVersion, true);\n        PutOp._chkRequestSizeLimit(req, dw.buffer.length - start);\n      } else {\n        assert(op.delete);\n        DeleteSerializer.serialize(dw, op, serialVersion, true);\n        DeleteOp._chkRequestSizeLimit(req, dw.buffer.length - start);\n      }\n    }\n  }\n  static _readOpResult(dr, req, serialVersion) {\n    const res = {};\n    res.success = dr.readBoolean();\n    const hasVersion = dr.readBoolean();\n    if (hasVersion) {\n      res.version = this.readVersion(dr);\n    }\n    return this.deserializeWriteResponseWithId(dr, req.opt, res, serialVersion);\n  }\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    const succeeded = dr.readBoolean();\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    if (succeeded) {\n      const cnt = dr.readInt();\n      res.results = new Array(cnt);\n      for (let i = 0; i < cnt; i++) {\n        res.results[i] = this._readOpResult(dr, req, serialVersion);\n      }\n    } else {\n      res.failedOpIndex = dr.readByte();\n      res.failedOpResult = this._readOpResult(dr, req, serialVersion);\n    }\n    return res;\n  }\n}\nclass PrepareSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.PREPARE, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.stmt);\n    dw.writeInt16BE(QUERY_VERSION);\n    dw.writeBoolean(req.opt.getQueryPlan);\n  }\n\n  /*\n   * Extract the table name, namespace and opcode from the prepared query.\n   * This dips into the portion of the prepared query that is\n   * normally opaque\n   *\n   * int (4 byte)\n   * byte[] (32 bytes -- hash)\n   * byte (number of tables)\n   * namespace (string)\n   * tablename (string)\n   * operation (1 byte)\n   */\n  static _getPrepStmtInfo(dr, res) {\n    const off = dr.offset;\n    dr.offset += 37; //4 + 32 + 1\n    res._namespace = dr.readString();\n    res._tableName = dr.readString();\n    res._opCode = dr.readByte();\n    dr.offset = off;\n  }\n  static _deserializeDriverPlanInfo(dr, res) {\n    res._queryPlan = QueryPlanSerializer.deserialize(dr);\n    if (res._queryPlan == null) {\n      return;\n    }\n\n    //Skip numIterators and numRegisters, not used.\n    dr.offset += 8;\n    const varCnt = dr.readInt32BE();\n    if (varCnt > 0) {\n      res._varNames = new Array(varCnt);\n      for (let i = 0; i < varCnt; i++) {\n        const name = dr.readString();\n        const pos = dr.readInt32BE();\n        if (pos < 0 || pos >= varCnt) {\n          throw new NoSQLProtocolError(`External variable id \\\nis out of range for variable ${name}: ${pos}, ${varCnt} variables total`);\n        }\n        res._varNames[pos] = name;\n      }\n    }\n  }\n  static deserializePS(dr, req) {\n    const res = {};\n    res._sql = req.stmt;\n    this._getPrepStmtInfo(dr, res);\n    res._prepStmt = dr.readBinary2();\n    if (req.opt.getQueryPlan) {\n      res._queryPlanStr = dr.readString();\n    }\n    if (!res._prepStmt.length) {\n      throw new NoSQLProtocolError('Received null prepared query');\n    }\n    this._deserializeDriverPlanInfo(dr, res);\n    if (res._queryPlan) {\n      res._topoInfo = this.readTopologyInfo(dr);\n    }\n    return res;\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    return Object.assign(res, this.deserializePS(dr, req));\n  }\n}\nclass QuerySerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.QUERY, serialVersion);\n    this.serializeRequest(dw, req);\n    this.writeConsistency(dw, req.opt.consistency);\n    dw.writeInt(numberOrZero(req.opt.limit));\n    dw.writeInt(numberOrZero(req.opt.maxReadKB));\n    dw.writeBinary(req.opt.continuationKey);\n    dw.writeBoolean(req.prepStmt != null);\n\n    //The following 7 fields were added in V2\n    dw.writeInt16BE(QUERY_VERSION);\n    dw.writeByte(numberOrZero(req.opt.traceLevel));\n    dw.writeInt(numberOrZero(req.opt.maxWriteKB));\n    this.writeMathContext(dw, req.opt);\n    dw.writeInt(req.prepStmt && req.prepStmt._topoInfo ? req.prepStmt._topoInfo.seqNum : -1);\n    dw.writeInt(req._shardId != null ? req._shardId : -1);\n    dw.writeBoolean(req.prepStmt && !req.prepStmt._queryPlan);\n    if (req.prepStmt) {\n      dw.writeBinary2(req.prepStmt._prepStmt);\n      if (req.prepStmt._bindings) {\n        const ents = Object.entries(req.prepStmt._bindings);\n        dw.writeInt(ents.length);\n        for (let [key, val] of ents) {\n          dw.writeString(key);\n          this.writeFieldValue(dw, val, req.opt);\n        }\n      } else {\n        dw.writeInt(0);\n      }\n    } else {\n      dw.writeString(req.stmt);\n    }\n  }\n  static _deserializeSortPhase1Results(dr, res) {\n    res._contAllPartSortPhase1 = dr.readBoolean();\n    res._partIds = dr.readIntArray();\n    if (res._partIds) {\n      res._numResultsPerPartId = dr.readIntArray();\n      res._partContKeys = new Array(res._partIds.length);\n      for (let i = 0; i < res._partIds.length; i++) {\n        res._partContKeys[i] = dr.readBinary();\n      }\n    }\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    const res = {};\n    res.rows = new Array(dr.readInt32BE());\n    const isAllPartSortPhase1 = dr.readBoolean();\n    for (let i = 0; i < res.rows.length; i++) {\n      res.rows[i] = this.readRecord(dr, req.opt);\n    }\n    if (isAllPartSortPhase1) {\n      this._deserializeSortPhase1Results(dr, res);\n    }\n    this.deserializeConsumedCapacity(dr, res, req.opt);\n    res.continuationKey = dr.readBinary();\n\n    /*\n     * In V2, if the QueryRequest was not initially prepared, the prepared\n     * statement created at the proxy is returned back along with the\n     * query results, so that the preparation does not need to be done\n     * during each query batch.  For advanced queries, only prepared\n     * statement will be returned and the query will start executing\n     * on the next invocation of NoSQLClient#query() method.\n     */\n    if (!req.prepStmt) {\n      res._prepStmt = PrepareSerializer.deserializePS(dr, req);\n    }\n    if (req._queryInternal) {\n      res._reachedLimit = dr.readBoolean();\n      res._topoInfo = this.readTopologyInfo(dr);\n    }\n    return res;\n  }\n}\nclass SystemRequestSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.SYSTEM_REQUEST, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeBinary(Buffer.isBuffer(req.stmt) ? req.stmt : Buffer.from(req.stmt));\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    return this.deserializeSystemResult(dr);\n  }\n}\nclass SystemStatusSerializer extends Protocol {\n  static serialize(dw, req, serialVersion) {\n    this.writeOpCode(dw, OpCode.SYSTEM_STATUS_REQUEST, serialVersion);\n    this.serializeRequest(dw, req);\n    dw.writeString(req.adminResult.operationId);\n    dw.writeString(req.adminResult.stmt);\n  }\n\n  //eslint-disable-next-line no-unused-vars\n  static deserialize(dr, req, serialVersion) {\n    return this.deserializeSystemResult(dr);\n  }\n}\nmodule.exports = {\n  GetSerializer,\n  PutSerializer,\n  DeleteSerializer,\n  MultiDeleteSerializer,\n  WriteMultipleSerializer,\n  TableRequestSerializer,\n  GetTableSerializer,\n  TableUsageSerializer,\n  GetIndexesSerializer,\n  ListTablesSerializer,\n  PrepareSerializer,\n  QuerySerializer,\n  SystemRequestSerializer,\n  SystemStatusSerializer\n};","map":{"version":3,"names":["assert","require","OpCode","Protocol","NoSQLProtocolError","PutOp","DeleteOp","QUERY_VERSION","QueryOp","QueryPlanSerializer","numberOrZero","n","TableRequestSerializer","serialize","dw","req","serialVersion","writeOpCode","TABLE_REQUEST","serializeRequest","writeString","stmt","tl","opt","tableLimits","writeBoolean","writeInt32BE","readUnits","writeUnits","storageGB","mode","writeByte","ordinal","tableName","deserialize","dr","deserializeTableResult","GetTableSerializer","GET_TABLE","operationId","TableUsageSerializer","_deserializeUsage","usage","startTime","Date","readLong","secondsInPeriod","readInt","readThrottleCount","writeThrottleCount","storageThrottleCount","GET_TABLE_USAGE","writeLong","getTime","endTime","writeInt","limit","res","tenantId","readString","usageRecords","Array","i","length","GetIndexesSerializer","_deserializeIndexInfo","info","indexName","fields","GET_INDEXES","ListTablesSerializer","LIST_TABLES","startIndex","namespace","tables","lastIndex","GetSerializer","GET","serializeReadRequest","writeFieldValue","key","deserializeConsumedCapacity","hasRow","readBoolean","row","readRecord","expTime","expirationTime","version","readVersion","modificationTime","PutSerializer","_opcode","ifAbsent","PUT_IF_ABSENT","ifPresent","PUT_IF_PRESENT","matchVersion","PUT_IF_VERSION","PUT","isSubRequest","writeSubOpCode","returnExisting","serializeWriteRequest","exactMatch","identityCacheSize","needUpdateTTL","writeTTL","ttl","writeVersion","success","deserializeWriteResponseWithId","DeleteSerializer","opCode","DELETE_IF_VERSION","DELETE","deserializeWriteResponse","MultiDeleteSerializer","MULTI_DELETE","writeDurability","durability","writeFieldRange","fieldRange","maxWriteKB","writeBinary","continuationKey","deletedCount","readBinary","WriteMultipleSerializer","WRITE_MULTIPLE","ops","map","op","join","start","buffer","abortOnFail","put","_chkRequestSizeLimit","delete","_readOpResult","hasVersion","succeeded","cnt","results","failedOpIndex","readByte","failedOpResult","PrepareSerializer","PREPARE","writeInt16BE","getQueryPlan","_getPrepStmtInfo","off","offset","_namespace","_tableName","_opCode","_deserializeDriverPlanInfo","_queryPlan","varCnt","readInt32BE","_varNames","name","pos","deserializePS","_sql","_prepStmt","readBinary2","_queryPlanStr","_topoInfo","readTopologyInfo","Object","assign","QuerySerializer","QUERY","writeConsistency","consistency","maxReadKB","prepStmt","traceLevel","writeMathContext","seqNum","_shardId","writeBinary2","_bindings","ents","entries","val","_deserializeSortPhase1Results","_contAllPartSortPhase1","_partIds","readIntArray","_numResultsPerPartId","_partContKeys","rows","isAllPartSortPhase1","_queryInternal","_reachedLimit","SystemRequestSerializer","SYSTEM_REQUEST","Buffer","isBuffer","from","deserializeSystemResult","SystemStatusSerializer","SYSTEM_STATUS_REQUEST","adminResult","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/binary_protocol/serializers.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst OpCode = require('./constants').OpCode;\nconst Protocol = require('./protocol');\nconst NoSQLProtocolError = require('../error').NoSQLProtocolError;\nconst PutOp = require('../ops').PutOp;\nconst DeleteOp = require('../ops').DeleteOp;\nconst QUERY_VERSION = require('../ops').QueryOp.QUERY_VERSION;\nconst QueryPlanSerializer = require('../query/binary_protocol/serializer');\n\nfunction numberOrZero(n) {\n    return n ? n : 0;\n}\n\nclass TableRequestSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.TABLE_REQUEST, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.stmt);\n        const tl = req.opt.tableLimits;\n        if (tl) {\n            dw.writeBoolean(true);\n            dw.writeInt32BE(tl.readUnits);\n            dw.writeInt32BE(tl.writeUnits);\n            dw.writeInt32BE(tl.storageGB);\n            if (serialVersion > 2) {\n                if (tl.mode != null) {\n                    dw.writeByte(tl.mode.ordinal);\n                } else {\n                    dw.writeByte(1);\n                }\n            }\n            if (req.tableName) {\n                dw.writeBoolean(true);\n                dw.writeString(req.tableName);\n            } else {\n                dw.writeBoolean(false);\n            }\n        } else {\n            dw.writeBoolean(false);\n        }\n    }\n\n    static deserialize(dr, req, serialVersion) {\n        return this.deserializeTableResult(dr, req.opt, serialVersion);\n    }\n\n}\n\nclass GetTableSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.GET_TABLE, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.tableName);\n        dw.writeString(req.opt.operationId);\n    }\n\n    static deserialize(dr, req, serialVersion) {\n        return this.deserializeTableResult(dr, req.opt, serialVersion);\n    }\n\n}\n\nclass TableUsageSerializer extends Protocol {\n\n    static _deserializeUsage(dr) {\n        const usage = {};\n        usage.startTime = new Date(dr.readLong());\n        usage.secondsInPeriod = dr.readInt();\n        usage.readUnits = dr.readInt();\n        usage.writeUnits = dr.readInt();\n        usage.storageGB = dr.readInt();\n        usage.readThrottleCount = dr.readInt();\n        usage.writeThrottleCount = dr.readInt();\n        usage.storageThrottleCount = dr.readInt();\n        return usage;\n    }\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.GET_TABLE_USAGE, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.tableName);\n        //Already converted to Date during validation\n        dw.writeLong(req.opt.startTime ? req.opt.startTime.getTime() : 0);\n        dw.writeLong(req.opt.endTime ? req.opt.endTime.getTime() : 0);\n        dw.writeInt(numberOrZero(req.opt.limit));\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        //eslint-disable-next-line no-unused-vars\n        const tenantId = dr.readString();\n        res.tableName = dr.readString();\n        res.usageRecords = new Array(dr.readInt());\n\n        for (let i = 0; i < res.usageRecords.length; i++) {\n            res.usageRecords[i] = this._deserializeUsage(dr);\n        }\n        return res;\n    }\n\n}\n\nclass GetIndexesSerializer extends Protocol {\n\n    static _deserializeIndexInfo(dr) {\n        const info = {};\n        info.indexName = dr.readString();\n        info.fields = new Array(dr.readInt());\n        for (let i = 0; i < info.fields.length; i++) {\n            info.fields[i] = dr.readString();\n        }\n        return info;\n    }\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.GET_INDEXES, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.tableName);\n        if (req.opt.indexName) {\n            dw.writeBoolean(true);\n            dw.writeString(req.opt.indexName);\n        } else {\n            dw.writeBoolean(false);\n        }\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        const res = new Array(dr.readInt());\n        for (let i = 0; i < res.length; i++) {\n            res[i] = this._deserializeIndexInfo(dr);\n        }\n        return res;\n    }\n\n}\n\nclass ListTablesSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.LIST_TABLES, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeInt32BE(numberOrZero(req.opt.startIndex));\n        dw.writeInt32BE(numberOrZero(req.opt.limit));\n        dw.writeString(req.opt.namespace);\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        res.tables = new Array(dr.readInt());\n        for (let i = 0; i < res.tables.length; i++) {\n            res.tables[i] = dr.readString();\n        }\n        res.lastIndex = dr.readInt();\n        return res;\n    }\n\n}\n\nclass GetSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.GET, serialVersion);\n        this.serializeReadRequest(dw, req);\n        this.writeFieldValue(dw, req.key, req.opt);\n    }\n\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        const hasRow = dr.readBoolean();\n        if (hasRow) {\n            res.row = this.readRecord(dr, req.opt);\n            const expTime = dr.readLong();\n            if (expTime) {\n                res.expirationTime = new Date(expTime);\n            }\n            res.version = this.readVersion(dr);\n            if (serialVersion > 2) {\n                res.modificationTime = new Date(dr.readLong());\n            }\n        } else {\n            res.row = null;\n        }\n        return res;\n    }\n\n}\n\nclass PutSerializer extends Protocol {\n\n    static _opcode(opt) {\n        if (opt.ifAbsent) {\n            return OpCode.PUT_IF_ABSENT;\n        }\n        if (opt.ifPresent) {\n            return OpCode.PUT_IF_PRESENT;\n        }\n        if (opt.matchVersion) {\n            return OpCode.PUT_IF_VERSION;\n        }\n        return OpCode.PUT;\n    }\n\n    static serialize(dw, req, serialVersion, isSubRequest = false) {\n        const opt = req.opt;\n        if (isSubRequest) {\n            this.writeSubOpCode(dw, this._opcode(opt));\n            dw.writeBoolean(opt.returnExisting);\n        } else {\n            this.writeOpCode(dw, this._opcode(opt), serialVersion);\n            this.serializeWriteRequest(dw, req, serialVersion);\n        }\n        dw.writeBoolean(opt.exactMatch);\n        dw.writeInt(numberOrZero(opt.identityCacheSize));\n        this.writeFieldValue(dw, req.row, req.opt);\n        dw.writeBoolean(PutOp.needUpdateTTL(req));\n        this.writeTTL(dw, opt.ttl);\n        if (opt.matchVersion) {\n            this.writeVersion(dw, opt.matchVersion);\n        }\n    }\n\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        res.success = dr.readBoolean();\n        if (res.success) {\n            res.version = this.readVersion(dr);\n        }\n        return this.deserializeWriteResponseWithId(dr,\n            req.opt, res, serialVersion);\n    }\n\n}\n\nclass DeleteSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion, isSubRequest = false) {\n        const opt = req.opt;\n        const opCode = opt.matchVersion ? OpCode.DELETE_IF_VERSION :\n            OpCode.DELETE;\n        if (isSubRequest) {\n            this.writeSubOpCode(dw, opCode);\n            dw.writeBoolean(opt.returnExisting);\n        } else {\n            this.writeOpCode(dw, opCode, serialVersion);\n            this.serializeWriteRequest(dw, req, serialVersion);\n        }\n        this.writeFieldValue(dw, req.key, req.opt);\n        if (opt.matchVersion) {\n            this.writeVersion(dw, opt.matchVersion);\n        }\n    }\n\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        res.success = dr.readBoolean();\n        return this.deserializeWriteResponse(dr, req.opt, res, serialVersion);\n    }\n\n}\n\nclass MultiDeleteSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        const opt = req.opt;\n        this.writeOpCode(dw, OpCode.MULTI_DELETE, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.tableName);\n        this.writeDurability(dw, opt.durability, serialVersion);\n        this.writeFieldValue(dw, req.key, req.opt);\n        this.writeFieldRange(dw, opt.fieldRange, req.opt);\n        dw.writeInt(numberOrZero(opt.maxWriteKB));\n        dw.writeBinary(opt.continuationKey);\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        res.deletedCount = dr.readInt();\n        res.continuationKey = dr.readBinary();\n        return res;\n    }\n\n}\n\nclass WriteMultipleSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.WRITE_MULTIPLE, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.tableName != null ?\n            req.tableName : req.ops.map(op => op.tableName).join(','));\n        dw.writeInt(req.ops.length);\n        this.writeDurability(dw, req.opt.durability, serialVersion);\n\n        for(let op of req.ops) {\n            const start = dw.buffer.length;\n            dw.writeBoolean(op.opt.abortOnFail);\n            if (op.put) {\n                PutSerializer.serialize(dw, op, serialVersion, true);\n                PutOp._chkRequestSizeLimit(req, dw.buffer.length - start);\n            } else {\n                assert(op.delete);\n                DeleteSerializer.serialize(dw, op, serialVersion, true);\n                DeleteOp._chkRequestSizeLimit(req, dw.buffer.length - start);\n            }\n        }\n    }\n\n    static _readOpResult(dr, req, serialVersion) {\n        const res = {};\n        res.success = dr.readBoolean();\n        const hasVersion = dr.readBoolean();\n        if (hasVersion) {\n            res.version = this.readVersion(dr);\n        }\n        return this.deserializeWriteResponseWithId(dr,\n            req.opt, res, serialVersion);\n    }\n\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        const succeeded = dr.readBoolean();\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        if (succeeded) {\n            const cnt = dr.readInt();\n            res.results = new Array(cnt);\n            for(let i = 0; i < cnt; i++) {\n                res.results[i] = this._readOpResult(dr, req, serialVersion);\n            }\n        } else {\n            res.failedOpIndex = dr.readByte();\n            res.failedOpResult = this._readOpResult(dr, req, serialVersion);\n        }\n        return res;\n    }\n\n}\n\nclass PrepareSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.PREPARE, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.stmt);\n        dw.writeInt16BE(QUERY_VERSION);\n        dw.writeBoolean(req.opt.getQueryPlan);\n    }\n\n    /*\n     * Extract the table name, namespace and opcode from the prepared query.\n     * This dips into the portion of the prepared query that is\n     * normally opaque\n     *\n     * int (4 byte)\n     * byte[] (32 bytes -- hash)\n     * byte (number of tables)\n     * namespace (string)\n     * tablename (string)\n     * operation (1 byte)\n     */\n    static _getPrepStmtInfo(dr, res) {\n        const off = dr.offset;\n        dr.offset += 37; //4 + 32 + 1\n        res._namespace = dr.readString();\n        res._tableName = dr.readString();\n        res._opCode = dr.readByte();\n        dr.offset = off;\n    }\n\n    static _deserializeDriverPlanInfo(dr, res) {\n        res._queryPlan = QueryPlanSerializer.deserialize(dr);\n        if (res._queryPlan == null) {\n            return;\n        }\n\n        //Skip numIterators and numRegisters, not used.\n        dr.offset += 8;\n        const varCnt = dr.readInt32BE();\n\n        if (varCnt > 0) {\n            res._varNames = new Array(varCnt);\n            for(let i = 0; i < varCnt; i++) {\n                const name = dr.readString();\n                const pos = dr.readInt32BE();\n                if (pos < 0 || pos >= varCnt) {\n                    throw new NoSQLProtocolError(`External variable id \\\nis out of range for variable ${name}: ${pos}, ${varCnt} variables total`);\n                }\n                res._varNames[pos] = name;\n            }\n        }\n    }\n\n    static deserializePS(dr, req) {\n        const res = {};\n        res._sql = req.stmt;\n        this._getPrepStmtInfo(dr, res);\n        res._prepStmt = dr.readBinary2();\n        if (req.opt.getQueryPlan) {\n            res._queryPlanStr = dr.readString();\n        }\n        if (!res._prepStmt.length) {\n            throw new NoSQLProtocolError('Received null prepared query');\n        }\n\n        this._deserializeDriverPlanInfo(dr, res);\n        if (res._queryPlan) {\n            res._topoInfo = this.readTopologyInfo(dr);\n        }\n\n        return res;\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        return Object.assign(res, this.deserializePS(dr, req));\n    }\n\n}\n\nclass QuerySerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.QUERY, serialVersion);\n        this.serializeRequest(dw, req);\n        this.writeConsistency(dw, req.opt.consistency);\n        dw.writeInt(numberOrZero(req.opt.limit));\n        dw.writeInt(numberOrZero(req.opt.maxReadKB));\n        dw.writeBinary(req.opt.continuationKey);\n        dw.writeBoolean(req.prepStmt != null);\n\n        //The following 7 fields were added in V2\n        dw.writeInt16BE(QUERY_VERSION);\n        dw.writeByte(numberOrZero(req.opt.traceLevel));\n        dw.writeInt(numberOrZero(req.opt.maxWriteKB));\n        this.writeMathContext(dw, req.opt);\n        dw.writeInt(req.prepStmt && req.prepStmt._topoInfo ?\n            req.prepStmt._topoInfo.seqNum : -1);\n        dw.writeInt(req._shardId != null ? req._shardId : -1);\n        dw.writeBoolean(req.prepStmt && !req.prepStmt._queryPlan);\n\n        if (req.prepStmt) {\n            dw.writeBinary2(req.prepStmt._prepStmt);\n            if (req.prepStmt._bindings) {\n                const ents = Object.entries(req.prepStmt._bindings);\n                dw.writeInt(ents.length);\n                for(let [key, val] of ents) {\n                    dw.writeString(key);\n                    this.writeFieldValue(dw, val, req.opt);\n                }\n            } else {\n                dw.writeInt(0);\n            }\n        } else {\n            dw.writeString(req.stmt);\n        }\n    }\n\n    static _deserializeSortPhase1Results(dr, res) {\n        res._contAllPartSortPhase1 = dr.readBoolean();\n        res._partIds = dr.readIntArray();\n        if (res._partIds) {\n            res._numResultsPerPartId = dr.readIntArray();\n            res._partContKeys = new Array(res._partIds.length);\n            for(let i = 0; i < res._partIds.length; i++) {\n                res._partContKeys[i] = dr.readBinary();\n            }\n        }\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        const res = {};\n\n        res.rows = new Array(dr.readInt32BE());\n        const isAllPartSortPhase1 = dr.readBoolean();\n        for(let i = 0; i < res.rows.length; i++) {\n            res.rows[i] = this.readRecord(dr, req.opt);\n        }\n\n        if (isAllPartSortPhase1) {\n            this._deserializeSortPhase1Results(dr, res);\n        }\n\n        this.deserializeConsumedCapacity(dr, res, req.opt);\n        res.continuationKey = dr.readBinary();\n\n        /*\n         * In V2, if the QueryRequest was not initially prepared, the prepared\n         * statement created at the proxy is returned back along with the\n         * query results, so that the preparation does not need to be done\n         * during each query batch.  For advanced queries, only prepared\n         * statement will be returned and the query will start executing\n         * on the next invocation of NoSQLClient#query() method.\n         */\n        if (!req.prepStmt) {\n            res._prepStmt = PrepareSerializer.deserializePS(dr, req);\n        }\n        if (req._queryInternal) {\n            res._reachedLimit = dr.readBoolean();\n            res._topoInfo = this.readTopologyInfo(dr);\n        }\n\n        return res;\n    }\n}\n\nclass SystemRequestSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.SYSTEM_REQUEST, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeBinary(Buffer.isBuffer(req.stmt) ? req.stmt :\n            Buffer.from(req.stmt));\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        return this.deserializeSystemResult(dr);\n    }\n\n}\n\nclass SystemStatusSerializer extends Protocol {\n\n    static serialize(dw, req, serialVersion) {\n        this.writeOpCode(dw, OpCode.SYSTEM_STATUS_REQUEST, serialVersion);\n        this.serializeRequest(dw, req);\n        dw.writeString(req.adminResult.operationId);\n        dw.writeString(req.adminResult.stmt);\n    }\n\n    //eslint-disable-next-line no-unused-vars\n    static deserialize(dr, req, serialVersion) {\n        return this.deserializeSystemResult(dr);\n    }\n\n}\n\nmodule.exports = {\n    GetSerializer,\n    PutSerializer,\n    DeleteSerializer,\n    MultiDeleteSerializer,\n    WriteMultipleSerializer,\n    TableRequestSerializer,\n    GetTableSerializer,\n    TableUsageSerializer,\n    GetIndexesSerializer,\n    ListTablesSerializer,\n    PrepareSerializer,\n    QuerySerializer,\n    SystemRequestSerializer,\n    SystemStatusSerializer\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}