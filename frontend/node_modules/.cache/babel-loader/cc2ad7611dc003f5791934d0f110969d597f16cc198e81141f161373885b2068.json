{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n/**\n * ResourcePrincipalProvider\n * <p>\n * The authentication profile provider used to call service API from other OCI\n * resource such as function. It authenticates with resource principal and uses\n * security token issued by IAM to do the actual request signing.\n * <p>\n * It's constructed in accordance with the following environment variables:\n *  <ul>\n *\n * <li>OCI_RESOURCE_PRINCIPAL_VERSION: permitted values are \"2.2\"\n * </li>\n *\n * <li>OCI_RESOURCE_PRINCIPAL_RPST:\n * <p>\n * If this is an absolute path, then the filesystem-supplied resource\n * principal session token will be retrieved from that location. This mode\n * supports token refresh (if the environment replaces the RPST in the\n * filesystem). Otherwise, the environment variable is taken to hold the raw\n * value of an RPST. Under these circumstances, the RPST cannot be refreshed;\n * consequently, this mode is only usable for short-lived executables.\n * </li>\n * <li>OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM:\n * If this is an absolute path, then the filesystem-supplied private key will\n * be retrieved from that location. As with the OCI_RESOURCE_PRINCIPAL_RPST,\n * this mode supports token refresh if the environment can update the file\n * contents. Otherwise, the value is interpreted as the direct injection of a\n * private key. The same considerations as to the lifetime of this value apply\n * when directly injecting a key.\n * </li>\n * <li>OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE:\n * <p>\n * This is optional. If set, it contains either the location (as an absolute\n * path) or the value of the passphrase associated with the private key.\n * </li>\n * <li>OCI_RESOURCE_PRINCIPAL_REGION:\n * <p>\n * If set, this holds the canonical form of the local region. This is intended\n * to enable executables to locate their \"local\" OCI service endpoints.</p>\n * </li>\n * </ul>\n */\n\nconst assert = require('assert');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\nconst promisified = require('../../utils').promisified;\nconst NoSQLAuthorizationError = require('../../error').NoSQLAuthorizationError;\nconst Utils = require('./utils');\nconst isPosInt32OrZero = require('../../utils').isPosInt32OrZero;\n\n/* Environment variable names used to fetch artifacts */\nconst OCI_RESOURCE_PRINCIPAL_VERSION = 'OCI_RESOURCE_PRINCIPAL_VERSION';\nconst RP_VERSION_2_2 = '2.2';\nconst OCI_RESOURCE_PRINCIPAL_RPST = 'OCI_RESOURCE_PRINCIPAL_RPST';\nconst OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM = 'OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM';\nconst OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE = 'OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE';\nconst OCI_RESOURCE_PRINCIPAL_REGION = 'OCI_RESOURCE_PRINCIPAL_REGION';\n\n//Claim keys for compartment and tenant id in resource principal\n//security tokens.\n\nconst COMPARTMENT_ID_CLAIM_KEY = 'res_compartment';\nconst TENANT_ID_CLAIM_KEY = 'res_tenant';\n\n//Make sure the values for the above claim keys, if available, are returned as\n//strings (which they should be, but we check just in case). Our typescript\n//declaration for ResourcePrincipalClaims expects them as such.\nfunction _chkAsString(val) {\n  return val != null ? String(val) : undefined;\n}\nclass ResourcePrincipalProvider {\n  constructor(opt, cfg) {\n    assert(opt != null);\n    const ver = process.env[OCI_RESOURCE_PRINCIPAL_VERSION];\n    if (ver == null) {\n      throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_VERSION}`, null, cfg);\n    }\n    if (ver !== RP_VERSION_2_2) {\n      throw NoSQLAuthorizationError.invalidArg(`Unknown value for \\\nenvironment variable ${OCI_RESOURCE_PRINCIPAL_VERSION}`, null, cfg);\n    }\n    this._pk = process.env[OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM];\n    this._pkPass = process.env[OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE];\n    if (this._pk == null) {\n      throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM}`, null, cfg);\n    }\n    if (path.isAbsolute(this._pk)) {\n      if (this._pkPass != null && !path.isAbsolute(this._pkPass)) {\n        throw NoSQLAuthorizationError.invalidArg(`Cannot mix path \\\nand constant settings for ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM} and \\\n${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE}`, null, cfg);\n      }\n      this._pkInFile = true;\n    } else {\n      this._privateKey = Utils.privateKeyFromPEM(this._pk, this._pkPass);\n    }\n    this._rpst = process.env[OCI_RESOURCE_PRINCIPAL_RPST];\n    if (this._rpst == null) {\n      throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_RPST}`, null, cfg);\n    }\n    if (path.isAbsolute(this._rpst)) {\n      this._rpstInFile = true;\n    } else {\n      this._token = Utils.parseSecurityToken(this._rpst);\n    }\n    this._region = process.env[OCI_RESOURCE_PRINCIPAL_REGION];\n    if (this._region == null) {\n      throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_REGION}`, null, cfg);\n    }\n    this._useRPSTCompartment = opt.useResourcePrincipalCompartment;\n    this._expireBeforeMs = opt.securityTokenExpireBeforeMs;\n    assert(isPosInt32OrZero(this._expireBeforeMs));\n  }\n  async _rpstFromFile() {\n    let rpst;\n    try {\n      rpst = await promisified(null, fs.readFile, this._rpst, 'utf8');\n    } catch (err) {\n      throw NoSQLAuthorizationError.invalidArg(`Error reading security \\\ntoken from file ${this._rpst}`, err);\n    }\n    return Utils.parseSecurityToken(rpst);\n  }\n  async _doRefresh(needRefresh) {\n    const refreshRPST = this._rpstInFile && (needRefresh || this._token == null || !Utils.isSecurityTokenValid(this._token, this._expireBeforeMs));\n    const refreshPK = this._pkInFile && (refreshRPST || this._privateKey == null);\n    if (refreshRPST) {\n      this._token = await this._rpstFromFile();\n    }\n    if (refreshPK) {\n      this._privateKey = await Utils.privateKeyFromPEMFile(this._pk, this._pkPass, true);\n    }\n    assert(this._token != null);\n    assert(this._privateKey != null);\n    return refreshRPST || refreshPK;\n  }\n  async getProfile(needRefresh) {\n    if ((await this._doRefresh(needRefresh)) || this._profile == null) {\n      this._profile = {\n        keyId: 'ST$' + this._token.value,\n        privateKey: this._privateKey\n      };\n      if (this._useRPSTCompartment) {\n        this._profile.compartmentId = _chkAsString(this._token.claims[COMPARTMENT_ID_CLAIM_KEY]);\n      }\n    }\n    return this._profile;\n  }\n  isProfileValid(profile) {\n    assert(profile != null);\n    return profile == this._profile && Utils.isSecurityTokenValid(this._token, this._expireBeforeMs);\n  }\n  getRegion() {\n    return this._region;\n  }\n  async getRPSTClaims() {\n    await this._doRefresh();\n    return {\n      tenantId: _chkAsString(this._token.claims[TENANT_ID_CLAIM_KEY]),\n      compartmentId: _chkAsString(this._token.claims[COMPARTMENT_ID_CLAIM_KEY])\n    };\n  }\n}\nmodule.exports = ResourcePrincipalProvider;","map":{"version":3,"names":["assert","require","path","fs","process","promisified","NoSQLAuthorizationError","Utils","isPosInt32OrZero","OCI_RESOURCE_PRINCIPAL_VERSION","RP_VERSION_2_2","OCI_RESOURCE_PRINCIPAL_RPST","OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM","OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE","OCI_RESOURCE_PRINCIPAL_REGION","COMPARTMENT_ID_CLAIM_KEY","TENANT_ID_CLAIM_KEY","_chkAsString","val","String","undefined","ResourcePrincipalProvider","constructor","opt","cfg","ver","env","invalidArg","_pk","_pkPass","isAbsolute","_pkInFile","_privateKey","privateKeyFromPEM","_rpst","_rpstInFile","_token","parseSecurityToken","_region","_useRPSTCompartment","useResourcePrincipalCompartment","_expireBeforeMs","securityTokenExpireBeforeMs","_rpstFromFile","rpst","readFile","err","_doRefresh","needRefresh","refreshRPST","isSecurityTokenValid","refreshPK","privateKeyFromPEMFile","getProfile","_profile","keyId","value","privateKey","compartmentId","claims","isProfileValid","profile","getRegion","getRPSTClaims","tenantId","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/iam/resource_principal.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n/**\n * ResourcePrincipalProvider\n * <p>\n * The authentication profile provider used to call service API from other OCI\n * resource such as function. It authenticates with resource principal and uses\n * security token issued by IAM to do the actual request signing.\n * <p>\n * It's constructed in accordance with the following environment variables:\n *  <ul>\n *\n * <li>OCI_RESOURCE_PRINCIPAL_VERSION: permitted values are \"2.2\"\n * </li>\n *\n * <li>OCI_RESOURCE_PRINCIPAL_RPST:\n * <p>\n * If this is an absolute path, then the filesystem-supplied resource\n * principal session token will be retrieved from that location. This mode\n * supports token refresh (if the environment replaces the RPST in the\n * filesystem). Otherwise, the environment variable is taken to hold the raw\n * value of an RPST. Under these circumstances, the RPST cannot be refreshed;\n * consequently, this mode is only usable for short-lived executables.\n * </li>\n * <li>OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM:\n * If this is an absolute path, then the filesystem-supplied private key will\n * be retrieved from that location. As with the OCI_RESOURCE_PRINCIPAL_RPST,\n * this mode supports token refresh if the environment can update the file\n * contents. Otherwise, the value is interpreted as the direct injection of a\n * private key. The same considerations as to the lifetime of this value apply\n * when directly injecting a key.\n * </li>\n * <li>OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE:\n * <p>\n * This is optional. If set, it contains either the location (as an absolute\n * path) or the value of the passphrase associated with the private key.\n * </li>\n * <li>OCI_RESOURCE_PRINCIPAL_REGION:\n * <p>\n * If set, this holds the canonical form of the local region. This is intended\n * to enable executables to locate their \"local\" OCI service endpoints.</p>\n * </li>\n * </ul>\n */\n\nconst assert = require('assert');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\n\nconst promisified = require('../../utils').promisified;\nconst NoSQLAuthorizationError =\n    require('../../error').NoSQLAuthorizationError;\nconst Utils = require('./utils');\nconst isPosInt32OrZero = require('../../utils').isPosInt32OrZero;\n\n/* Environment variable names used to fetch artifacts */\nconst OCI_RESOURCE_PRINCIPAL_VERSION = 'OCI_RESOURCE_PRINCIPAL_VERSION';\nconst RP_VERSION_2_2 = '2.2';\nconst OCI_RESOURCE_PRINCIPAL_RPST = 'OCI_RESOURCE_PRINCIPAL_RPST';\nconst OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM =\n    'OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM';\nconst OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE =\n    'OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE';\nconst OCI_RESOURCE_PRINCIPAL_REGION = 'OCI_RESOURCE_PRINCIPAL_REGION';\n\n//Claim keys for compartment and tenant id in resource principal\n//security tokens.\n\nconst COMPARTMENT_ID_CLAIM_KEY = 'res_compartment';\nconst TENANT_ID_CLAIM_KEY = 'res_tenant';\n\n//Make sure the values for the above claim keys, if available, are returned as\n//strings (which they should be, but we check just in case). Our typescript\n//declaration for ResourcePrincipalClaims expects them as such.\nfunction _chkAsString(val) {\n    return val != null ? String(val) : undefined;\n}\n\nclass ResourcePrincipalProvider {\n\n    constructor(opt, cfg) {\n        assert(opt != null);\n\n        const ver = process.env[OCI_RESOURCE_PRINCIPAL_VERSION];\n        if (ver == null) {\n            throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_VERSION}`, null, cfg);\n        }\n        if (ver !== RP_VERSION_2_2) {\n            throw NoSQLAuthorizationError.invalidArg(`Unknown value for \\\nenvironment variable ${OCI_RESOURCE_PRINCIPAL_VERSION}`, null, cfg);\n        }\n\n        this._pk = process.env[OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM];\n        this._pkPass =\n            process.env[OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE];\n        if (this._pk == null) {\n            throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM}`, null, cfg);\n        }\n        if (path.isAbsolute(this._pk)) {\n            if (this._pkPass != null && !path.isAbsolute(this._pkPass)) {\n                throw NoSQLAuthorizationError.invalidArg(`Cannot mix path \\\nand constant settings for ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM} and \\\n${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM_PASSPHRASE}`, null, cfg);\n            }\n            this._pkInFile = true;\n        } else {\n            this._privateKey = Utils.privateKeyFromPEM(this._pk,\n                this._pkPass);\n        }\n\n        this._rpst = process.env[OCI_RESOURCE_PRINCIPAL_RPST];\n        if (this._rpst == null) {\n            throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_RPST}`, null, cfg);\n        }\n        if (path.isAbsolute(this._rpst)) {\n            this._rpstInFile = true;\n        } else {\n            this._token = Utils.parseSecurityToken(this._rpst);\n        }\n\n        this._region = process.env[OCI_RESOURCE_PRINCIPAL_REGION];\n        if (this._region == null) {\n            throw NoSQLAuthorizationError.invalidArg(`Missing environment \\\nvariable ${OCI_RESOURCE_PRINCIPAL_REGION}`, null, cfg);\n        }\n\n        this._useRPSTCompartment = opt.useResourcePrincipalCompartment;\n        this._expireBeforeMs = opt.securityTokenExpireBeforeMs;\n        assert(isPosInt32OrZero(this._expireBeforeMs));\n    }\n\n    async _rpstFromFile() {\n        let rpst;\n        try {\n            rpst = await promisified(null, fs.readFile, this._rpst, 'utf8');\n        } catch(err) {\n            throw NoSQLAuthorizationError.invalidArg(`Error reading security \\\ntoken from file ${this._rpst}`, err);\n        }\n        return Utils.parseSecurityToken(rpst);\n    }\n\n    async _doRefresh(needRefresh) {\n        const refreshRPST = this._rpstInFile && (needRefresh ||\n            this._token == null || !Utils.isSecurityTokenValid(this._token,\n            this._expireBeforeMs));\n        const refreshPK = this._pkInFile && (refreshRPST ||\n            this._privateKey == null);\n        \n        if (refreshRPST) {\n            this._token = await this._rpstFromFile();\n        }\n        if (refreshPK) {\n            this._privateKey = await Utils.privateKeyFromPEMFile(this._pk,\n                this._pkPass, true);\n        }\n\n        assert(this._token != null);\n        assert(this._privateKey != null);\n\n        return refreshRPST || refreshPK;\n    }\n\n    async getProfile(needRefresh) {\n        if ((await this._doRefresh(needRefresh)) || this._profile == null) {\n            this._profile = {\n                keyId: 'ST$' + this._token.value,\n                privateKey: this._privateKey\n            };\n            if (this._useRPSTCompartment) {\n                this._profile.compartmentId = _chkAsString(\n                    this._token.claims[COMPARTMENT_ID_CLAIM_KEY]);\n            }\n        }\n\n        return this._profile;\n    }\n\n    isProfileValid(profile) {\n        assert(profile != null);\n        return profile == this._profile &&\n            Utils.isSecurityTokenValid(this._token, this._expireBeforeMs);\n    }\n\n    getRegion() {\n        return this._region;\n    }\n\n    async getRPSTClaims() {\n        await this._doRefresh();\n        return {\n            tenantId: _chkAsString(this._token.claims[TENANT_ID_CLAIM_KEY]),\n            compartmentId: _chkAsString(\n                this._token.claims[COMPARTMENT_ID_CLAIM_KEY])\n        };\n    }\n}\n\nmodule.exports = ResourcePrincipalProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}