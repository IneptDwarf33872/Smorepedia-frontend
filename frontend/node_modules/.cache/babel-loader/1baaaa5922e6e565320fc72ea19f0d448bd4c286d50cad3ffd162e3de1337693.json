{"ast":null,"code":"/*\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\n\n/**\n * Defines enumeration types and constants used by the driver.\n */\n\n/**\n * @classdesc Base class for all enumerations used in the driver. All\n * enumeration constants are instances of the subclasses of this class.\n * Driver defines fixed number of members of each enumeration and seals the\n * enumeration class so that new members cannot be created.\n * @hideconstructor\n *\n */\nclass Enum {\n  constructor(ordinal, desc, name) {\n    //Prevent construction of new objects by the user\n    assert(!this.constructor._sealed);\n    if (ordinal != null) {\n      this._ordinal = ordinal;\n    } else {\n      if (this.constructor._ordinalSeq == null) {\n        this.constructor._ordinalSeq = 0;\n      }\n      this._ordinal = this.constructor._ordinalSeq++;\n    }\n    this._desc = desc;\n    this._name = name;\n  }\n\n  /**\n   * Name of the enumeration constant, usually the same as its symbol name.\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Numeric integer value of the enumeration constant.\n   * @type {number}\n   * @readonly\n   */\n  get ordinal() {\n    return this._ordinal;\n  }\n\n  /**\n   * Optional description of the enumeration constant.\n   * @type {string}\n   * @readonly\n   */\n  get description() {\n    return this._desc;\n  }\n\n  /**\n   * Returns string representation of enumeration constant.  Equivalent to\n   * <em>name</em> property.\n   * @returns {string}\n   */\n  toString() {\n    return this._name;\n  }\n  static get values() {\n    const enumClass = this;\n    const vals = [];\n    for (let val of Object.values(enumClass)) {\n      if (val instanceof enumClass) {\n        vals.push(val);\n      }\n    }\n    return vals;\n  }\n  static get names() {\n    return this.values.map(val => val.name);\n  }\n  static find(predicate) {\n    const enumClass = this;\n    for (let val of Object.values(enumClass)) {\n      if (val instanceof enumClass && predicate(val)) {\n        return val;\n      }\n    }\n  }\n  static fromOrdinal(n) {\n    const enumClass = this;\n    for (let val of Object.values(enumClass)) {\n      if (val instanceof enumClass && val.ordinal == n) {\n        return val;\n      }\n    }\n    throw new RangeError(`Ordinal ${n} is not valid for ${enumClass.name} enumeration`);\n  }\n  static seal() {\n    const enumClass = this;\n    for (let [key, val] of Object.entries(enumClass)) {\n      if (val instanceof enumClass) {\n        if (!val._name) {\n          //Assign name if was not specified\n          val._name = key;\n        }\n        Object.freeze(val);\n      }\n    }\n    enumClass._sealed = true;\n    Object.freeze(enumClass);\n  }\n}\n\n/**\n * Service type is specified in the initial configuration used to create\n * {@link NoSQLClient} instance and indicates what kind of service the\n * driver will be using.  Currently supported values are\n * {@link ServiceType.CLOUDSIM}, {@link ServiceType.CLOUD} and\n * {@link ServiceType.KVSTORE}.  In addition to {@link ServiceType}\n * enumeration, these values may be specified as strings \"CLOUDSIM\", \"CLOUD\"\n * or \"KVSTORE\", case-insensitive.  This is useful if using JSON configuration\n * file.  If {@link ServiceType} is not present in the initial configuration,\n * the driver will try to deduce service type from the\n * information provided in authorization property {@link Config}#auth (see\n * {@link AuthConfig}) in the following way:\n * <ul>\n * <li>If {@link Config}#auth is undefined or null, the service type is\n * determined as follows: if {@link Config}#region is specified, the service\n * type defaults to {@link ServiceType.CLOUD}, otherwise it defaults to\n * {@link ServiceType.CLOUDSIM}\n * <li>If {@link Config}#auth contains <em>iam</em> property, the service\n * type is assumed to be {@link ServiceType.CLOUD}</li>\n * <li>If {@link Config}#auth constains <em>kvstore</em> property, the service\n * type is assumed to be {@link ServiceType.KVSTORE}.  Note that unless\n * {@link Config}#serviceType is explicitly specified, you may not specify\n * both <em>iam</em> and <em>kvstore</em> properties in {@link AuthConfig}\n * at the same time.  You may specify value <em>{}</em> (empty object) for\n * <em>kvstore</em> property to connect to non-secure kvstore, although it is\n * advisable to specify the service type explicitly in this case.  See\n * {@link ServiceType.KVSTORE}</li>\n * <li>If {@link Config}#auth does not contain either of the above properties,\n * the driver will check if it contains user-specified\n * {@link AuthorizationProvider} ({@link AuthConfig}#provider).  In this case\n * the service type will remain undefined and user-specified provider will be\n * used to control access to the service.  If there is no user-specified\n * {@link AuthorizationProvider} in {@link Config}#auth, this is equivalent to\n * {@link Config}#auth not defined and the service type will default to\n * {@link ServiceType.CLOUD} or {@link ServiceType.CLOUDSIM} as described\n * above</li>\n * </ul>\n *\n * @extends Enum\n * @hideconstructor\n *\n * @see {@link AuthConfig}\n * @see {@link AuthorizationProvider}\n */\nclass ServiceType extends Enum {}\n\n/**\n * Cloud Simulator, no authorization used.\n * @tutorial connect-cloud\n */\nServiceType.CLOUDSIM = new ServiceType(0);\n\n/**\n * Oracle NoSQL Cloud Service.  Authorization is managed by IAM.\n * @see {@link IAMConfig}\n * @tutorial connect-cloud\n */\nServiceType.CLOUD = new ServiceType(1);\n\n/**\n * On Premise Oracle NoSQL Database.  This includes both secure and non-secure\n * stores.  For secure store, authentication information must be provided in\n * {@link AuthConfig}#kvstore as {@link KVStoreAuthConfig}.  For non-secure\n * store, it is enough to specify {@link Config}#serviceType to be\n * {@link ServiceType.KVSTORE} without having {@link AuthConfig}#kvstore\n * property.\n * @see {@link KVStoreAuthConfig}\n * @tutorial connect-on-prem\n */\nServiceType.KVSTORE = new ServiceType(2);\n\n/**\n * @ignore\n */\nServiceType.MINICLOUD = new ServiceType(3); //internal use only\nServiceType.MINICLOUD._isInternal = true;\n\n/**\n * @ignore\n */\nServiceType.DEVPOD = new ServiceType(3); //internal use only\nServiceType.DEVPOD._isInternal = true;\nServiceType.seal();\n\n/**\n * Consistency is used to provide consistency guarantees for read operations.\n * <p>\n * {@link Consistency.ABSOLUTE} consistency may be specified to guarantee that\n * current values are read. {@link Consistency.EVENTUAL} consistency means\n * that the values read may be very slightly out of date.\n * {@link Consistency.ABSOLUTE} consistency results in higher cost, consuming\n * twice the number of read units for the same data relative to\n * {@link Consistency.EVENTUAL} consistency, and should only be used when\n * required.\n * </p>\n * <p>\n * It is possible to set a default Consistency for a {@link NoSQLClient}\n * instance by providing it in the initial configuration as\n * {@link Config}#consistency.  In JSON configuration file, you may use string\n * values such as \"EVENTUAL\" or \"ABSOLUTE\".  If no consistency is specified\n * for an operation and there is no default value,\n * {@link Consistency.EVENTUAL} is used.\n * </p>\n * <p>\n * Consistency can be specified in the options(<em>opt</em>) argument for all\n * read operations.\n * </p>\n * @extends Enum\n * @hideconstructor\n */\nclass Consistency extends Enum {}\n\n/**\n * Absolute consistency\n * @type {Consistency}\n */\nConsistency.ABSOLUTE = new Consistency(0);\n\n/**\n * Eventual consistency\n * @type {Consistency}\n */\nConsistency.EVENTUAL = new Consistency(1);\nConsistency.seal();\n\n/**\n * CapacityMode specifies the type of capacity that will be set on a table. It is\n * used in table creation and table capacity updates. See {@link TableLimits}.\n * <p>\n * Table capacity is only used in the NoSQL Cloud Service.\n * </p>\n * <p>\n * {@link CapacityMode.PROVISIONED} is the default mode. In this mode, the\n * application defines the specified maximum read and write throughput for\n * a table.\n * {@link CapacityMode.ON_DEMAND} mode allows for flexible throughput usage.\n * In this mode, only the maximum storage size is specified.\n * </p>\n * @extends Enum\n * @hideconstructor\n */\nclass CapacityMode extends Enum {}\n\n/**\n * Provisioned mode. This is the default.\n * @type {CapacityMode}\n * @since 5.3.0\n */\nCapacityMode.PROVISIONED = new CapacityMode(1);\n\n/**\n * On Demand mode.\n * @type {CapacityMode}\n * @since 5.3.0\n */\nCapacityMode.ON_DEMAND = new CapacityMode(2);\nCapacityMode.seal();\n\n//Not currently used by the driver.\n/** @ignore */\nclass ScanDirection extends Enum {}\nScanDirection.UNORDERED = new ScanDirection(0);\nScanDirection.FORWARD = new ScanDirection(1);\nScanDirection.REVERSE = new ScanDirection(2);\nScanDirection.seal();\n\n/**\n * Describes the current state of the table.  See\n * {@link NoSQLClient#tableDDL}.\n * @extends Enum\n * @hideconstructor\n */\nclass TableState extends Enum {}\n\n/**\n * The table is ready to be used. This is the steady state after creation or\n * modification.\n * @type TableState\n */\nTableState.ACTIVE = new TableState(0);\n\n/**\n * The table is being created and cannot yet be used.\n * @type TableState\n */\nTableState.CREATING = new TableState(1);\n\n/**\n * The table has been dropped or does not exist.\n * @type TableState\n */\nTableState.DROPPED = new TableState(2);\n\n/**\n * The table is being dropped and cannot be used.\n * @type TableState\n */\nTableState.DROPPING = new TableState(3);\n\n/**\n * The table is being updated. It is available for normal use, but additional\n * table modification operations are not permitted while the table is in this\n * state.\n * @type TableState\n */\nTableState.UPDATING = new TableState(4);\nTableState.seal();\n\n/**\n * On premise only.\n * <p>\n * Describes the current state of the operation performed by\n * {@link NoSQLClient#adminDDL}.\n * @extends Enum\n * @hideconstructor\n */\nclass AdminState extends Enum {}\n\n/**\n * Operation is complete and successful.\n * @type AdminState\n */\nAdminState.COMPLETE = new AdminState(0);\n\n/**\n * Operation is in progress.\n * @type AdminState\n */\nAdminState.IN_PROGRESS = new AdminState(1);\nAdminState.seal();\n\n/**\n * For now this is internal, but we may expose this enumeration\n * when we implement custom type mappings.\n * @ignore\n */\nclass DBType extends Enum {}\nDBType.ARRAY = new DBType(0);\nDBType.BINARY = new DBType(1);\nDBType.BOOLEAN = new DBType(2);\nDBType.DOUBLE = new DBType(3);\nDBType.INTEGER = new DBType(4);\nDBType.LONG = new DBType(5);\nDBType.MAP = new DBType(6);\nDBType.STRING = new DBType(7);\nDBType.TIMESTAMP = new DBType(8);\nDBType.NUMBER = new DBType(9);\nDBType.JSON_NULL = new DBType(10);\nDBType.NULL = new DBType(11);\nDBType.EMPTY = new DBType(12);\nDBType.seal();\n\n//Only used internally.  Not clear if some limits (in particular request\n//sizes) are specific to binary protocol.  If so, they could be moved there.\n\nconst Limits = {\n  REQUEST_SIZE: 2 * 1024 * 1024,\n  BATCH_REQUEST_SIZE: 25 * 1024 * 1024,\n  BATCH_OP_NUMBER: 50,\n  READ_KB: 2 * 1024,\n  WRITE_KB: 2 * 1024,\n  //Maximum timeout for single http request accepted by the proxy\n  MAX_REQUEST_TIMEOUT: 30000\n};\n\n//Only used internally by advanced query, should not show up in the results.\nconst EMPTY_VALUE = Symbol('EMPTY');\n\n//HTTP-related constants, only used internally\nconst HttpConstants = {\n  POST: 'POST',\n  GET: 'GET',\n  DELETE: 'DELETE',\n  PUT: 'PUT',\n  CONTENT_TYPE: 'Content-Type',\n  CONTENT_TYPE_LWR: 'content-type',\n  APPLICATION_JSON: 'application/json',\n  CONNECTION: 'Connection',\n  ACCEPT: 'Accept',\n  AUTHORIZATION: 'Authorization',\n  CONTENT_LENGTH: 'Content-Length',\n  CONTENT_LENGTH_LWR: 'content-length',\n  USER_AGENT: 'User-Agent',\n  CACHE_CONTROL: 'cache-control',\n  COOKIE: 'cookie',\n  SET_COOKIE: 'set-cookie',\n  HOST: 'host',\n  DATE: 'date',\n  X_DATE: 'x-date',\n  REQUEST_ID: 'x-nosql-request-id',\n  OPC_REQUEST_ID: 'opc-request-id',\n  DATA_PATH_NAME: 'data',\n  NOSQL_VERSION: 'V2',\n  NOSQL_PATH_NAME: 'nosql',\n  COMPARTMENT_ID: 'x-nosql-compartment-id',\n  NAMESPACE: 'x-nosql-default-ns',\n  REQUEST_TARGET: '(request-target)',\n  CONTENT_SHA256: 'x-content-sha256',\n  HTTP_OK: 200,\n  HTTP_BAD_REQUEST: 400,\n  HTTP_UNAUTHORIZED: 401,\n  HTTP_NOT_FOUND: 404,\n  HTTP_CONFLICT: 409,\n  HTTP_SERVER_ERROR: 500,\n  HTTP_UNAVAILABLE: 503\n};\nHttpConstants.NOSQL_PREFIX = HttpConstants.NOSQL_VERSION + '/' + HttpConstants.NOSQL_PATH_NAME;\nHttpConstants.NOSQL_DATA_PATH = HttpConstants.NOSQL_PREFIX + '/' + HttpConstants.DATA_PATH_NAME;\nconst PACKAGE_VERSION = require('../package.json').version;\ndelete require.cache[require.resolve('../package.json')];\nmodule.exports = {\n  Enum,\n  ServiceType,\n  Consistency,\n  CapacityMode,\n  ScanDirection,\n  TableState,\n  AdminState,\n  DBType,\n  Limits,\n  EMPTY_VALUE,\n  HttpConstants,\n  PACKAGE_VERSION\n};","map":{"version":3,"names":["assert","require","Enum","constructor","ordinal","desc","name","_sealed","_ordinal","_ordinalSeq","_desc","_name","description","toString","values","enumClass","vals","val","Object","push","names","map","find","predicate","fromOrdinal","n","RangeError","seal","key","entries","freeze","ServiceType","CLOUDSIM","CLOUD","KVSTORE","MINICLOUD","_isInternal","DEVPOD","Consistency","ABSOLUTE","EVENTUAL","CapacityMode","PROVISIONED","ON_DEMAND","ScanDirection","UNORDERED","FORWARD","REVERSE","TableState","ACTIVE","CREATING","DROPPED","DROPPING","UPDATING","AdminState","COMPLETE","IN_PROGRESS","DBType","ARRAY","BINARY","BOOLEAN","DOUBLE","INTEGER","LONG","MAP","STRING","TIMESTAMP","NUMBER","JSON_NULL","NULL","EMPTY","Limits","REQUEST_SIZE","BATCH_REQUEST_SIZE","BATCH_OP_NUMBER","READ_KB","WRITE_KB","MAX_REQUEST_TIMEOUT","EMPTY_VALUE","Symbol","HttpConstants","POST","GET","DELETE","PUT","CONTENT_TYPE","CONTENT_TYPE_LWR","APPLICATION_JSON","CONNECTION","ACCEPT","AUTHORIZATION","CONTENT_LENGTH","CONTENT_LENGTH_LWR","USER_AGENT","CACHE_CONTROL","COOKIE","SET_COOKIE","HOST","DATE","X_DATE","REQUEST_ID","OPC_REQUEST_ID","DATA_PATH_NAME","NOSQL_VERSION","NOSQL_PATH_NAME","COMPARTMENT_ID","NAMESPACE","REQUEST_TARGET","CONTENT_SHA256","HTTP_OK","HTTP_BAD_REQUEST","HTTP_UNAUTHORIZED","HTTP_NOT_FOUND","HTTP_CONFLICT","HTTP_SERVER_ERROR","HTTP_UNAVAILABLE","NOSQL_PREFIX","NOSQL_DATA_PATH","PACKAGE_VERSION","version","cache","resolve","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/constants.js"],"sourcesContent":["/*\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\n\n/**\n * Defines enumeration types and constants used by the driver.\n */\n\n/**\n * @classdesc Base class for all enumerations used in the driver. All\n * enumeration constants are instances of the subclasses of this class.\n * Driver defines fixed number of members of each enumeration and seals the\n * enumeration class so that new members cannot be created.\n * @hideconstructor\n *\n */\nclass Enum {\n    constructor(ordinal, desc, name) {\n        //Prevent construction of new objects by the user\n        assert(!this.constructor._sealed);\n        if (ordinal != null) {\n            this._ordinal = ordinal;\n        } else {\n            if (this.constructor._ordinalSeq == null) {\n                this.constructor._ordinalSeq = 0;\n            }\n            this._ordinal = this.constructor._ordinalSeq++;\n        }\n        this._desc = desc;\n        this._name = name;\n    }\n\n    /**\n     * Name of the enumeration constant, usually the same as its symbol name.\n     * @type {string}\n     * @readonly\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * Numeric integer value of the enumeration constant.\n     * @type {number}\n     * @readonly\n     */\n    get ordinal() {\n        return this._ordinal;\n    }\n\n    /**\n     * Optional description of the enumeration constant.\n     * @type {string}\n     * @readonly\n     */\n    get description() {\n        return this._desc;\n    }\n\n    /**\n     * Returns string representation of enumeration constant.  Equivalent to\n     * <em>name</em> property.\n     * @returns {string}\n     */\n    toString() {\n        return this._name;\n    }\n\n    static get values() {\n        const enumClass = this;\n        const vals = [];\n        for(let val of Object.values(enumClass)) {\n            if (val instanceof enumClass) {\n                vals.push(val);\n            }\n        }\n        return vals;\n    }\n\n    static get names() {\n        return this.values.map(val => val.name);\n    }\n\n    static find(predicate) {\n        const enumClass = this;\n        for(let val of Object.values(enumClass)) {\n            if (val instanceof enumClass && predicate(val)) {\n                return val;\n            }\n        }\n    }\n\n    static fromOrdinal(n) {\n        const enumClass = this;\n        for(let val of Object.values(enumClass)) {\n            if (val instanceof enumClass && val.ordinal == n) {\n                return val;\n            }\n        }\n        throw new RangeError(\n            `Ordinal ${n} is not valid for ${enumClass.name} enumeration`);\n    }\n\n    static seal() {\n        const enumClass = this;\n        for(let [key, val] of Object.entries(enumClass)) {\n            if (val instanceof enumClass) {\n                if (!val._name) { //Assign name if was not specified\n                    val._name = key;\n                }\n                Object.freeze(val);\n            }\n        }\n        enumClass._sealed = true;\n        Object.freeze(enumClass);\n    }\n}\n\n/**\n * Service type is specified in the initial configuration used to create\n * {@link NoSQLClient} instance and indicates what kind of service the\n * driver will be using.  Currently supported values are\n * {@link ServiceType.CLOUDSIM}, {@link ServiceType.CLOUD} and\n * {@link ServiceType.KVSTORE}.  In addition to {@link ServiceType}\n * enumeration, these values may be specified as strings \"CLOUDSIM\", \"CLOUD\"\n * or \"KVSTORE\", case-insensitive.  This is useful if using JSON configuration\n * file.  If {@link ServiceType} is not present in the initial configuration,\n * the driver will try to deduce service type from the\n * information provided in authorization property {@link Config}#auth (see\n * {@link AuthConfig}) in the following way:\n * <ul>\n * <li>If {@link Config}#auth is undefined or null, the service type is\n * determined as follows: if {@link Config}#region is specified, the service\n * type defaults to {@link ServiceType.CLOUD}, otherwise it defaults to\n * {@link ServiceType.CLOUDSIM}\n * <li>If {@link Config}#auth contains <em>iam</em> property, the service\n * type is assumed to be {@link ServiceType.CLOUD}</li>\n * <li>If {@link Config}#auth constains <em>kvstore</em> property, the service\n * type is assumed to be {@link ServiceType.KVSTORE}.  Note that unless\n * {@link Config}#serviceType is explicitly specified, you may not specify\n * both <em>iam</em> and <em>kvstore</em> properties in {@link AuthConfig}\n * at the same time.  You may specify value <em>{}</em> (empty object) for\n * <em>kvstore</em> property to connect to non-secure kvstore, although it is\n * advisable to specify the service type explicitly in this case.  See\n * {@link ServiceType.KVSTORE}</li>\n * <li>If {@link Config}#auth does not contain either of the above properties,\n * the driver will check if it contains user-specified\n * {@link AuthorizationProvider} ({@link AuthConfig}#provider).  In this case\n * the service type will remain undefined and user-specified provider will be\n * used to control access to the service.  If there is no user-specified\n * {@link AuthorizationProvider} in {@link Config}#auth, this is equivalent to\n * {@link Config}#auth not defined and the service type will default to\n * {@link ServiceType.CLOUD} or {@link ServiceType.CLOUDSIM} as described\n * above</li>\n * </ul>\n *\n * @extends Enum\n * @hideconstructor\n *\n * @see {@link AuthConfig}\n * @see {@link AuthorizationProvider}\n */\nclass ServiceType extends Enum {}\n\n/**\n * Cloud Simulator, no authorization used.\n * @tutorial connect-cloud\n */\nServiceType.CLOUDSIM = new ServiceType(0);\n\n/**\n * Oracle NoSQL Cloud Service.  Authorization is managed by IAM.\n * @see {@link IAMConfig}\n * @tutorial connect-cloud\n */\nServiceType.CLOUD = new ServiceType(1);\n\n/**\n * On Premise Oracle NoSQL Database.  This includes both secure and non-secure\n * stores.  For secure store, authentication information must be provided in\n * {@link AuthConfig}#kvstore as {@link KVStoreAuthConfig}.  For non-secure\n * store, it is enough to specify {@link Config}#serviceType to be\n * {@link ServiceType.KVSTORE} without having {@link AuthConfig}#kvstore\n * property.\n * @see {@link KVStoreAuthConfig}\n * @tutorial connect-on-prem\n */\nServiceType.KVSTORE = new ServiceType(2);\n\n/**\n * @ignore\n */\nServiceType.MINICLOUD = new ServiceType(3); //internal use only\nServiceType.MINICLOUD._isInternal = true;\n\n/**\n * @ignore\n */\nServiceType.DEVPOD = new ServiceType(3); //internal use only\nServiceType.DEVPOD._isInternal = true;\n\nServiceType.seal();\n\n/**\n * Consistency is used to provide consistency guarantees for read operations.\n * <p>\n * {@link Consistency.ABSOLUTE} consistency may be specified to guarantee that\n * current values are read. {@link Consistency.EVENTUAL} consistency means\n * that the values read may be very slightly out of date.\n * {@link Consistency.ABSOLUTE} consistency results in higher cost, consuming\n * twice the number of read units for the same data relative to\n * {@link Consistency.EVENTUAL} consistency, and should only be used when\n * required.\n * </p>\n * <p>\n * It is possible to set a default Consistency for a {@link NoSQLClient}\n * instance by providing it in the initial configuration as\n * {@link Config}#consistency.  In JSON configuration file, you may use string\n * values such as \"EVENTUAL\" or \"ABSOLUTE\".  If no consistency is specified\n * for an operation and there is no default value,\n * {@link Consistency.EVENTUAL} is used.\n * </p>\n * <p>\n * Consistency can be specified in the options(<em>opt</em>) argument for all\n * read operations.\n * </p>\n * @extends Enum\n * @hideconstructor\n */\nclass Consistency extends Enum {}\n\n/**\n * Absolute consistency\n * @type {Consistency}\n */\nConsistency.ABSOLUTE = new Consistency(0);\n\n/**\n * Eventual consistency\n * @type {Consistency}\n */\nConsistency.EVENTUAL = new Consistency(1);\n\nConsistency.seal();\n\n/**\n * CapacityMode specifies the type of capacity that will be set on a table. It is\n * used in table creation and table capacity updates. See {@link TableLimits}.\n * <p>\n * Table capacity is only used in the NoSQL Cloud Service.\n * </p>\n * <p>\n * {@link CapacityMode.PROVISIONED} is the default mode. In this mode, the\n * application defines the specified maximum read and write throughput for\n * a table.\n * {@link CapacityMode.ON_DEMAND} mode allows for flexible throughput usage.\n * In this mode, only the maximum storage size is specified.\n * </p>\n * @extends Enum\n * @hideconstructor\n */\nclass CapacityMode extends Enum {}\n\n/**\n * Provisioned mode. This is the default.\n * @type {CapacityMode}\n * @since 5.3.0\n */\nCapacityMode.PROVISIONED = new CapacityMode(1);\n\n/**\n * On Demand mode.\n * @type {CapacityMode}\n * @since 5.3.0\n */\nCapacityMode.ON_DEMAND = new CapacityMode(2);\n\nCapacityMode.seal();\n\n//Not currently used by the driver.\n/** @ignore */\nclass ScanDirection extends Enum {}\nScanDirection.UNORDERED = new ScanDirection(0);\nScanDirection.FORWARD = new ScanDirection(1);\nScanDirection.REVERSE = new ScanDirection(2);\nScanDirection.seal();\n\n/**\n * Describes the current state of the table.  See\n * {@link NoSQLClient#tableDDL}.\n * @extends Enum\n * @hideconstructor\n */\nclass TableState extends Enum {}\n\n/**\n * The table is ready to be used. This is the steady state after creation or\n * modification.\n * @type TableState\n */\nTableState.ACTIVE = new TableState(0);\n\n/**\n * The table is being created and cannot yet be used.\n * @type TableState\n */\nTableState.CREATING = new TableState(1);\n\n/**\n * The table has been dropped or does not exist.\n * @type TableState\n */\nTableState.DROPPED = new TableState(2);\n\n/**\n * The table is being dropped and cannot be used.\n * @type TableState\n */\nTableState.DROPPING = new TableState(3);\n\n/**\n * The table is being updated. It is available for normal use, but additional\n * table modification operations are not permitted while the table is in this\n * state.\n * @type TableState\n */\nTableState.UPDATING = new TableState(4);\n\nTableState.seal();\n\n/**\n * On premise only.\n * <p>\n * Describes the current state of the operation performed by\n * {@link NoSQLClient#adminDDL}.\n * @extends Enum\n * @hideconstructor\n */\nclass AdminState extends Enum {}\n\n/**\n * Operation is complete and successful.\n * @type AdminState\n */\nAdminState.COMPLETE = new AdminState(0);\n\n/**\n * Operation is in progress.\n * @type AdminState\n */\nAdminState.IN_PROGRESS = new AdminState(1);\n\nAdminState.seal();\n\n/**\n * For now this is internal, but we may expose this enumeration\n * when we implement custom type mappings.\n * @ignore\n */\nclass DBType extends Enum {}\nDBType.ARRAY = new DBType(0);\nDBType.BINARY = new DBType(1);\nDBType.BOOLEAN = new DBType(2);\nDBType.DOUBLE = new DBType(3);\nDBType.INTEGER = new DBType(4);\nDBType.LONG = new DBType(5);\nDBType.MAP = new DBType(6);\nDBType.STRING = new DBType(7);\nDBType.TIMESTAMP = new DBType(8);\nDBType.NUMBER = new DBType(9);\nDBType.JSON_NULL = new DBType(10);\nDBType.NULL = new DBType(11);\nDBType.EMPTY = new DBType(12);\nDBType.seal();\n\n//Only used internally.  Not clear if some limits (in particular request\n//sizes) are specific to binary protocol.  If so, they could be moved there.\n\nconst Limits = {\n    REQUEST_SIZE: 2 * 1024 * 1024,\n    BATCH_REQUEST_SIZE: 25 * 1024 * 1024,\n    BATCH_OP_NUMBER: 50,\n    READ_KB: 2 * 1024,\n    WRITE_KB: 2 * 1024,\n    //Maximum timeout for single http request accepted by the proxy\n    MAX_REQUEST_TIMEOUT: 30000\n};\n\n//Only used internally by advanced query, should not show up in the results.\nconst EMPTY_VALUE = Symbol('EMPTY');\n\n//HTTP-related constants, only used internally\nconst HttpConstants = {\n    POST: 'POST',\n    GET: 'GET',\n    DELETE: 'DELETE',\n    PUT: 'PUT',\n    CONTENT_TYPE: 'Content-Type',\n    CONTENT_TYPE_LWR: 'content-type',\n    APPLICATION_JSON: 'application/json',\n    CONNECTION: 'Connection',\n    ACCEPT: 'Accept',\n    AUTHORIZATION: 'Authorization',\n    CONTENT_LENGTH: 'Content-Length',\n    CONTENT_LENGTH_LWR: 'content-length',\n    USER_AGENT: 'User-Agent',\n    CACHE_CONTROL: 'cache-control',\n    COOKIE: 'cookie',\n    SET_COOKIE: 'set-cookie',\n    HOST: 'host',\n    DATE: 'date',\n    X_DATE: 'x-date',\n    REQUEST_ID: 'x-nosql-request-id',\n    OPC_REQUEST_ID: 'opc-request-id',\n    DATA_PATH_NAME: 'data',\n    NOSQL_VERSION: 'V2',\n    NOSQL_PATH_NAME: 'nosql',\n    COMPARTMENT_ID: 'x-nosql-compartment-id',\n    NAMESPACE: 'x-nosql-default-ns',\n    REQUEST_TARGET: '(request-target)',\n    CONTENT_SHA256: 'x-content-sha256',\n    HTTP_OK: 200,\n    HTTP_BAD_REQUEST: 400,\n    HTTP_UNAUTHORIZED: 401,\n    HTTP_NOT_FOUND: 404,\n    HTTP_CONFLICT: 409,\n    HTTP_SERVER_ERROR: 500,\n    HTTP_UNAVAILABLE: 503\n};\n\nHttpConstants.NOSQL_PREFIX = HttpConstants.NOSQL_VERSION + '/' +\n    HttpConstants.NOSQL_PATH_NAME;\nHttpConstants.NOSQL_DATA_PATH = HttpConstants.NOSQL_PREFIX + '/' +\n    HttpConstants.DATA_PATH_NAME;\n\nconst PACKAGE_VERSION = require('../package.json').version;\ndelete require.cache[require.resolve('../package.json')];\n\nmodule.exports = {\n    Enum,\n    ServiceType,\n    Consistency,\n    CapacityMode,\n    ScanDirection,\n    TableState,\n    AdminState,\n    DBType,\n    Limits,\n    EMPTY_VALUE,\n    HttpConstants,\n    PACKAGE_VERSION\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}