{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst Enum = require('./constants').Enum;\nconst NoSQLArgumentError = require('./error').NoSQLArgumentError;\n\n/**\n * On premise only: see {@link Durability}\n * Defines the synchronization policy to be used when committing a\n * transaction. High levels of synchronization offer a greater guarantee\n * that the transaction is persistent to disk, but trade that off for\n * lower performance.\n * @extends Enum\n * @hideconstructor\n */\nclass SyncPolicy extends Enum {}\n\n/**\n * Write and synchronously flush the log on transaction commit.\n * Transactions exhibit all the ACID (atomicity, consistency,\n * isolation, and durability) properties.\n * @type {SyncPolicy}\n * @since 5.3.0\n */\nSyncPolicy.SYNC = new SyncPolicy(1);\n\n/**\n * Do not write or synchronously flush the log on transaction commit.\n * Transactions exhibit the ACI (atomicity, consistency, and isolation)\n * properties, but not D (durability); that is, database integrity will\n * be maintained, but if the application or system fails, it is\n * possible some number of the most recently committed transactions may\n * be undone during recovery. The number of transactions at risk is\n * governed by how many log updates can fit into the log buffer, how\n * often the operating system flushes dirty buffers to disk, and how\n * often log checkpoints occur.\n * @type {SyncPolicy}\n * @since 5.3.0\n */\nSyncPolicy.NO_SYNC = new SyncPolicy(2);\n\n/**\n * Write but do not synchronously flush the log on transaction commit.\n * Transactions exhibit the ACI (atomicity, consistency, and isolation)\n * properties, but not D (durability); that is, database integrity will\n * be maintained, but if the operating system fails, it is possible\n * some number of the most recently committed transactions may be\n * undone during recovery. The number of transactions at risk is\n * governed by how often the operating system flushes dirty buffers to\n * disk, and how often log checkpoints occur.\n * @type {SyncPolicy}\n * @since 5.3.0\n */\nSyncPolicy.WRITE_NO_SYNC = new SyncPolicy(3);\nSyncPolicy.seal();\n\n/**\n * On premise only: see {@link Durability}\n * A replicated environment makes it possible to increase an application's\n * transaction commit guarantees by committing changes to its replicas on\n * the network. ReplicaAckPolicy defines the policy for how such network\n * commits are handled.\n * @hideconstructor\n */\nclass ReplicaAckPolicy extends Enum {}\n\n/**\n * All replicas must acknowledge that they have committed the\n * transaction. This policy should be selected only if your replication\n * group has a small number of replicas, and those replicas are on\n * extremely reliable networks and servers.\n * @type {ReplicaAckPolicy}\n * @since 5.3.0\n */\nReplicaAckPolicy.ALL = new ReplicaAckPolicy(1);\n\n/**\n * No transaction commit acknowledgments are required and the master\n * will never wait for replica acknowledgments. In this case,\n * transaction durability is determined entirely by the type of commit\n * that is being performed on the master.\n * @type {ReplicaAckPolicy}\n * @since 5.3.0\n */\nReplicaAckPolicy.NONE = new ReplicaAckPolicy(2);\n\n/**\n * A simple majority of replicas must acknowledge that they have\n * committed the transaction. This acknowledgment policy, in\n * conjunction with an election policy which requires at least a simple\n * majority, ensures that the changes made by the transaction remains\n * durable if a new election is held.\n * @type {ReplicaAckPolicy}\n * @since 5.3.0\n */\nReplicaAckPolicy.SIMPLE_MAJORITY = new ReplicaAckPolicy(3);\nReplicaAckPolicy.seal();\n\n/**\n * @classdesc\n * On-premises service only.\n * Helper class that defines some useful {@link Durability} constants as well\n * as a method to create {@link Durability} instances. Note that durability\n * instance is a plain JavaScript object as described in {@link Durability}.\n * @hideconstructor\n * @see Durability\n */\nclass Durabilities {\n  /**\n   * A convenience constant that defines a durability policy with COMMIT_SYNC\n   * for Master commit synchronization.\n   * <p>\n   * The policies default to COMMIT_NO_SYNC for commits of replicated\n   * transactions that need acknowledgment and SIMPLE_MAJORITY for the\n   * acknowledgment policy.\n   * @type {Durability}\n   */\n  static COMMIT_SYNC = this.create(SyncPolicy.SYNC, SyncPolicy.NO_SYNC, ReplicaAckPolicy.SIMPLE_MAJORITY);\n\n  /**\n   * A convenience constant that defines a durability policy with\n   * COMMIT_NO_SYNC for Master commit synchronization.\n   * <p>\n   * The policies default to COMMIT_NO_SYNC for commits of replicated\n   * transactions that need acknowledgment and SIMPLE_MAJORITY for the\n   * acknowledgment policy.\n   * @type {Durability}\n   */\n  static COMMIT_NO_SYNC = this.create(SyncPolicy.NO_SYNC, SyncPolicy.NO_SYNC, ReplicaAckPolicy.SIMPLE_MAJORITY);\n\n  /**\n   * A convenience constant that defines a durability policy with\n   * COMMIT_WRITE_NO_SYNC for Master commit synchronization.\n   * <p>\n   * The policies default to COMMIT_NO_SYNC for commits of replicated\n   * transactions that need acknowledgment and SIMPLE_MAJORITY for the\n   * acknowledgment policy.\n   * @type {Durability}\n   */\n  static COMMIT_WRITE_NO_SYNC = this.create(SyncPolicy.WRITE_NO_SYNC, SyncPolicy.NO_SYNC, ReplicaAckPolicy.SIMPLE_MAJORITY);\n\n  /**\n   * Creates a {@link Durability} instance while validating the arguments\n   * passed.\n   * \n   * @param {SyncPolicy} masterSync Sync policy when committing transaction\n   * on the master node \n   * @param {SyncPolicy} replicaSync Sync policy when committing transaction\n   * at a replica node\n   * @param {ReplicaAckPolicy} replicaAck The acknowledgment policy used\n   * when obtaining transaction acknowledgments from replicas\n   * @returns {Durability} Durability object\n   * @throws {NoSQLArgumentError} If any of the provided values for\n   * <em>masterSync</em>, <em>replicaSync</em> or <em>replicaAck</em> is\n   * missing or invalid.\n   */\n  static create(masterSync, replicaSync, replicaAck) {\n    if (!(masterSync instanceof SyncPolicy)) {\n      throw new NoSQLArgumentError('Missing or invalid masterSync policy');\n    }\n    if (!(replicaSync instanceof SyncPolicy)) {\n      throw new NoSQLArgumentError('Missing or invalid replicaSync policy');\n    }\n    if (!(replicaAck instanceof ReplicaAckPolicy)) {\n      throw new NoSQLArgumentError('Missing or invalid replicaAck policy');\n    }\n    return {\n      masterSync,\n      replicaSync,\n      replicaAck\n    };\n  }\n}\nmodule.exports = {\n  SyncPolicy,\n  ReplicaAckPolicy,\n  Durabilities\n};","map":{"version":3,"names":["Enum","require","NoSQLArgumentError","SyncPolicy","SYNC","NO_SYNC","WRITE_NO_SYNC","seal","ReplicaAckPolicy","ALL","NONE","SIMPLE_MAJORITY","Durabilities","COMMIT_SYNC","create","COMMIT_NO_SYNC","COMMIT_WRITE_NO_SYNC","masterSync","replicaSync","replicaAck","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/durability.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst Enum = require('./constants').Enum;\nconst NoSQLArgumentError = require('./error').NoSQLArgumentError;\n\n/**\n * On premise only: see {@link Durability}\n * Defines the synchronization policy to be used when committing a\n * transaction. High levels of synchronization offer a greater guarantee\n * that the transaction is persistent to disk, but trade that off for\n * lower performance.\n * @extends Enum\n * @hideconstructor\n */\nclass SyncPolicy extends Enum {}\n\n/**\n * Write and synchronously flush the log on transaction commit.\n * Transactions exhibit all the ACID (atomicity, consistency,\n * isolation, and durability) properties.\n * @type {SyncPolicy}\n * @since 5.3.0\n */\nSyncPolicy.SYNC = new SyncPolicy(1);\n\n/**\n * Do not write or synchronously flush the log on transaction commit.\n * Transactions exhibit the ACI (atomicity, consistency, and isolation)\n * properties, but not D (durability); that is, database integrity will\n * be maintained, but if the application or system fails, it is\n * possible some number of the most recently committed transactions may\n * be undone during recovery. The number of transactions at risk is\n * governed by how many log updates can fit into the log buffer, how\n * often the operating system flushes dirty buffers to disk, and how\n * often log checkpoints occur.\n * @type {SyncPolicy}\n * @since 5.3.0\n */\nSyncPolicy.NO_SYNC = new SyncPolicy(2);\n\n/**\n * Write but do not synchronously flush the log on transaction commit.\n * Transactions exhibit the ACI (atomicity, consistency, and isolation)\n * properties, but not D (durability); that is, database integrity will\n * be maintained, but if the operating system fails, it is possible\n * some number of the most recently committed transactions may be\n * undone during recovery. The number of transactions at risk is\n * governed by how often the operating system flushes dirty buffers to\n * disk, and how often log checkpoints occur.\n * @type {SyncPolicy}\n * @since 5.3.0\n */\nSyncPolicy.WRITE_NO_SYNC = new SyncPolicy(3);\n\nSyncPolicy.seal();\n\n/**\n * On premise only: see {@link Durability}\n * A replicated environment makes it possible to increase an application's\n * transaction commit guarantees by committing changes to its replicas on\n * the network. ReplicaAckPolicy defines the policy for how such network\n * commits are handled.\n * @hideconstructor\n */\nclass ReplicaAckPolicy extends Enum {}\n\n/**\n * All replicas must acknowledge that they have committed the\n * transaction. This policy should be selected only if your replication\n * group has a small number of replicas, and those replicas are on\n * extremely reliable networks and servers.\n * @type {ReplicaAckPolicy}\n * @since 5.3.0\n */\nReplicaAckPolicy.ALL = new ReplicaAckPolicy(1);\n\n/**\n * No transaction commit acknowledgments are required and the master\n * will never wait for replica acknowledgments. In this case,\n * transaction durability is determined entirely by the type of commit\n * that is being performed on the master.\n * @type {ReplicaAckPolicy}\n * @since 5.3.0\n */\nReplicaAckPolicy.NONE = new ReplicaAckPolicy(2);\n\n/**\n * A simple majority of replicas must acknowledge that they have\n * committed the transaction. This acknowledgment policy, in\n * conjunction with an election policy which requires at least a simple\n * majority, ensures that the changes made by the transaction remains\n * durable if a new election is held.\n * @type {ReplicaAckPolicy}\n * @since 5.3.0\n */\nReplicaAckPolicy.SIMPLE_MAJORITY = new ReplicaAckPolicy(3);\n\nReplicaAckPolicy.seal();\n\n/**\n * @classdesc\n * On-premises service only.\n * Helper class that defines some useful {@link Durability} constants as well\n * as a method to create {@link Durability} instances. Note that durability\n * instance is a plain JavaScript object as described in {@link Durability}.\n * @hideconstructor\n * @see Durability\n */\nclass Durabilities {\n    \n    /**\n     * A convenience constant that defines a durability policy with COMMIT_SYNC\n     * for Master commit synchronization.\n     * <p>\n     * The policies default to COMMIT_NO_SYNC for commits of replicated\n     * transactions that need acknowledgment and SIMPLE_MAJORITY for the\n     * acknowledgment policy.\n     * @type {Durability}\n     */\n    static COMMIT_SYNC = this.create(SyncPolicy.SYNC,\n        SyncPolicy.NO_SYNC, ReplicaAckPolicy.SIMPLE_MAJORITY);\n \n    /**\n     * A convenience constant that defines a durability policy with\n     * COMMIT_NO_SYNC for Master commit synchronization.\n     * <p>\n     * The policies default to COMMIT_NO_SYNC for commits of replicated\n     * transactions that need acknowledgment and SIMPLE_MAJORITY for the\n     * acknowledgment policy.\n     * @type {Durability}\n     */\n    static COMMIT_NO_SYNC = this.create(SyncPolicy.NO_SYNC,\n        SyncPolicy.NO_SYNC, ReplicaAckPolicy.SIMPLE_MAJORITY);\n \n    /**\n     * A convenience constant that defines a durability policy with\n     * COMMIT_WRITE_NO_SYNC for Master commit synchronization.\n     * <p>\n     * The policies default to COMMIT_NO_SYNC for commits of replicated\n     * transactions that need acknowledgment and SIMPLE_MAJORITY for the\n     * acknowledgment policy.\n     * @type {Durability}\n     */\n    static COMMIT_WRITE_NO_SYNC = this.create(SyncPolicy.WRITE_NO_SYNC,\n        SyncPolicy.NO_SYNC, ReplicaAckPolicy.SIMPLE_MAJORITY);\n \n    /**\n     * Creates a {@link Durability} instance while validating the arguments\n     * passed.\n     * \n     * @param {SyncPolicy} masterSync Sync policy when committing transaction\n     * on the master node \n     * @param {SyncPolicy} replicaSync Sync policy when committing transaction\n     * at a replica node\n     * @param {ReplicaAckPolicy} replicaAck The acknowledgment policy used\n     * when obtaining transaction acknowledgments from replicas\n     * @returns {Durability} Durability object\n     * @throws {NoSQLArgumentError} If any of the provided values for\n     * <em>masterSync</em>, <em>replicaSync</em> or <em>replicaAck</em> is\n     * missing or invalid.\n     */\n    static create(masterSync, replicaSync, replicaAck) {\n        if (!(masterSync instanceof SyncPolicy)) {\n            throw new NoSQLArgumentError(\n                'Missing or invalid masterSync policy');\n        }\n        if (!(replicaSync instanceof SyncPolicy)) {\n            throw new NoSQLArgumentError(\n                'Missing or invalid replicaSync policy');\n        }\n        if (!(replicaAck instanceof ReplicaAckPolicy)) {\n            throw new NoSQLArgumentError(\n                'Missing or invalid replicaAck policy');\n        }\n        return {\n            masterSync,\n            replicaSync,\n            replicaAck\n        };\n    }\n}\n\nmodule.exports = {\n    SyncPolicy,\n    ReplicaAckPolicy,\n    Durabilities\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,IAAI;AACxC,MAAME,kBAAkB,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,kBAAkB;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASH,IAAI,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,UAAU,CAACC,IAAI,GAAG,IAAID,UAAU,CAAC,CAAC,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,UAAU,CAACE,OAAO,GAAG,IAAIF,UAAU,CAAC,CAAC,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,UAAU,CAACG,aAAa,GAAG,IAAIH,UAAU,CAAC,CAAC,CAAC;AAE5CA,UAAU,CAACI,IAAI,CAAC,CAAC;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,SAASR,IAAI,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAQ,gBAAgB,CAACC,GAAG,GAAG,IAAID,gBAAgB,CAAC,CAAC,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,gBAAgB,CAACE,IAAI,GAAG,IAAIF,gBAAgB,CAAC,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,gBAAgB,CAACG,eAAe,GAAG,IAAIH,gBAAgB,CAAC,CAAC,CAAC;AAE1DA,gBAAgB,CAACD,IAAI,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,YAAY,CAAC;EAEf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,WAAW,GAAG,IAAI,CAACC,MAAM,CAACX,UAAU,CAACC,IAAI,EAC5CD,UAAU,CAACE,OAAO,EAAEG,gBAAgB,CAACG,eAAe,CAAC;;EAEzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOI,cAAc,GAAG,IAAI,CAACD,MAAM,CAACX,UAAU,CAACE,OAAO,EAClDF,UAAU,CAACE,OAAO,EAAEG,gBAAgB,CAACG,eAAe,CAAC;;EAEzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOK,oBAAoB,GAAG,IAAI,CAACF,MAAM,CAACX,UAAU,CAACG,aAAa,EAC9DH,UAAU,CAACE,OAAO,EAAEG,gBAAgB,CAACG,eAAe,CAAC;;EAEzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,MAAMA,CAACG,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAE;IAC/C,IAAI,EAAEF,UAAU,YAAYd,UAAU,CAAC,EAAE;MACrC,MAAM,IAAID,kBAAkB,CACxB,sCAAsC,CAAC;IAC/C;IACA,IAAI,EAAEgB,WAAW,YAAYf,UAAU,CAAC,EAAE;MACtC,MAAM,IAAID,kBAAkB,CACxB,uCAAuC,CAAC;IAChD;IACA,IAAI,EAAEiB,UAAU,YAAYX,gBAAgB,CAAC,EAAE;MAC3C,MAAM,IAAIN,kBAAkB,CACxB,sCAAsC,CAAC;IAC/C;IACA,OAAO;MACHe,UAAU;MACVC,WAAW;MACXC;IACJ,CAAC;EACL;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAG;EACblB,UAAU;EACVK,gBAAgB;EAChBI;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}