{"ast":null,"code":"const readline=require(\"readline\");const rl=readline.createInterface({input:process.stdin,output:process.stdout});const server=require(\"./server.js\");const axios=require(\"axios\");// Import axios\nserver.listen(3000,()=>{console.log(\"Tasks API listening at http://localhost:3000\");commandEntry();});// Function to make GET requests with axios\nasync function query(path,dataToSend){try{const response=await axios.get(\"http://localhost:3000\".concat(path),{data:dataToSend});return response.data;}catch(error){console.error(\"Error:\",error.message);throw error;}}// Function to make POST requests with axios\nasync function add(path,id,title,content,infobox){const postData={id,title,content,infobox};try{const response=await axios.post(\"http://localhost:3000\".concat(path),postData,{headers:{\"Content-Type\":\"application/json\"}});console.log(\"Success: \".concat(JSON.stringify(response.data.result)));}catch(error){console.error(\"Error:\",error.message);throw error;}}// Function to make DELETE requests with axios\nasync function remove(id){const postData={id};try{const response=await axios.delete(\"http://localhost:3000/byid\",{data:postData,headers:{\"Content-Type\":\"application/json\"}});console.log(\"Success: \".concat(JSON.stringify(response.data.result)));}catch(error){console.error(\"Error:\",error.message);throw error;}}// Simplified version of askQuestion function\nfunction askQuestion(prompt){return new Promise(resolve=>{rl.question(prompt,answer=>{resolve(answer);});});}// Updated update function using axios\nasync function update(id,newData,prop){try{const row=await query(\"/byid\",{id});let updatedRow={...row};updatedRow[prop]=newData;// Update the specified property\nawait remove(id);// Delete the existing entry\nawait add(\"/add\",updatedRow.id,updatedRow.title,updatedRow.content,updatedRow.infobox);// Re-add with updated data\n}catch(error){console.error(\"Error updating data:\",error.message);}}// Function to get the highest ID\nasync function getHighestID(){try{const result=await query(\"/maxid\",{});return result.high;}catch(error){console.error(\"Error fetching highest ID:\",error.message);throw error;}}// Main command entry point\nasync function commandEntry(){const command=await askQuestion(\"Enter a command (add, query, delete, update, or stop): \");switch(command){case\"add\":const id=(await getHighestID())+1;const title=await askQuestion(\"Enter Title: \");const content=await askQuestion(\"Enter Content: \");const infobox=await askQuestion(\"Enter Infobox: \");await add(\"/add\",id,title,content,infobox);break;case\"query\":console.log(await query(\"/\",{}));break;case\"delete\":const deleteId=await askQuestion(\"Enter ID to delete: \");await remove(deleteId);break;case\"update\":const updateId=await askQuestion(\"Enter ID to update: \");const newData=await askQuestion(\"Enter new value: \");const prop=await askQuestion(\"Enter property to update: \");await update(updateId,newData,prop);break;default:console.log(\"Command not recognized\");}// Continue processing commands\n}module.exports={query,add,update};","map":{"version":3,"names":["readline","require","rl","createInterface","input","process","stdin","output","stdout","server","axios","listen","console","log","commandEntry","query","path","dataToSend","response","get","concat","data","error","message","add","id","title","content","infobox","postData","post","headers","JSON","stringify","result","remove","delete","askQuestion","prompt","Promise","resolve","question","answer","update","newData","prop","row","updatedRow","getHighestID","high","command","deleteId","updateId","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/src/middleware.js"],"sourcesContent":["const readline = require(\"readline\");\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n});\r\n\r\nconst server = require(\"./server.js\");\r\nconst axios = require(\"axios\"); // Import axios\r\nserver.listen(3000, () => {\r\n  console.log(`Tasks API listening at http://localhost:3000`);\r\n  commandEntry();\r\n});\r\n\r\n// Function to make GET requests with axios\r\nasync function query(path, dataToSend) {\r\n  try {\r\n    const response = await axios.get(`http://localhost:3000${path}`, {\r\n      data: dataToSend,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to make POST requests with axios\r\nasync function add(path, id, title, content, infobox) {\r\n  const postData = {\r\n    id,\r\n    title,\r\n    content,\r\n    infobox,\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post(`http://localhost:3000${path}`, postData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    console.log(`Success: ${JSON.stringify(response.data.result)}`);\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to make DELETE requests with axios\r\nasync function remove(id) {\r\n  const postData = { id };\r\n\r\n  try {\r\n    const response = await axios.delete(`http://localhost:3000/byid`, {\r\n      data: postData,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    console.log(`Success: ${JSON.stringify(response.data.result)}`);\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Simplified version of askQuestion function\r\nfunction askQuestion(prompt) {\r\n  return new Promise((resolve) => {\r\n    rl.question(prompt, (answer) => {\r\n      resolve(answer);\r\n    });\r\n  });\r\n}\r\n\r\n// Updated update function using axios\r\nasync function update(id, newData, prop) {\r\n  try {\r\n    const row = await query(\"/byid\", { id });\r\n    let updatedRow = { ...row };\r\n    updatedRow[prop] = newData; // Update the specified property\r\n    \r\n    await remove(id); // Delete the existing entry\r\n    await add(\"/add\", updatedRow.id, updatedRow.title, updatedRow.content, updatedRow.infobox); // Re-add with updated data\r\n  } catch (error) {\r\n    console.error(\"Error updating data:\", error.message);\r\n  }\r\n}\r\n\r\n// Function to get the highest ID\r\nasync function getHighestID() {\r\n  try {\r\n    const result = await query(\"/maxid\", {});\r\n    return result.high;\r\n  } catch (error) {\r\n    console.error(\"Error fetching highest ID:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Main command entry point\r\nasync function commandEntry() {\r\n  const command = await askQuestion(\"Enter a command (add, query, delete, update, or stop): \");\r\n  \r\n  switch (command) {\r\n    case \"add\":\r\n      const id = await getHighestID() + 1;\r\n      const title = await askQuestion(\"Enter Title: \");\r\n      const content = await askQuestion(\"Enter Content: \");\r\n      const infobox = await askQuestion(\"Enter Infobox: \");\r\n      await add(\"/add\", id, title, content, infobox);\r\n      break;\r\n    case \"query\":\r\n      console.log(await query(\"/\", {}));\r\n      break;\r\n    case \"delete\":\r\n      const deleteId = await askQuestion(\"Enter ID to delete: \");\r\n      await remove(deleteId);\r\n      break;\r\n    case \"update\":\r\n      const updateId = await askQuestion(\"Enter ID to update: \");\r\n      const newData = await askQuestion(\"Enter new value: \");\r\n      const prop = await askQuestion(\"Enter property to update: \");\r\n      await update(updateId, newData, prop);\r\n      break;\r\n    default:\r\n      console.log(\"Command not recognized\");\r\n  }\r\n// Continue processing commands\r\n}\r\nmodule.exports = {\r\n    query,\r\n    add,\r\n    update,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}