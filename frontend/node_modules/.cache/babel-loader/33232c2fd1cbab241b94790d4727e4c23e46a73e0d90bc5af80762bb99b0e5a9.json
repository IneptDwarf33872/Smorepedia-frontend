{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst OpCode = require('../binary_protocol/constants').OpCode;\nconst Protocol = require('./protocol');\nconst Fields = require('./constants').Fields;\nclass SystemRequestSerializer extends Protocol {\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    this.writeHeader(nw, OpCode.SYSTEM_REQUEST, serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    if (Buffer.isBuffer(req.stmt)) {\n      nw.writeBinaryField(Fields.STATEMENT, req.stmt);\n    } else {\n      const stmtBuf = Buffer.from(req.stmt);\n      try {\n        nw.writeBinaryField(Fields.STATEMENT, stmtBuf);\n      } finally {\n        stmtBuf.fill(0);\n      }\n    }\n    nw.endMapField();\n    nw.endMap();\n  }\n  static deserialize(dr, req) {\n    return this.deserializeSystemResult(dr, req);\n  }\n}\nclass SystemStatusSerializer extends Protocol {\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    this.writeHeader(nw, OpCode.SYSTEM_STATUS_REQUEST, serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    nw.writeStringField(Fields.OPERATION_ID, req.adminResult.operationId);\n    nw.writeStringField(Fields.STATEMENT, req.adminResult.statement);\n    nw.endMapField();\n    nw.endMap();\n  }\n  static deserialize(dr, req) {\n    return this.deserializeSystemResult(dr, req);\n  }\n}\nmodule.exports = {\n  SystemRequestSerializer,\n  SystemStatusSerializer\n};","map":{"version":3,"names":["OpCode","require","Protocol","Fields","SystemRequestSerializer","serialize","nw","req","serialVersion","startMap","writeHeader","SYSTEM_REQUEST","startMapField","PAYLOAD","Buffer","isBuffer","stmt","writeBinaryField","STATEMENT","stmtBuf","from","fill","endMapField","endMap","deserialize","dr","deserializeSystemResult","SystemStatusSerializer","SYSTEM_STATUS_REQUEST","writeStringField","OPERATION_ID","adminResult","operationId","statement","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/nson_protocol/admin.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst OpCode = require('../binary_protocol/constants').OpCode;\nconst Protocol = require('./protocol');\nconst Fields = require('./constants').Fields;\n\nclass SystemRequestSerializer extends Protocol {\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        this.writeHeader(nw, OpCode.SYSTEM_REQUEST, serialVersion, req);\n        nw.startMapField(Fields.PAYLOAD);\n\n        if (Buffer.isBuffer(req.stmt)) {\n            nw.writeBinaryField(Fields.STATEMENT, req.stmt);\n        } else {\n            const stmtBuf = Buffer.from(req.stmt);\n            try {\n                nw.writeBinaryField(Fields.STATEMENT, stmtBuf);\n            } finally {\n                stmtBuf.fill(0);\n            }\n        }\n\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static deserialize(dr, req) {\n        return this.deserializeSystemResult(dr, req);\n    }\n\n}\n\nclass SystemStatusSerializer extends Protocol {\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        this.writeHeader(nw, OpCode.SYSTEM_STATUS_REQUEST, serialVersion,\n            req);\n        nw.startMapField(Fields.PAYLOAD);\n        nw.writeStringField(Fields.OPERATION_ID, req.adminResult.operationId);\n        nw.writeStringField(Fields.STATEMENT, req.adminResult.statement);\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static deserialize(dr, req) {\n        return this.deserializeSystemResult(dr, req);\n    }\n\n}\n\nmodule.exports = {\n    SystemRequestSerializer,\n    SystemStatusSerializer\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,8BAA8B,CAAC,CAACD,MAAM;AAC7D,MAAME,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,MAAM,GAAGF,OAAO,CAAC,aAAa,CAAC,CAACE,MAAM;AAE5C,MAAMC,uBAAuB,SAASF,QAAQ,CAAC;EAE3C,OAAOG,SAASA,CAACC,EAAE,EAAEC,GAAG,EAAEC,aAAa,EAAE;IACrCF,EAAE,CAACG,QAAQ,CAAC,CAAC;IACb,IAAI,CAACC,WAAW,CAACJ,EAAE,EAAEN,MAAM,CAACW,cAAc,EAAEH,aAAa,EAAED,GAAG,CAAC;IAC/DD,EAAE,CAACM,aAAa,CAACT,MAAM,CAACU,OAAO,CAAC;IAEhC,IAAIC,MAAM,CAACC,QAAQ,CAACR,GAAG,CAACS,IAAI,CAAC,EAAE;MAC3BV,EAAE,CAACW,gBAAgB,CAACd,MAAM,CAACe,SAAS,EAAEX,GAAG,CAACS,IAAI,CAAC;IACnD,CAAC,MAAM;MACH,MAAMG,OAAO,GAAGL,MAAM,CAACM,IAAI,CAACb,GAAG,CAACS,IAAI,CAAC;MACrC,IAAI;QACAV,EAAE,CAACW,gBAAgB,CAACd,MAAM,CAACe,SAAS,EAAEC,OAAO,CAAC;MAClD,CAAC,SAAS;QACNA,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;MACnB;IACJ;IAEAf,EAAE,CAACgB,WAAW,CAAC,CAAC;IAChBhB,EAAE,CAACiB,MAAM,CAAC,CAAC;EACf;EAEA,OAAOC,WAAWA,CAACC,EAAE,EAAElB,GAAG,EAAE;IACxB,OAAO,IAAI,CAACmB,uBAAuB,CAACD,EAAE,EAAElB,GAAG,CAAC;EAChD;AAEJ;AAEA,MAAMoB,sBAAsB,SAASzB,QAAQ,CAAC;EAE1C,OAAOG,SAASA,CAACC,EAAE,EAAEC,GAAG,EAAEC,aAAa,EAAE;IACrCF,EAAE,CAACG,QAAQ,CAAC,CAAC;IACb,IAAI,CAACC,WAAW,CAACJ,EAAE,EAAEN,MAAM,CAAC4B,qBAAqB,EAAEpB,aAAa,EAC5DD,GAAG,CAAC;IACRD,EAAE,CAACM,aAAa,CAACT,MAAM,CAACU,OAAO,CAAC;IAChCP,EAAE,CAACuB,gBAAgB,CAAC1B,MAAM,CAAC2B,YAAY,EAAEvB,GAAG,CAACwB,WAAW,CAACC,WAAW,CAAC;IACrE1B,EAAE,CAACuB,gBAAgB,CAAC1B,MAAM,CAACe,SAAS,EAAEX,GAAG,CAACwB,WAAW,CAACE,SAAS,CAAC;IAChE3B,EAAE,CAACgB,WAAW,CAAC,CAAC;IAChBhB,EAAE,CAACiB,MAAM,CAAC,CAAC;EACf;EAEA,OAAOC,WAAWA,CAACC,EAAE,EAAElB,GAAG,EAAE;IACxB,OAAO,IAAI,CAACmB,uBAAuB,CAACD,EAAE,EAAElB,GAAG,CAAC;EAChD;AAEJ;AAEA2B,MAAM,CAACC,OAAO,GAAG;EACb/B,uBAAuB;EACvBuB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}