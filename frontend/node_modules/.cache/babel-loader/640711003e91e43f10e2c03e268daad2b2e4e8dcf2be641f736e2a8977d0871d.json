{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\nconst assert = require('assert');\nconst os = require('os');\nconst path = require('path');\nconst fsPromises = require('fs').promises;\nconst clearData = require('../../utils').clearData;\nconst readProfileSync = require('../../utils').readProfileSync;\nconst requireNoWP = require('../../utils').requireNoWP;\nconst NoSQLArgumentError = require('../../error').NoSQLArgumentError;\nconst NoSQLAuthorizationError = require('../../error').NoSQLAuthorizationError;\nconst Utils = require('./utils');\nconst DEFAULT_PROFILE_NAME = 'DEFAULT';\nconst FINGERPRINT_PROP = 'fingerprint';\nconst TENANCY_PROP = 'tenancy';\nconst USER_PROP = 'user';\nconst KEY_FILE_PROP = 'key_file';\nconst PASSPHRASE_PROP = 'pass_phrase';\nconst REGION_PROP = 'region';\nconst SESS_TOKEN_FILE_PROP = 'security_token_file';\n\n//Credentials sources, only for error reporing.\nconst AUTH_IAM_CONFIG = 'auth.iam section of the configuration';\nconst CREDS_PROVIDER_CREDS = 'credentials from credentials provider';\nclass IAMProfileProvider {\n  //creds contains required IAM credentials\n  //cfg and credsSource are only for error reporing\n  _initFromCreds(creds, cfg, credsSource) {\n    assert(creds != null);\n    if (creds.tenantId == null) {\n      throw new NoSQLArgumentError(`Missing required property \"tenantId\" in ${credsSource}`, cfg);\n    }\n    if (!Utils.isValidOcid(creds.tenantId)) {\n      throw new NoSQLArgumentError(`Property \"tenantId\" in ${credsSource} is not a valid OCID: \\\n${creds.tenantId}`);\n    }\n    this._tenantId = creds.tenantId;\n    if (creds.userId == null) {\n      throw new NoSQLArgumentError(`Missing required property \"userId\" in ${credsSource}`, cfg);\n    }\n    if (!Utils.isValidOcid(creds.userId)) {\n      throw new NoSQLArgumentError(`Property \"userId\" in ${credsSource} is not a valid OCID: \\\n${creds.userId}`, cfg);\n    }\n    this._userId = creds.userId;\n    if (creds.fingerprint == null) {\n      throw new NoSQLArgumentError(`Missing required property \"fingerprint\" in ${credsSource}`, cfg);\n    }\n    if (typeof creds.fingerprint !== 'string' || !creds.fingerprint.length) {\n      throw new NoSQLArgumentError(`Invalid value for property \"fingerprint\" in ${credsSource}: \\\n${creds.fingerprint}`, cfg);\n    }\n    this._fingerprint = creds.fingerprint;\n    this._keyId = `${this._tenantId}/${this._userId}/${this._fingerprint}`;\n    if (creds.privateKeyFile != null) {\n      if (typeof creds.privateKeyFile !== 'string' && !Buffer.isBuffer(creds.privateKeyFile)) {\n        throw new NoSQLArgumentError(`Invalid value for property \"privateKeyFile\" in \\\n${credsSource}: ${creds.privateKeyFile}`, cfg);\n      }\n      if (creds.privateKey != null) {\n        throw new NoSQLArgumentError(`May not specify both properties \"privateKeyFile\" and \\\n\"privateKey\" in ${credsSource}`, cfg);\n      }\n      this._pkFile = creds.privateKeyFile;\n    } else {\n      if (creds.privateKey == null) {\n        throw new NoSQLArgumentError(`Missing both properties \"privateKeyFile\" and \\\n\"privateKey\" in ${credsSource}`, cfg);\n      }\n      if (typeof creds.privateKey !== 'string' && !Buffer.isBuffer(creds.privateKey)) {\n        throw new NoSQLArgumentError(`Invalid value for property \\\n\"privateKey\" in ${credsSource}: ${creds.privateKey}`, cfg);\n      }\n      this._pkData = creds.privateKey;\n    }\n    if (creds.passphrase != null) {\n      if (typeof creds.passphrase !== 'string' && !Buffer.isBuffer(creds.passphrase)) {\n        throw new NoSQLArgumentError(`Invalid value for property \"passphrase\" in \\\n${credsSource}: ${creds.passphrase}`, cfg);\n      }\n      this._passphrase = creds.passphrase;\n    }\n  }\n  _initFromOCIConfig(profile, cfg) {\n    assert(profile != null && profile._ociConfigSrc);\n    if (!profile[TENANCY_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${TENANCY_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    if (!Utils.isValidOcid(profile[TENANCY_PROP])) {\n      throw new NoSQLArgumentError(`Property \"${TENANCY_PROP}\" in ${profile._ociConfigSrc} is \\\nnot a valid OCID: ${profile[TENANCY_PROP]}`, cfg);\n    }\n    this._tenantId = profile[TENANCY_PROP];\n    if (!profile[USER_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${USER_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    if (!Utils.isValidOcid(profile[USER_PROP])) {\n      throw new NoSQLArgumentError(`Property \"${USER_PROP}\" in \"${profile._ociConfigSrc}\" is \\\nnot a valid OCID: ${profile[USER_PROP]}`, cfg);\n    }\n    this._userId = profile[USER_PROP];\n    if (!profile[FINGERPRINT_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${KEY_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    this._fingerprint = profile[FINGERPRINT_PROP];\n    this._keyId = `${this._tenantId}/${this._userId}/${this._fingerprint}`;\n    if (!profile[KEY_FILE_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${KEY_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    this._pkFile = profile[KEY_FILE_PROP];\n    if (profile[PASSPHRASE_PROP]) {\n      this._passphrase = profile[PASSPHRASE_PROP];\n    }\n  }\n  constructor(creds, cfg) {\n    if (creds._ociConfigSrc) {\n      this._initFromOCIConfig(creds, cfg);\n    } else {\n      this._initFromCreds(creds, cfg, creds._fromCredsProvider ? CREDS_PROVIDER_CREDS : AUTH_IAM_CONFIG);\n    }\n  }\n  async _initPrivateKey() {\n    if (this._pkFile != null) {\n      this._privateKey = await Utils.privateKeyFromPEMFile(this._pkFile, this._passphrase);\n    } else {\n      this._privateKey = Utils.privateKeyFromPEM(this._pkData, this._passphrase);\n    }\n  }\n  async getProfile() {\n    if (this._privateKey == null) {\n      await this._initPrivateKey();\n    }\n    return {\n      keyId: this._keyId,\n      privateKey: this._privateKey,\n      tenantId: this._tenantId\n    };\n  }\n  close() {\n    //Ideally this._privateKey should be cleared as well, but cryto\n    //module does not currently have such API\n    clearData(this._passprase);\n  }\n}\nclass SessTokenProfileProvider {\n  constructor(profile, cfg) {\n    assert(profile != null && profile._ociConfigSrc);\n    if (!profile[TENANCY_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${TENANCY_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    if (!Utils.isValidOcid(profile[TENANCY_PROP])) {\n      throw new NoSQLArgumentError(`Property \"${TENANCY_PROP}\" in ${profile._ociConfigSrc} is \\\nnot a valid OCID: ${profile[TENANCY_PROP]}`, cfg);\n    }\n    this._tenantId = profile[TENANCY_PROP];\n    if (!profile[KEY_FILE_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${KEY_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    this._pkFile = profile[KEY_FILE_PROP];\n    if (profile[PASSPHRASE_PROP]) {\n      this._passphrase = profile[PASSPHRASE_PROP];\n    }\n    if (!profile[SESS_TOKEN_FILE_PROP]) {\n      throw new NoSQLArgumentError(`Missing required property \"${SESS_TOKEN_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n    }\n    this._sessTokenFile = profile[SESS_TOKEN_FILE_PROP];\n  }\n  async _initPrivateKey() {\n    if (this._pkFile != null) {\n      this._privateKey = await Utils.privateKeyFromPEMFile(this._pkFile, this._passphrase);\n    } else {\n      this._privateKey = Utils.privateKeyFromPEM(this._pkData, this._passphrase);\n    }\n  }\n  async _readSessToken() {\n    let data;\n    try {\n      data = await fsPromises.readFile(this._sessTokenFile, 'utf8');\n    } catch (err) {\n      throw NoSQLAuthorizationError.invalidArg(`Error retrieving security token from file \\\n${this._sessTokenFile}: ${err.message}`, err);\n    }\n    data = data.replace(/\\r?\\n/g, '');\n    if (!data) {\n      throw NoSQLAuthorizationError.invalidArg(`Security token from file ${this._sessTokenFile} is empty`);\n    }\n    return data;\n  }\n  async getProfile() {\n    if (this._privateKey == null) {\n      await this._initPrivateKey();\n    }\n    const token = await this._readSessToken();\n    return {\n      keyId: 'ST$' + token,\n      privateKey: this._privateKey,\n      tenantId: this._tenantId\n    };\n  }\n  close() {\n    clearData(this._passprase);\n  }\n}\nclass OCIConfigFileProvider {\n  constructor(opt, cfg, providerCons = IAMProfileProvider) {\n    assert(opt != null);\n    let configFile;\n    let profileName;\n    if (opt.configFile != null) {\n      if (typeof opt.configFile !== 'string' && !Buffer.isBuffer(opt.configFile)) {\n        throw new NoSQLArgumentError(`Invalid value for \\\nauth.iam.configFile: ${opt.configFile}`, cfg);\n      }\n      configFile = opt.configFile;\n    } else {\n      configFile = path.join(os.homedir(), '.oci', 'config');\n    }\n    if (opt.profileName != null) {\n      if (typeof opt.profileName !== 'string') {\n        throw new NoSQLArgumentError(`Invalid value for \\\nauth.iam.profileName: ${opt.profileName}`, cfg);\n      }\n      profileName = opt.profileName;\n    } else {\n      profileName = DEFAULT_PROFILE_NAME;\n    }\n    assert(providerCons != null);\n    this._providerCons = providerCons;\n\n    //Change to read oci config file only once in the constructor\n    const profile = this._getProfileSync(configFile, profileName, cfg);\n    this._provider = new providerCons(profile, cfg);\n    if (profile[REGION_PROP]) {\n      this._region = profile[REGION_PROP];\n    }\n  }\n  _getProfileSync(configFile, profileName, cfg) {\n    let profile;\n    try {\n      profile = readProfileSync(configFile, profileName);\n    } catch (err) {\n      throw NoSQLAuthorizationError.invalidArg(`Error retrieving \\\nprofile ${profileName} from config file ${configFile}`, err, cfg);\n    }\n    if (profile == null) {\n      throw NoSQLAuthorizationError.invalidArg(`Cannot find profile \\\n\"${profileName}\" in config file ${configFile}`, null, cfg);\n    }\n    profile._ociConfigSrc = `OCI config file \"${configFile}\", \\\nprofile \"${profileName}\"`;\n    return profile;\n  }\n  getProfile() {\n    assert(this._provider != null);\n    return this._provider.getProfile();\n  }\n  getRegion() {\n    return this._region;\n  }\n  close() {\n    if (this._provider != null) {\n      this._provider.close();\n    }\n  }\n}\nclass UserProfileProvider {\n  constructor(opt, cfg) {\n    assert(opt != null && 'credentialsProvider' in opt);\n    let credsProvider = opt.credentialsProvider;\n    if (typeof credsProvider === 'string') {\n      try {\n        credsProvider = requireNoWP(credsProvider);\n      } catch (err) {\n        throw new NoSQLArgumentError(`Error loading credentials \\\nprovider from module \"${credsProvider}\"`, cfg, err);\n      }\n    }\n    if (typeof credsProvider === 'object' && credsProvider != null) {\n      if (typeof credsProvider.loadCredentials !== 'function') {\n        throw new NoSQLArgumentError('Invalid value of \\\nauth.iam.credentialsProvider: does not contain loadCredentials method', cfg);\n      }\n      this._credsProvider = credsProvider;\n    } else if (typeof credsProvider === 'function') {\n      this._credsProvider = {\n        loadCredentials: credsProvider\n      };\n    } else {\n      throw new NoSQLArgumentError(`Invalid value of \\\nauth.iam.credentialsProvider: ${credsProvider}`, cfg);\n    }\n  }\n  async getProfile() {\n    let creds;\n    try {\n      creds = await this._credsProvider.loadCredentials();\n    } catch (err) {\n      throw NoSQLAuthorizationError.invalidArg('Error retrieving \\\ncredentials', err);\n    }\n    if (creds == null || typeof creds !== 'object') {\n      throw NoSQLAuthorizationError.invalidArg('Retrieved credentials \\\nare missing or invalid');\n    }\n    creds._fromCredsProvider = true;\n    let provider;\n    try {\n      provider = new IAMProfileProvider(creds);\n      return provider.getProfile();\n    } finally {\n      if (provider != null) {\n        provider.close();\n      }\n    }\n  }\n}\nmodule.exports = {\n  IAMProfileProvider,\n  SessTokenProfileProvider,\n  OCIConfigFileProvider,\n  UserProfileProvider\n};","map":{"version":3,"names":["assert","require","os","path","fsPromises","promises","clearData","readProfileSync","requireNoWP","NoSQLArgumentError","NoSQLAuthorizationError","Utils","DEFAULT_PROFILE_NAME","FINGERPRINT_PROP","TENANCY_PROP","USER_PROP","KEY_FILE_PROP","PASSPHRASE_PROP","REGION_PROP","SESS_TOKEN_FILE_PROP","AUTH_IAM_CONFIG","CREDS_PROVIDER_CREDS","IAMProfileProvider","_initFromCreds","creds","cfg","credsSource","tenantId","isValidOcid","_tenantId","userId","_userId","fingerprint","length","_fingerprint","_keyId","privateKeyFile","Buffer","isBuffer","privateKey","_pkFile","_pkData","passphrase","_passphrase","_initFromOCIConfig","profile","_ociConfigSrc","constructor","_fromCredsProvider","_initPrivateKey","_privateKey","privateKeyFromPEMFile","privateKeyFromPEM","getProfile","keyId","close","_passprase","SessTokenProfileProvider","_sessTokenFile","_readSessToken","data","readFile","err","invalidArg","message","replace","token","OCIConfigFileProvider","opt","providerCons","configFile","profileName","join","homedir","_providerCons","_getProfileSync","_provider","_region","getRegion","UserProfileProvider","credsProvider","credentialsProvider","loadCredentials","_credsProvider","provider","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/iam/profile.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\nconst assert = require('assert');\nconst os = require('os');\nconst path = require('path');\nconst fsPromises = require('fs').promises;\n\nconst clearData = require('../../utils').clearData;\nconst readProfileSync = require('../../utils').readProfileSync;\nconst requireNoWP = require('../../utils').requireNoWP;\nconst NoSQLArgumentError = require('../../error').NoSQLArgumentError;\nconst NoSQLAuthorizationError =\n    require('../../error').NoSQLAuthorizationError;\nconst Utils = require('./utils');\n\nconst DEFAULT_PROFILE_NAME = 'DEFAULT';\nconst FINGERPRINT_PROP = 'fingerprint';\nconst TENANCY_PROP = 'tenancy';\nconst USER_PROP = 'user';\nconst KEY_FILE_PROP = 'key_file';\nconst PASSPHRASE_PROP = 'pass_phrase';\nconst REGION_PROP = 'region';\nconst SESS_TOKEN_FILE_PROP = 'security_token_file';\n\n//Credentials sources, only for error reporing.\nconst AUTH_IAM_CONFIG = 'auth.iam section of the configuration';\nconst CREDS_PROVIDER_CREDS = 'credentials from credentials provider';\n\nclass IAMProfileProvider {\n\n    //creds contains required IAM credentials\n    //cfg and credsSource are only for error reporing\n    _initFromCreds(creds, cfg, credsSource) {\n        assert(creds != null);\n\n        if (creds.tenantId == null) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"tenantId\" in ${credsSource}`,\n                cfg);\n        }\n        if (!Utils.isValidOcid(creds.tenantId)) {\n            throw new NoSQLArgumentError(\n                `Property \"tenantId\" in ${credsSource} is not a valid OCID: \\\n${creds.tenantId}`);\n        }\n        this._tenantId = creds.tenantId;\n\n        if (creds.userId == null) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"userId\" in ${credsSource}`, cfg);\n        }\n        if (!Utils.isValidOcid(creds.userId)) {\n            throw new NoSQLArgumentError(\n                `Property \"userId\" in ${credsSource} is not a valid OCID: \\\n${creds.userId}`, cfg);\n        }\n        this._userId = creds.userId;\n\n        if (creds.fingerprint == null) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"fingerprint\" in ${credsSource}`,\n                cfg);\n        }\n        if (typeof creds.fingerprint !== 'string' ||\n            !creds.fingerprint.length) {\n            throw new NoSQLArgumentError(\n                `Invalid value for property \"fingerprint\" in ${credsSource}: \\\n${creds.fingerprint}`, cfg);\n        }\n        this._fingerprint = creds.fingerprint;\n\n        this._keyId =\n            `${this._tenantId}/${this._userId}/${this._fingerprint}`;\n\n        if (creds.privateKeyFile != null) {\n            if (typeof creds.privateKeyFile !== 'string' &&\n                !Buffer.isBuffer(creds.privateKeyFile)) {\n                throw new NoSQLArgumentError(\n                    `Invalid value for property \"privateKeyFile\" in \\\n${credsSource}: ${creds.privateKeyFile}`, cfg);\n            }\n            if (creds.privateKey != null) {\n                throw new NoSQLArgumentError(\n                    `May not specify both properties \"privateKeyFile\" and \\\n\"privateKey\" in ${credsSource}`, cfg);\n            }\n            this._pkFile = creds.privateKeyFile;\n        } else {\n            if (creds.privateKey == null) {\n                throw new NoSQLArgumentError(\n                    `Missing both properties \"privateKeyFile\" and \\\n\"privateKey\" in ${credsSource}`, cfg);\n            }\n            if (typeof creds.privateKey !== 'string' &&\n                !Buffer.isBuffer(creds.privateKey)) {\n                throw new NoSQLArgumentError(`Invalid value for property \\\n\"privateKey\" in ${credsSource}: ${creds.privateKey}`, cfg);\n            }\n            this._pkData = creds.privateKey;\n        }\n        if (creds.passphrase != null) {\n            if (typeof creds.passphrase !== 'string' &&\n                !Buffer.isBuffer(creds.passphrase)) {\n                throw new NoSQLArgumentError(\n                    `Invalid value for property \"passphrase\" in \\\n${credsSource}: ${creds.passphrase}`, cfg);\n            }\n            this._passphrase = creds.passphrase;\n        }\n    }\n\n    _initFromOCIConfig(profile, cfg) {\n        assert(profile != null && profile._ociConfigSrc);\n        \n        if (!profile[TENANCY_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${TENANCY_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        if (!Utils.isValidOcid(profile[TENANCY_PROP])) {\n            throw new NoSQLArgumentError(\n                `Property \"${TENANCY_PROP}\" in ${profile._ociConfigSrc} is \\\nnot a valid OCID: ${profile[TENANCY_PROP]}`, cfg);\n        }\n        this._tenantId = profile[TENANCY_PROP];\n\n        if (!profile[USER_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${USER_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        if (!Utils.isValidOcid(profile[USER_PROP])) {\n            throw new NoSQLArgumentError(\n                `Property \"${USER_PROP}\" in \"${profile._ociConfigSrc}\" is \\\nnot a valid OCID: ${profile[USER_PROP]}`, cfg);\n        }\n        this._userId = profile[USER_PROP];\n\n        if (!profile[FINGERPRINT_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${KEY_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        this._fingerprint = profile[FINGERPRINT_PROP];\n\n        this._keyId =\n            `${this._tenantId}/${this._userId}/${this._fingerprint}`;\n            \n        if (!profile[KEY_FILE_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${KEY_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        this._pkFile = profile[KEY_FILE_PROP];\n\n        if (profile[PASSPHRASE_PROP]) {\n            this._passphrase = profile[PASSPHRASE_PROP];\n        }\n    }\n\n    constructor(creds, cfg) {\n        if (creds._ociConfigSrc) {\n            this._initFromOCIConfig(creds, cfg);\n        } else {\n            this._initFromCreds(creds, cfg, creds._fromCredsProvider ?\n                CREDS_PROVIDER_CREDS : AUTH_IAM_CONFIG);\n        }\n    }\n\n    async _initPrivateKey() {\n        if (this._pkFile != null) {\n            this._privateKey = await Utils.privateKeyFromPEMFile(this._pkFile,\n                this._passphrase);\n        } else {\n            this._privateKey = Utils.privateKeyFromPEM(this._pkData,\n                this._passphrase);\n        }\n    }\n\n    async getProfile() {\n        if (this._privateKey == null) {\n            await this._initPrivateKey();\n        }\n        return {\n            keyId: this._keyId,\n            privateKey: this._privateKey,\n            tenantId: this._tenantId\n        };\n    }\n\n    close() {\n        //Ideally this._privateKey should be cleared as well, but cryto\n        //module does not currently have such API\n        clearData(this._passprase);\n    }\n\n}\n\nclass SessTokenProfileProvider {\n\n    constructor(profile, cfg) {\n        assert(profile != null && profile._ociConfigSrc);\n\n        if (!profile[TENANCY_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${TENANCY_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        if (!Utils.isValidOcid(profile[TENANCY_PROP])) {\n            throw new NoSQLArgumentError(\n                `Property \"${TENANCY_PROP}\" in ${profile._ociConfigSrc} is \\\nnot a valid OCID: ${profile[TENANCY_PROP]}`, cfg);\n        }\n        this._tenantId = profile[TENANCY_PROP];\n\n        if (!profile[KEY_FILE_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${KEY_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        this._pkFile = profile[KEY_FILE_PROP];\n\n        if (profile[PASSPHRASE_PROP]) {\n            this._passphrase = profile[PASSPHRASE_PROP];\n        }\n\n        if (!profile[SESS_TOKEN_FILE_PROP]) {\n            throw new NoSQLArgumentError(\n                `Missing required property \"${SESS_TOKEN_FILE_PROP}\" in \\\n${profile._ociConfigSrc}`, cfg);\n        }\n        this._sessTokenFile = profile[SESS_TOKEN_FILE_PROP];\n    }\n\n    async _initPrivateKey() {\n        if (this._pkFile != null) {\n            this._privateKey = await Utils.privateKeyFromPEMFile(this._pkFile,\n                this._passphrase);\n        } else {\n            this._privateKey = Utils.privateKeyFromPEM(this._pkData,\n                this._passphrase);\n        }\n    }\n\n    async _readSessToken() {\n        let data;\n        try {\n            data = await fsPromises.readFile(this._sessTokenFile, 'utf8');\n        } catch(err) {\n            throw NoSQLAuthorizationError.invalidArg(\n                `Error retrieving security token from file \\\n${this._sessTokenFile}: ${err.message}`, err);\n        }\n        data = data.replace(/\\r?\\n/g, '');\n        if (!data) {\n            throw NoSQLAuthorizationError.invalidArg(\n                `Security token from file ${this._sessTokenFile} is empty`);\n        }\n        return data;\n    }\n\n    async getProfile() {\n        if (this._privateKey == null) {\n            await this._initPrivateKey();\n        }\n        const token = await this._readSessToken();\n        return {\n            keyId: 'ST$' + token,\n            privateKey: this._privateKey,\n            tenantId: this._tenantId\n        };\n    }\n\n    close() {\n        clearData(this._passprase);\n    }\n\n}\n\nclass OCIConfigFileProvider {\n\n    constructor(opt, cfg, providerCons = IAMProfileProvider) {\n        assert(opt != null);\n        let configFile;\n        let profileName;\n\n        if (opt.configFile != null) {\n            if (typeof opt.configFile !== 'string' &&\n                !Buffer.isBuffer(opt.configFile)) {\n                throw new NoSQLArgumentError(`Invalid value for \\\nauth.iam.configFile: ${opt.configFile}`, cfg);\n            }\n            configFile = opt.configFile;\n        } else {\n            configFile = path.join(os.homedir(), '.oci', 'config');\n        }\n        if (opt.profileName != null) {\n            if (typeof opt.profileName !== 'string') {\n                throw new NoSQLArgumentError(`Invalid value for \\\nauth.iam.profileName: ${opt.profileName}`, cfg);\n            }\n            profileName = opt.profileName;\n        } else {\n            profileName = DEFAULT_PROFILE_NAME;\n        }\n\n        assert(providerCons != null);\n        this._providerCons = providerCons;\n        \n        //Change to read oci config file only once in the constructor\n        const profile = this._getProfileSync(configFile, profileName, cfg);\n        this._provider = new providerCons(profile, cfg);\n        if (profile[REGION_PROP]) {\n            this._region = profile[REGION_PROP];\n        }\n    }\n\n    _getProfileSync(configFile, profileName, cfg) {\n        let profile;\n        try {\n            profile = readProfileSync(configFile, profileName);\n        } catch(err) {\n            throw NoSQLAuthorizationError.invalidArg(`Error retrieving \\\nprofile ${profileName} from config file ${configFile}`, err, cfg);\n        }\n        if (profile == null) {\n            throw NoSQLAuthorizationError.invalidArg(`Cannot find profile \\\n\"${profileName}\" in config file ${configFile}`, null, cfg);\n        }\n\n        profile._ociConfigSrc = `OCI config file \"${configFile}\", \\\nprofile \"${profileName}\"`;\n        return profile;\n    }\n\n    getProfile() {\n        assert(this._provider != null);\n        return this._provider.getProfile();\n    }\n\n    getRegion() {\n        return this._region;\n    }\n\n    close() {\n        if (this._provider != null) {\n            this._provider.close();\n        }\n    }\n}\n\nclass UserProfileProvider {\n\n    constructor(opt, cfg) {\n        assert (opt != null && 'credentialsProvider' in opt);\n        let credsProvider = opt.credentialsProvider;\n        if (typeof credsProvider === 'string') {\n            try {\n                credsProvider = requireNoWP(credsProvider);\n            } catch(err) {\n                throw new NoSQLArgumentError(`Error loading credentials \\\nprovider from module \"${credsProvider}\"`, cfg, err);\n            }\n        }\n        if (typeof credsProvider === 'object' && credsProvider != null) {\n            if (typeof credsProvider.loadCredentials !== 'function') {\n                throw new NoSQLArgumentError('Invalid value of \\\nauth.iam.credentialsProvider: does not contain loadCredentials method', cfg);\n            }\n            this._credsProvider = credsProvider;\n        } else if (typeof credsProvider === 'function') {\n            this._credsProvider = { loadCredentials: credsProvider };\n        } else {\n            throw new NoSQLArgumentError(`Invalid value of \\\nauth.iam.credentialsProvider: ${credsProvider}`, cfg);\n        }\n    }\n\n    async getProfile() {\n        let creds;\n        try {\n            creds = await this._credsProvider.loadCredentials();\n        } catch(err) {\n            throw NoSQLAuthorizationError.invalidArg('Error retrieving \\\ncredentials', err);\n        }\n        if (creds == null || typeof creds !== 'object') {\n            throw NoSQLAuthorizationError.invalidArg('Retrieved credentials \\\nare missing or invalid');\n        }\n        creds._fromCredsProvider = true;\n\n        let provider;\n        try {\n            provider = new IAMProfileProvider(creds);\n            return provider.getProfile();\n        } finally {\n            if (provider != null) {\n                provider.close();\n            }\n        }\n    }\n\n}\n\nmodule.exports = {\n    IAMProfileProvider,\n    SessTokenProfileProvider,\n    OCIConfigFileProvider,\n    UserProfileProvider\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}