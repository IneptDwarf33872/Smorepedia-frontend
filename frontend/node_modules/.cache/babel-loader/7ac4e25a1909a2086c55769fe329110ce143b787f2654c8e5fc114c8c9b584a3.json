{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst EMPTY_VALUE = require('../constants').EMPTY_VALUE;\nfunction isNumeric(ctx, val) {\n  return typeof val === 'number' || typeof val === 'bigint' || ctx._dbNumber != null && ctx._dbNumber.isInstance(val);\n}\nfunction resBuf2MapKey(buf) {\n  //to be improved\n  return buf.buffer.toString('latin1', 0, buf.length);\n}\nfunction sizeof(ctx, val) {\n  if (val == null || val == EMPTY_VALUE) {\n    return 0;\n  }\n  switch (typeof val) {\n    case 'boolean':\n      return 4;\n    case 'number':\n      return 8;\n    case 'bigint':\n      //From here:\n      //https://stackoverflow.com/questions/54297544/v8-bigint-size-in-memory\n      //We should not have any bigint greater than 64 bits.\n      return 24;\n    case 'string':\n      return 2 * val.length;\n    case 'object':\n      {\n        if (Buffer.isBuffer(val)) {\n          return val.length;\n        }\n        if (val instanceof Date) {\n          return 8; //rough estimate from testing\n        }\n        if (ctx._dbNumber != null && ctx._dbNumber.isInstance(val)) {\n          //rough estimate for now, can be improved\n          return sizeof(ctx, ctx._dbNumber.stringValue(val));\n        }\n        let size = 0;\n        if (Array.isArray(val)) {\n          for (let i = 0; i < val.length; i++) {\n            size += sizeof(ctx, val[i]);\n          }\n        } else {\n          let ents = val instanceof Map ? val.entries() : Object.entries(val);\n          for (let ent of ents) {\n            const key = ent[0];\n            assert(typeof key === 'string');\n            size += 2 * key.length + sizeof(ctx, ent[1]);\n          }\n        }\n        return size;\n      }\n    default:\n      assert(false);\n  }\n}\n\n//Ideally we should iterate only over sorting columns, but currently the\n//server does not convert EMPTY to null in any column when sorting takes\n//place, so we have to check all the columns.\n//We use undefined for SQL NULL.\nfunction convertEmptyToNull(row) {\n  for (let key in row) {\n    if (row[key] === EMPTY_VALUE) {\n      row[key] = undefined;\n    }\n  }\n}\n\n//Make unique representation of numeric value so that values that are\n//query-equal are represented identically - this is to create unique string\n//key for grouping and duplicate elimination. Represent numerics as following:\n//1) If the value fits into JS number losslessly, represent as JS number.\n//2) If the value is of type bigint and cannot be represented as JS safe\n//integer, represent as dbNumber if dbNumber is defined, otherwise represent\n//as bigint.\n//3) Otherwise, if dbNumber is defined, represent as dbNumber.\n//Note that for simplicity we don't use bigint representation if dbNumber is\n//defined, this is to avoid checking and conversion from dbNumber to bigint.\nfunction normalizeNumeric(val, opt) {\n  if (typeof val === 'bigint') {\n    const numVal = Number(val);\n    return BigInt(numVal) === val ? numVal : opt._dbNumber ? opt._dbNumber.create(val.toString()) : val;\n  }\n  if (!opt._dbNumber || !opt._dbNumber.isInstance(val)) {\n    return val;\n  }\n  const numVal = opt._dbNumber.numberValue(val);\n  return opt._dbNumber.valuesEqual(val, numVal) ? numVal : val;\n}\nmodule.exports = {\n  isNumeric,\n  resBuf2MapKey,\n  sizeof,\n  convertEmptyToNull,\n  normalizeNumeric\n};","map":{"version":3,"names":["assert","require","EMPTY_VALUE","isNumeric","ctx","val","_dbNumber","isInstance","resBuf2MapKey","buf","buffer","toString","length","sizeof","Buffer","isBuffer","Date","stringValue","size","Array","isArray","i","ents","Map","entries","Object","ent","key","convertEmptyToNull","row","undefined","normalizeNumeric","opt","numVal","Number","BigInt","create","numberValue","valuesEqual","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/query/utils.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst EMPTY_VALUE = require('../constants').EMPTY_VALUE;\n\nfunction isNumeric(ctx, val) {\n    return typeof val === 'number' || typeof val === 'bigint' ||\n        (ctx._dbNumber != null && ctx._dbNumber.isInstance(val));\n}\n\nfunction resBuf2MapKey(buf) {\n    //to be improved\n    return buf.buffer.toString('latin1', 0, buf.length);\n}\n\nfunction sizeof(ctx, val) {\n    if (val == null || val == EMPTY_VALUE) {\n        return 0;\n    }\n    switch(typeof val) {\n    case 'boolean':\n        return 4;\n    case 'number':\n        return 8;\n    case 'bigint':\n        //From here:\n        //https://stackoverflow.com/questions/54297544/v8-bigint-size-in-memory\n        //We should not have any bigint greater than 64 bits.\n        return 24;\n    case 'string':\n        return 2 * val.length;\n    case 'object': {\n        if (Buffer.isBuffer(val)) {\n            return val.length;\n        }\n        if (val instanceof Date) {\n            return 8; //rough estimate from testing\n        }\n        if (ctx._dbNumber != null && ctx._dbNumber.isInstance(val)) {\n            //rough estimate for now, can be improved\n            return sizeof(ctx, ctx._dbNumber.stringValue(val));\n        }\n        let size = 0;\n        if (Array.isArray(val)) {\n            for(let i = 0; i < val.length; i++) {\n                size += sizeof(ctx, val[i]);\n            }\n        } else {\n            let ents = val instanceof Map ? val.entries() :\n                Object.entries(val);\n            for(let ent of ents) {\n                const key = ent[0];\n                assert(typeof key === 'string');\n                size += 2 * key.length + sizeof(ctx, ent[1]);\n            }\n        }\n        return size;\n    }\n    default:\n        assert(false);\n    }\n}\n\n//Ideally we should iterate only over sorting columns, but currently the\n//server does not convert EMPTY to null in any column when sorting takes\n//place, so we have to check all the columns.\n//We use undefined for SQL NULL.\nfunction convertEmptyToNull(row) {\n    for(let key in row) {\n        if (row[key] === EMPTY_VALUE) {\n            row[key] = undefined;\n        }\n    }\n}\n\n//Make unique representation of numeric value so that values that are\n//query-equal are represented identically - this is to create unique string\n//key for grouping and duplicate elimination. Represent numerics as following:\n//1) If the value fits into JS number losslessly, represent as JS number.\n//2) If the value is of type bigint and cannot be represented as JS safe\n//integer, represent as dbNumber if dbNumber is defined, otherwise represent\n//as bigint.\n//3) Otherwise, if dbNumber is defined, represent as dbNumber.\n//Note that for simplicity we don't use bigint representation if dbNumber is\n//defined, this is to avoid checking and conversion from dbNumber to bigint.\nfunction normalizeNumeric(val, opt) {\n    if (typeof val === 'bigint') {\n        const numVal = Number(val);\n        return BigInt(numVal) === val ? numVal :\n            (opt._dbNumber ? opt._dbNumber.create(val.toString()) : val);\n    }\n    if (!opt._dbNumber || !opt._dbNumber.isInstance(val)) {\n        return val;\n    }\n    const numVal = opt._dbNumber.numberValue(val);\n    return opt._dbNumber.valuesEqual(val, numVal) ? numVal : val;\n}\n\nmodule.exports = {\n    isNumeric,\n    resBuf2MapKey,\n    sizeof,\n    convertEmptyToNull,\n    normalizeNumeric\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}