{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst util = require('util');\nconst NoSQLQueryError = require('../error').NoSQLQueryError;\nconst PlanIterator = require('./common').PlanIterator;\nconst compareRows = require('./compare').compareRows;\nconst sizeof = require('./utils').sizeof;\nconst convertEmptyToNull = require('./utils').convertEmptyToNull;\n\n/**\n * Sorts MapValues based on their values on a specified set of top-level\n * fields. It is used by the driver to implement the geo_near function,\n * which sorts results by distance.\n */\nclass SortIterator extends PlanIterator {\n  constructor(qpExec, step) {\n    super(qpExec, step);\n    this._inputIter = qpExec.makeIterator(step.input);\n    this._rows = [];\n    if (step.countMem) {\n      this._mem = 0;\n    }\n    this._curr = -1;\n  }\n  static validateStep(step) {\n    if (!step.input) {\n      throw NoSQLQueryError.illegalState('Missing input iterator for \\\nSORT');\n    }\n  }\n  unsupportedComp(val) {\n    return this.illegalArg(`Sort expression returns value not suitable \\\nfor comparison: ${util.inspect(val)}`);\n  }\n  async next() {\n    if (this._curr === -1) {\n      while (await this._inputIter.next()) {\n        const row = this._inputIter.result;\n        this._rows.push(row);\n        if (this._step.countMem) {\n          const mem = sizeof(this, row);\n          this._mem += mem;\n          this._qpExec.incMem(mem);\n        }\n      }\n      if (this._qpExec._needUserCont) {\n        return false;\n      }\n      this._rows.sort((row1, row2) => compareRows(this, row1, row2, this._step.sortSpecs));\n      this._curr = 0;\n    }\n    if (this._curr < this._rows.length) {\n      const res = this._rows[this._curr];\n      convertEmptyToNull(res);\n      this._rows[this._curr++] = null; //release memory for the row\n      this.result = res;\n      return true;\n    }\n    return false;\n  }\n  reset() {\n    this._rows = [];\n    this._curr = -1;\n    if (this._step.countMem) {\n      this._qpExec.decMem(this._mem);\n      this._mem = 0;\n    }\n  }\n}\nSortIterator._isAsync = true;\nmodule.exports = SortIterator;","map":{"version":3,"names":["util","require","NoSQLQueryError","PlanIterator","compareRows","sizeof","convertEmptyToNull","SortIterator","constructor","qpExec","step","_inputIter","makeIterator","input","_rows","countMem","_mem","_curr","validateStep","illegalState","unsupportedComp","val","illegalArg","inspect","next","row","result","push","_step","mem","_qpExec","incMem","_needUserCont","sort","row1","row2","sortSpecs","length","res","reset","decMem","_isAsync","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/query/sort.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst util = require('util');\nconst NoSQLQueryError = require('../error').NoSQLQueryError;\nconst PlanIterator = require('./common').PlanIterator;\nconst compareRows = require('./compare').compareRows;\nconst sizeof = require('./utils').sizeof;\nconst convertEmptyToNull = require('./utils').convertEmptyToNull;\n\n/**\n * Sorts MapValues based on their values on a specified set of top-level\n * fields. It is used by the driver to implement the geo_near function,\n * which sorts results by distance.\n */\nclass SortIterator extends PlanIterator {\n\n    constructor(qpExec, step) {\n        super(qpExec, step);\n        this._inputIter = qpExec.makeIterator(step.input);\n        this._rows = [];\n        if (step.countMem) {\n            this._mem = 0;\n        }\n        this._curr = -1;\n    }\n\n    static validateStep(step) {\n        if (!step.input) {\n            throw NoSQLQueryError.illegalState('Missing input iterator for \\\nSORT');\n        }\n    }\n\n    unsupportedComp(val) {\n        return this.illegalArg(`Sort expression returns value not suitable \\\nfor comparison: ${util.inspect(val)}`);\n    }\n\n    async next() {\n        if (this._curr === -1) {\n            while(await this._inputIter.next()) {\n                const row = this._inputIter.result;\n                this._rows.push(row);\n                if (this._step.countMem) {\n                    const mem = sizeof(this, row);\n                    this._mem += mem;\n                    this._qpExec.incMem(mem);\n                }\n            }\n            if (this._qpExec._needUserCont) {\n                return false;\n            }\n            this._rows.sort((row1, row2) =>\n                compareRows(this, row1, row2, this._step.sortSpecs));\n            this._curr = 0;\n        }\n        if (this._curr < this._rows.length) {\n            const res = this._rows[this._curr];\n            convertEmptyToNull(res);\n            this._rows[this._curr++] = null; //release memory for the row\n            this.result = res;\n            return true;\n        }\n        return false;\n    }\n\n    reset() {\n        this._rows = [];\n        this._curr = -1;\n        if (this._step.countMem) {\n            this._qpExec.decMem(this._mem);\n            this._mem = 0;\n        }\n    }\n\n}\n\nSortIterator._isAsync = true;\n\nmodule.exports = SortIterator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}