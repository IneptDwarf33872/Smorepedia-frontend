{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teddy\\\\Desktop\\\\VSCodeProjects\\\\Smorepedia\\\\smoresapp\\\\src\\\\pages\\\\PageNormal.js\";\nimport React, { useState } from 'react';\nimport './PageNormal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst input = `\n{^Header 1^} = h2\nHey im teddy and im writing a paragraph.Coolthings.\n\nCooltgihina.\n\n{Header 2} = h3\nParagraph 2 line 1.\nParagraph 2 line 2.\n\nParagraph 3.\n\n`;\nconst infobox = [];\n//asidhashdhaohdlkh  \n//{History} \n//hkjagkdgkajsgdj\n//jdkljsahdjhakjd\nconst subsections = [];\nlet numofobjects = 0;\nconst readInput = input1 => {\n  //  let sections = [];\n\n  let currentHeader = \"\";\n  let currentParagraph;\n  let headerflag = true;\n  let inHeader = false;\n  let currentText = \"\";\n  for (let i = 0; i < input.length; i++) {\n    const char = input1[i];\n    if (!inHeader) {\n      if (char === \"{\") {\n        inHeader = true;\n        subsections.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this));\n        currentHeader = \"\";\n        currentText = \"\";\n      } else if (i + 1 < input1.length && char === '\\n') {\n        subsections.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this));\n        subsections.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n        //Someone shrink this god damn br\n        );\n        currentText = \"\";\n      } else {\n        currentText += char;\n      }\n    } else {\n      //reset header\n      if (char === \"^\") {\n        //{ followed by ^}\n        headerflag = false;\n      } else if (char === \"}\") {\n        inHeader = false;\n        if (!(currentHeader.trim() === \"\")) {\n          if (!headerflag) {\n            headerflag = true;\n            subsections.push( /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: currentHeader\n            }, numofobjects, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this));\n          } else {\n            subsections.push(\n            /*#__PURE__*/\n            //add to subsections array\n            _jsxDEV(\"h3\", {\n              children: currentHeader\n            }, numofobjects, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this));\n          }\n        }\n      } else {\n        currentHeader += char; //add char to header if not { or }\n      }\n    }\n  }\n  return subsections;\n};\nconst result = readInput(input);\nconsole.log(result);\nfunction PageNormal() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"All\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Click Me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), subsections.map((element, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_c = PageNormal;\nexport default PageNormal;\nvar _c;\n$RefreshReg$(_c, \"PageNormal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","input","infobox","subsections","numofobjects","readInput","input1","currentHeader","currentParagraph","headerflag","inHeader","currentText","i","length","char","push","children","fileName","_jsxFileName","lineNumber","columnNumber","trim","result","console","log","PageNormal","className","map","element","index","Fragment","_c","$RefreshReg$"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/src/pages/PageNormal.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport './PageNormal.css'\r\n\r\nconst input = `\r\n{^Header 1^} = h2\r\nHey im teddy and im writing a paragraph.Coolthings.\r\n\r\nCooltgihina.\r\n\r\n{Header 2} = h3\r\nParagraph 2 line 1.\r\nParagraph 2 line 2.\r\n\r\nParagraph 3.\r\n\r\n`;\r\nconst infobox = [\r\n\r\n\r\n];\r\n//asidhashdhaohdlkh  \r\n//{History} \r\n//hkjagkdgkajsgdj\r\n//jdkljsahdjhakjd\r\nconst subsections = [\r\n\r\n\r\n];\r\nlet numofobjects = 0;\r\nconst readInput = (input1) => {\r\n  //  let sections = [];\r\n \r\n    let currentHeader = \"\";\r\n    let currentParagraph;\r\n    let headerflag = true;\r\n    let inHeader = false;\r\n    let currentText = \"\";\r\n    for (let i = 0; i < input.length; i++){\r\n        const char = input1[i];\r\n        if(!inHeader){\r\n            if (char === \"{\"){\r\n             inHeader = true;\r\n             subsections.push(\r\n                <p>\r\n                    {currentText}\r\n                </p>\r\n             );\r\n             \r\n            currentHeader = \"\";\r\n             currentText = \"\";\r\n            }else if(i + 1 < input1.length && char === '\\n'){\r\n                subsections.push(\r\n                    <p>\r\n                    {currentText}\r\n                    </p>\r\n                );\r\n                subsections.push(\r\n                    <br/>\r\n                    //Someone shrink this god damn br\r\n                );\r\n                currentText = \"\";\r\n            }else{\r\n\r\n                currentText += char;\r\n            }\r\n        }else{\r\n            //reset header\r\n            if (char === \"^\"){ //{ followed by ^}\r\n                headerflag = false;\r\n                \r\n            } else if (char === \"}\"){\r\n                inHeader = false;\r\n                if(!(currentHeader.trim() === \"\")){\r\n                    if(!headerflag){\r\n                        headerflag = true;\r\n                        subsections.push(\r\n                            <h2 key={numofobjects}> \r\n                            {currentHeader}\r\n                            </h2>\r\n                         )\r\n                    }else{\r\n                        subsections.push(              //add to subsections array\r\n                            <h3 key={numofobjects}>  \r\n                            {currentHeader}\r\n                            </h3>\r\n                        )\r\n                    }\r\n                }\r\n            } else {\r\n                currentHeader += char;             //add char to header if not { or }\r\n            }    \r\n        }\r\n    }\r\n    return subsections\r\n};\r\nconst result = readInput(input);\r\nconsole.log(result);\r\n\r\n\r\nfunction PageNormal() {\r\n    return (\r\n    <div className='All'>\r\n        <div className='content'>\r\n            <button >\r\n                Click Me\r\n            </button>\r\n        {subsections.map((element, index) => (\r\n        <React.Fragment key={index}>\r\n          {element}\r\n        </React.Fragment>\r\n      ))}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PageNormal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}