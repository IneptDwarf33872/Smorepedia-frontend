{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst HttpConstants = require('../constants').HttpConstants;\nconst NoSQLServiceError = require('../error').NoSQLServiceError;\nconst NoSQLTimeoutError = require('../error').NoSQLTimeoutError;\nconst promisified = require('../utils').promisified;\nconst DEFAULT_DELAY_MS = 1000;\nclass HttpClient {\n  constructor(opt, isHttps = true) {\n    this._httpMod = require(isHttps ? 'https' : 'http');\n    if (opt != null) {\n      this._agent = new this._httpMod.Agent(opt);\n    } else {\n      this._agent = this._httpMod.globalAgent;\n    }\n  }\n  _getBasicAuth(clientId, secret) {\n    let b;\n    try {\n      //secret is stored as Buffer\n      b = Buffer.concat([Buffer.from(clientId), Buffer.from(':'), secret]);\n      return 'Basic ' + b.toString('base64');\n    } finally {\n      if (b) {\n        b.fill(0);\n      }\n    }\n  }\n  _request(req, callback) {\n    if (!(req.url instanceof URL)) {\n      req.url = new URL(req.url);\n    }\n    const httpOpt = {\n      hostname: req.url.hostname,\n      port: req.url.port,\n      path: req.url.pathname + req.url.search,\n      method: req.method,\n      headers: req.headers,\n      agent: this._agent,\n      timeout: req.timeout\n    };\n    if (!httpOpt.headers) {\n      httpOpt.headers = {};\n    }\n    httpOpt.headers[HttpConstants.HOST] = req.url.host;\n    if (!httpOpt.headers[HttpConstants.CONNECTION]) {\n      httpOpt.headers[HttpConstants.CONNECTION] = 'keep-alive';\n    }\n    if (!httpOpt.headers[HttpConstants.CACHE_CONTROL]) {\n      httpOpt.headers[HttpConstants.CACHE_CONTROL] = 'no-store';\n    }\n    if (req.auth) {\n      httpOpt.headers[HttpConstants.AUTHORIZATION] = req.auth;\n    } else if (!httpOpt.headers[HttpConstants.AUTHORIZATION]) {\n      assert(req.clientId && req.secret);\n      httpOpt.headers[HttpConstants.AUTHORIZATION] = this._getBasicAuth(req.clientId, req.secret);\n    }\n    if (req.contentType) {\n      httpOpt.headers[HttpConstants.CONTENT_TYPE] = req.contentType;\n    }\n    let payload = req.payload;\n    if (payload) {\n      if (!Buffer.isBuffer(payload) && typeof payload !== 'string') {\n        payload = JSON.stringify(payload);\n      }\n      httpOpt.headers[HttpConstants.CONTENT_LENGTH] = Buffer.byteLength(payload);\n    }\n    const doOnce = () => {\n      const httpReq = this._httpMod.request(httpOpt, res => {\n        res.setEncoding('utf8');\n        let body = '';\n        res.on('data', chunk => {\n          body += chunk;\n        });\n        res.on('end', () => {\n          if (res.statusCode >= HttpConstants.HTTP_SERVER_ERROR && Date.now() - startTime <= req.timeout) {\n            numRetries++;\n            return setTimeout(doOnce, DEFAULT_DELAY_MS);\n          }\n          if (res.statusCode >= 200 && res.statusCode <= 299) {\n            return callback(null, body);\n          }\n          const err = new NoSQLServiceError(res, body);\n          if (res.statusCode >= HttpConstants.HTTP_SERVER_ERROR) {\n            return callback(new NoSQLTimeoutError(req.timeout, numRetries, null, err));\n          }\n          callback(err);\n        });\n      });\n      httpReq.on('error', err => {\n        //May need to check for the type of error\n        if (Date.now() - startTime <= req.timeout) {\n          numRetries++;\n          setTimeout(doOnce, DEFAULT_DELAY_MS);\n        } else {\n          callback(new NoSQLTimeoutError(req.timeout, numRetries, null, err));\n        }\n      });\n      if (payload) {\n        httpReq.write(payload);\n      }\n      httpReq.end();\n    };\n\n    //To offset for waiting for retry\n    const startTime = Date.now() - DEFAULT_DELAY_MS;\n    let numRetries = 1;\n    doOnce();\n  }\n  request(req) {\n    return promisified(this, this._request, req);\n  }\n  shutdown() {\n    this._agent.destroy();\n  }\n}\nmodule.exports = HttpClient;","map":{"version":3,"names":["assert","require","HttpConstants","NoSQLServiceError","NoSQLTimeoutError","promisified","DEFAULT_DELAY_MS","HttpClient","constructor","opt","isHttps","_httpMod","_agent","Agent","globalAgent","_getBasicAuth","clientId","secret","b","Buffer","concat","from","toString","fill","_request","req","callback","url","URL","httpOpt","hostname","port","path","pathname","search","method","headers","agent","timeout","HOST","host","CONNECTION","CACHE_CONTROL","auth","AUTHORIZATION","contentType","CONTENT_TYPE","payload","isBuffer","JSON","stringify","CONTENT_LENGTH","byteLength","doOnce","httpReq","request","res","setEncoding","body","on","chunk","statusCode","HTTP_SERVER_ERROR","Date","now","startTime","numRetries","setTimeout","err","write","end","shutdown","destroy","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/auth/http_client.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst HttpConstants = require('../constants').HttpConstants;\nconst NoSQLServiceError = require('../error').NoSQLServiceError;\nconst NoSQLTimeoutError = require('../error').NoSQLTimeoutError;\nconst promisified = require('../utils').promisified;\n\nconst DEFAULT_DELAY_MS = 1000;\n\nclass HttpClient {\n\n    constructor(opt, isHttps = true) {\n        this._httpMod = require(isHttps ? 'https': 'http');\n        if (opt != null) {\n            this._agent = new this._httpMod.Agent(opt);\n        }\n        else {\n            this._agent = this._httpMod.globalAgent;\n        }\n    }\n    \n    _getBasicAuth(clientId, secret) {\n        let b;\n        try {\n            //secret is stored as Buffer\n            b = Buffer.concat([Buffer.from(clientId), Buffer.from(':'),\n                secret]);\n            return 'Basic ' + b.toString('base64');\n        } finally {\n            if (b) {\n                b.fill(0);\n            }\n        }\n    }\n\n    _request(req, callback) {\n        if (!(req.url instanceof URL)) {\n            req.url = new URL(req.url);\n        }\n\n        const httpOpt = {\n            hostname: req.url.hostname,\n            port: req.url.port,\n            path: req.url.pathname + req.url.search,\n            method: req.method,\n            headers: req.headers,\n            agent: this._agent,\n            timeout: req.timeout\n        };\n\n        if (!httpOpt.headers) {\n            httpOpt.headers = {};\n        }\n        httpOpt.headers[HttpConstants.HOST] = req.url.host;\n        if (!httpOpt.headers[HttpConstants.CONNECTION]) {\n            httpOpt.headers[HttpConstants.CONNECTION] = 'keep-alive';\n        }\n        if (!httpOpt.headers[HttpConstants.CACHE_CONTROL]) {\n            httpOpt.headers[HttpConstants.CACHE_CONTROL] = 'no-store';\n        }\n        if (req.auth) {\n            httpOpt.headers[HttpConstants.AUTHORIZATION] = req.auth;\n        } else if (!httpOpt.headers[HttpConstants.AUTHORIZATION]) {\n            assert(req.clientId && req.secret);\n            httpOpt.headers[HttpConstants.AUTHORIZATION] = this._getBasicAuth(\n                req.clientId, req.secret);\n        }\n        if (req.contentType) {\n            httpOpt.headers[HttpConstants.CONTENT_TYPE] = req.contentType;\n        }\n        let payload = req.payload;\n        if (payload) {\n            if (!Buffer.isBuffer(payload) && typeof payload !== 'string') {\n                payload = JSON.stringify(payload);\n            }\n            httpOpt.headers[HttpConstants.CONTENT_LENGTH] =\n                Buffer.byteLength(payload);\n        }\n\n        const doOnce = () => {\n            const httpReq = this._httpMod.request(httpOpt, (res) => {\n                res.setEncoding('utf8');\n                let body = '';\n                res.on('data', (chunk) => {\n                    body += chunk;\n                });\n                res.on('end', () => {\n                    if (res.statusCode >= HttpConstants.HTTP_SERVER_ERROR &&\n                        Date.now() - startTime <= req.timeout) {\n                        numRetries++;\n                        return setTimeout(doOnce, DEFAULT_DELAY_MS);\n                    }\n                    if (res.statusCode >= 200 && res.statusCode <= 299) {\n                        return callback(null, body);\n                    }\n                    const err = new NoSQLServiceError(res, body);\n                    if (res.statusCode >= HttpConstants.HTTP_SERVER_ERROR) {\n                        return callback(new NoSQLTimeoutError(req.timeout,\n                            numRetries, null, err));\n                    }\n                    callback(err);\n                });\n            });\n            httpReq.on('error', (err) => {\n                //May need to check for the type of error\n                if (Date.now() - startTime <= req.timeout) {\n                    numRetries++;\n                    setTimeout(doOnce, DEFAULT_DELAY_MS);\n                } else {\n                    callback(new NoSQLTimeoutError(req.timeout, numRetries,\n                        null, err));\n                }\n            });\n            if (payload) {\n                httpReq.write(payload);\n            }\n            httpReq.end();\n        };\n\n        //To offset for waiting for retry\n        const startTime = Date.now() - DEFAULT_DELAY_MS;\n        let numRetries = 1;\n        doOnce();\n    }\n\n    request(req) {\n        return promisified(this, this._request, req);\n    }\n\n    shutdown() {\n        this._agent.destroy();\n    }\n\n}\n\nmodule.exports = HttpClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}