{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst ErrorCode = require('../error_code');\nconst NoSQLError = require('../error').NoSQLError;\nconst NoSQLArgumentError = require('../error').NoSQLArgumentError;\nconst Consistency = require('../constants').Consistency;\nconst SyncPolicy = require('../durability').SyncPolicy;\nconst ReplicaAckPolicy = require('../durability').ReplicaAckPolicy;\nconst Limits = require('../constants').Limits;\nconst Config = require('../config');\nconst isPosInt32 = require('../utils').isPosInt32;\nconst isPlainObject = require('../utils').isPlainObject;\nconst hasOwnProperty = require('../utils').hasOwnProperty;\nclass Op {\n  static _chkTblName(req) {\n    if (!req.tableName || typeof req.tableName !== 'string') {\n      throw new NoSQLArgumentError('Missing or invalid table name', req);\n    }\n  }\n  static _notSuppByProto(desc, suppVer, req) {\n    throw NoSQLError.create(ErrorCode.OPERATION_NOT_SUPPORTED, \"\".concat(desc, \" is not supported because it requires minimum protocol version \").concat(suppVer, \".  The service is running protocol version \").concat(req._serialVersion), null, req);\n  }\n  static _chkProtoVer(desc, suppVer, req) {\n    if (req._serialVersion < suppVer) {\n      throw this._notSuppByProto(desc, suppVer, req);\n    }\n  }\n  static _chkKey(req) {\n    if (typeof req.key === 'string') {\n      try {\n        req.key = JSON.parse(req.key);\n      } catch (err) {\n        throw new NoSQLArgumentError('Invalid JSON key', req, err);\n      }\n    }\n    if (!isPlainObject(req.key)) {\n      throw new NoSQLArgumentError('Invalid or missing key', req);\n    }\n  }\n  static _chkRow(req) {\n    if (typeof req.row === 'string') {\n      try {\n        req.row = JSON.parse(req.row);\n      } catch (err) {\n        throw new NoSQLArgumentError('Invalid JSON row', req, err);\n      }\n    }\n    if (!isPlainObject(req.row)) {\n      throw new NoSQLArgumentError('Invalid or missing row', req);\n    }\n  }\n  static _chkConsistency(req) {\n    if (!(req.opt.consistency instanceof Consistency)) {\n      throw new NoSQLArgumentError('Invalid consistency', req);\n    }\n  }\n  static _chkMatchVersion(req) {\n    if (req.opt.matchVersion != null && !(req.opt.matchVersion instanceof Buffer)) {\n      throw new NoSQLArgumentError('matchVersion must be instance of Buffer', req);\n    }\n  }\n  static _chkContinuationKey(req) {\n    const cc = req.opt.continuationKey;\n    if (cc != null && !Buffer.isBuffer(cc) && !cc[Op.ccAsObj]) {\n      throw new NoSQLArgumentError('Invalid continuation key', req);\n    }\n  }\n  static _validateDelay(req) {\n    if (!isPosInt32(req.opt.delay)) {\n      throw new NoSQLArgumentError('Invalid delay', req);\n    }\n    if (req.opt.timeout < req.opt.delay) {\n      throw new NoSQLArgumentError('Timeout cannot be less than delay', req);\n    }\n  }\n  static _validateFieldRange(req) {\n    const fr = req.opt.fieldRange;\n    if (fr == null) {\n      return;\n    }\n    if (typeof fr !== 'object') {\n      throw new NoSQLArgumentError('Invalid field range', req);\n    }\n    if (typeof fr.fieldName !== 'string' || !fr.fieldName.length) {\n      throw new NoSQLArgumentError('Invalid field name in field range', req);\n    }\n    if (fr.startWith == null && fr.startAfter == null && fr.endWith == null && fr.endBefore == null) {\n      throw new NoSQLArgumentError('Missing bounds in field range');\n    }\n    if (fr.startWith != null && fr.startAfter != null || fr.endWith != null && fr.endBefore != null) {\n      throw new NoSQLArgumentError('Both inclusive and exclusive bound \\\nspecified for one end of field range');\n    }\n  }\n\n  //Here we will conver the value to Date so that we don't have to do this\n  //again during serialization.  We accept any valid Date values as well as\n  //any number or string value passed to Date constructor (we will use\n  //the value from the resulting Date.getTime()).  Javascript Date range is\n  //+-100000 days since/before epoch, which is subset of java.util.Date\n  //range so we should be ok on the server side.\n  static _validateDateField(req, obj, field) {\n    if (obj[field] == null) {\n      return;\n    }\n    const d = obj[field];\n    //Date constructor accepts other types such as arrays but we don't\n    //allow this.\n    const v = d instanceof Date ? d : new Date(typeof d === 'number' || typeof d === 'string' ? d : NaN);\n    if (!Number.isFinite(v.getTime())) {\n      // NaN for invalid date\n      throw new NoSQLArgumentError(\"Invalid \".concat(field, \" value\"), req);\n    }\n    obj[field] = v;\n  }\n  static _validateOpt(req) {\n    //Check that opt did not specify properties that it is not allowed\n    //to override\n    for (let key of this.NO_OVERRIDE_OPTS) {\n      if (hasOwnProperty(req.opt, key)) {\n        throw new NoSQLArgumentError(\"Options may not override \".concat(key), req);\n      }\n    }\n  }\n  static _validateTimeout(req) {\n    if (!isPosInt32(req.opt.timeout)) {\n      throw new NoSQLArgumentError(\"Invalid timeout: \".concat(req.opt.timeout), req);\n    }\n  }\n  static _validateDurability(req) {\n    if (req.opt == null || req.opt.durability == null) {\n      return;\n    }\n    if (!(req.opt.durability.masterSync instanceof SyncPolicy)) {\n      throw new NoSQLArgumentError(\"Invalid durability.masterSync: \".concat(req.opt.durability.masterSync), req);\n    }\n    if (!(req.opt.durability.replicaSync instanceof SyncPolicy)) {\n      throw new NoSQLArgumentError(\"Invalid durability.replicaSync: \".concat(req.opt.durability.replicaSync), req);\n    }\n    if (!(req.opt.durability.replicaAck instanceof ReplicaAckPolicy)) {\n      throw new NoSQLArgumentError(\"Invalid durability.replicaAck: \".concat(req.opt.durability.replicaAck), req);\n    }\n  }\n  static _validateRequest(req) {\n    this._validateOpt(req);\n    this._validateTimeout(req);\n    //set timeout to use for single request (vs timeout across retries)\n    req.opt.requestTimeout = Math.min(req.opt.timeout, Limits.MAX_REQUEST_TIMEOUT);\n  }\n  static _validateReadRequest(req) {\n    this._validateRequest(req);\n    this._chkTblName(req);\n    this._chkConsistency(req);\n  }\n  static _validateWriteRequest(req, isSubRequest) {\n    if (!isSubRequest) {\n      this._validateRequest(req);\n      this._chkTblName(req);\n    } else {\n      this._validateOpt(req);\n    }\n    this._validateDurability(req);\n  }\n  static get REQUEST_SIZE_LIMIT() {\n    return Limits.REQUEST_SIZE;\n  }\n  static _chkRequestSizeLimit(req, len) {\n    if (len > this.REQUEST_SIZE_LIMIT) {\n      throw new NoSQLError(ErrorCode.REQUEST_SIZE_LIMIT_EXCEEDED, \"Request size \".concat(len, \" exceeds the limit of \") + \"\".concat(this.REQUEST_SIZE_LIMIT), null, req);\n    }\n  }\n  static chkRequestSizeLimit(pm, buf, req) {\n    this._chkRequestSizeLimit(req, pm.getContentLength(buf));\n  }\n  static serialize(pm, buf, req) {\n    const writer = pm.getWriter(buf);\n    pm.startWrite(writer, req);\n    const serializer = pm.serializer(this.name);\n    assert(serializer != null);\n    serializer.serialize(writer, req, req._serialVersion);\n    this.chkRequestSizeLimit(pm, buf, req);\n  }\n  static deserialize(pm, buf, req) {\n    const reader = pm.getReader(buf);\n    pm.startRead(reader, req);\n    const serializer = pm.serializer(this.name);\n    assert(serializer != null);\n    return serializer.deserialize(reader, req, req._serialVersion);\n  }\n  static applyDefaults(req, def) {\n    req.opt = Config.inheritOpt(req.opt, def, req);\n  }\n  static validate() {}\n  static onResult(client, req, res) {\n    if (res.consumedCapacity) {\n      client.emit('consumedCapacity', res.consumedCapacity, req);\n    }\n    //query topology may be received by any dml/query result\n    if (res._topoInfo && (!client._config._topoInfo || client._config._topoInfo.seqNum < res._topoInfo.seqNum)) {\n      client._config._topoInfo = res._topoInfo;\n    }\n  }\n\n  //Subclasses may provide req as an argument if needed\n  static shouldRetry() {\n    return true;\n  }\n\n  //The following are used by rate limiter\n\n  static get supportsRateLimiting() {\n    return false;\n  }\n  static getTableName(req) {\n    return req.tableName;\n  }\n  static doesReads() {\n    return false;\n  }\n  static doesWrites() {\n    return false;\n  }\n\n  //Cloud only. Requests that may require cross-region auth in the proxy\n  //have to have their content signed (via \"x-content-sha256\" header).\n  static needsContentSigned() {\n    return false;\n  }\n\n  //The reason for dealing with protocol versions here is to abstract this\n  //logic from HttpClient, because now we have to deal with both serial\n  //version and query version. Prepare and query operations can override\n  //the 2 methods below to add code to deal with query version change (it\n  //also allows for operation-specific versioning of other operations if\n  //ever needed).\n\n  static setProtocolVersion(client, req) {\n    req._serialVersion = client._pm.serialVersion;\n  }\n\n  //Returns true if the operation can be retried immediately because we\n  //received UNSUPPORTED_PROTOCOL error.\n  static handleUnsupportedProtocol(client, req, err) {\n    //Check if we got UNSUPPORTED_PROTOCOL error and can can retry with\n    //older protocol, in which case we can immediately retry (otherwise\n    //use retry handler as usual).\n    if (err.errorCode === ErrorCode.UNSUPPORTED_PROTOCOL) {\n      if (!client._decrementSerialVersion(req._serialVersion)) {\n        throw err;\n      }\n      return true;\n    }\n    return false;\n  }\n  static protocolChanged(client, req) {\n    return req._serialVersion !== client._pm.serialVersion;\n  }\n}\n\n//These parameters have to be specified in initial configuration and may not\n//be overriden in options.\nOp.NO_OVERRIDE_OPTS = ['serviceType', 'retry', 'auth'];\n\n//For advanced queries and other possible cases where continuation key is\n//an object, this allows us to validate that user did not supply a bogus\n//value that could cause internal failures down the line\nOp.ccAsObj = Symbol('ccAsObj');\nmodule.exports = Op;","map":{"version":3,"names":["assert","require","ErrorCode","NoSQLError","NoSQLArgumentError","Consistency","SyncPolicy","ReplicaAckPolicy","Limits","Config","isPosInt32","isPlainObject","hasOwnProperty","Op","_chkTblName","req","tableName","_notSuppByProto","desc","suppVer","create","OPERATION_NOT_SUPPORTED","concat","_serialVersion","_chkProtoVer","_chkKey","key","JSON","parse","err","_chkRow","row","_chkConsistency","opt","consistency","_chkMatchVersion","matchVersion","Buffer","_chkContinuationKey","cc","continuationKey","isBuffer","ccAsObj","_validateDelay","delay","timeout","_validateFieldRange","fr","fieldRange","fieldName","length","startWith","startAfter","endWith","endBefore","_validateDateField","obj","field","d","v","Date","NaN","Number","isFinite","getTime","_validateOpt","NO_OVERRIDE_OPTS","_validateTimeout","_validateDurability","durability","masterSync","replicaSync","replicaAck","_validateRequest","requestTimeout","Math","min","MAX_REQUEST_TIMEOUT","_validateReadRequest","_validateWriteRequest","isSubRequest","REQUEST_SIZE_LIMIT","REQUEST_SIZE","_chkRequestSizeLimit","len","REQUEST_SIZE_LIMIT_EXCEEDED","chkRequestSizeLimit","pm","buf","getContentLength","serialize","writer","getWriter","startWrite","serializer","name","deserialize","reader","getReader","startRead","applyDefaults","def","inheritOpt","validate","onResult","client","res","consumedCapacity","emit","_topoInfo","_config","seqNum","shouldRetry","supportsRateLimiting","getTableName","doesReads","doesWrites","needsContentSigned","setProtocolVersion","_pm","serialVersion","handleUnsupportedProtocol","errorCode","UNSUPPORTED_PROTOCOL","_decrementSerialVersion","protocolChanged","Symbol","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/ops/op.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst ErrorCode = require('../error_code');\nconst NoSQLError = require('../error').NoSQLError;\nconst NoSQLArgumentError = require('../error').NoSQLArgumentError;\nconst Consistency = require('../constants').Consistency;\nconst SyncPolicy = require('../durability').SyncPolicy;\nconst ReplicaAckPolicy = require('../durability').ReplicaAckPolicy;\nconst Limits = require('../constants').Limits;\nconst Config = require('../config');\nconst isPosInt32 = require('../utils').isPosInt32;\nconst isPlainObject = require('../utils').isPlainObject;\nconst hasOwnProperty = require('../utils').hasOwnProperty;\n\nclass Op {\n\n    static _chkTblName(req) {\n        if (!req.tableName || typeof req.tableName !== 'string') {\n            throw new NoSQLArgumentError('Missing or invalid table name',\n                req);\n        }\n    }\n\n    static _notSuppByProto(desc, suppVer, req) {\n        throw NoSQLError.create(ErrorCode.OPERATION_NOT_SUPPORTED,\n            `${desc} is not supported because it requires minimum \\\nprotocol version ${suppVer}.  The service is running protocol version \\\n${req._serialVersion}`, null, req);\n    }\n\n    static _chkProtoVer(desc, suppVer, req) {\n        if (req._serialVersion < suppVer) {\n            throw this._notSuppByProto(desc, suppVer, req);\n        }\n    }\n\n    static _chkKey(req) {\n        if (typeof req.key === 'string') {\n            try {\n                req.key = JSON.parse(req.key);\n            } catch(err) {\n                throw new NoSQLArgumentError('Invalid JSON key', req, err);\n            }\n        }\n        if (!isPlainObject(req.key)) {\n            throw new NoSQLArgumentError('Invalid or missing key', req);\n        }\n    }\n\n    static _chkRow(req) {\n        if (typeof req.row === 'string') {\n            try {\n                req.row = JSON.parse(req.row);\n            } catch(err) {\n                throw new NoSQLArgumentError('Invalid JSON row', req, err);\n            }\n        }\n        if (!isPlainObject(req.row)) {\n            throw new NoSQLArgumentError('Invalid or missing row', req);\n        }\n    }\n\n    static _chkConsistency(req) {\n        if (!(req.opt.consistency instanceof Consistency)) {\n            throw new NoSQLArgumentError('Invalid consistency', req);\n        }\n    }\n\n    static _chkMatchVersion(req) {\n        if (req.opt.matchVersion != null &&\n            !(req.opt.matchVersion instanceof Buffer)) {\n            throw new NoSQLArgumentError(\n                'matchVersion must be instance of Buffer', req);\n        }\n    }\n\n    static _chkContinuationKey(req) {\n        const cc = req.opt.continuationKey;\n        if (cc != null && !Buffer.isBuffer(cc) && !cc[Op.ccAsObj]) {\n            throw new NoSQLArgumentError('Invalid continuation key', req);\n        }\n    }\n\n    static _validateDelay(req) {\n        if (!isPosInt32(req.opt.delay)) {\n            throw new NoSQLArgumentError('Invalid delay', req);\n        }\n        if (req.opt.timeout < req.opt.delay) {\n            throw new NoSQLArgumentError('Timeout cannot be less than delay',\n                req);\n        }\n    }\n\n    static _validateFieldRange(req) {\n        const fr = req.opt.fieldRange;\n        if (fr == null) {\n            return;\n        }\n        if (typeof fr !== 'object') {\n            throw new NoSQLArgumentError('Invalid field range', req);\n        }\n        if (typeof fr.fieldName !== 'string' || !fr.fieldName.length) {\n            throw new NoSQLArgumentError('Invalid field name in field range',\n                req);\n        }\n        if (fr.startWith == null && fr.startAfter == null &&\n            fr.endWith == null && fr.endBefore == null) {\n            throw new NoSQLArgumentError('Missing bounds in field range');\n        }\n        if ((fr.startWith != null && fr.startAfter != null) ||\n            (fr.endWith != null && fr.endBefore != null)) {\n            throw new NoSQLArgumentError('Both inclusive and exclusive bound \\\nspecified for one end of field range');\n        }\n    }\n\n    //Here we will conver the value to Date so that we don't have to do this\n    //again during serialization.  We accept any valid Date values as well as\n    //any number or string value passed to Date constructor (we will use\n    //the value from the resulting Date.getTime()).  Javascript Date range is\n    //+-100000 days since/before epoch, which is subset of java.util.Date\n    //range so we should be ok on the server side.\n    static _validateDateField(req, obj, field) {\n        if (obj[field] == null) {\n            return;\n        }\n        const d = obj[field];\n        //Date constructor accepts other types such as arrays but we don't\n        //allow this.\n        const v = d instanceof Date ? d : new Date(\n            (typeof d === 'number' || typeof d === 'string') ? d : NaN);\n        if (!Number.isFinite(v.getTime())) { // NaN for invalid date\n            throw new NoSQLArgumentError(`Invalid ${field} value`, req);\n        }\n        obj[field] = v;\n    }\n\n    static _validateOpt(req) {\n        //Check that opt did not specify properties that it is not allowed\n        //to override\n        for(let key of this.NO_OVERRIDE_OPTS) {\n            if (hasOwnProperty(req.opt, key)) {\n                throw new NoSQLArgumentError(\n                    `Options may not override ${key}`, req);\n            }\n        }\n    }\n\n    static _validateTimeout(req) {\n        if (!isPosInt32(req.opt.timeout)) {\n            throw new NoSQLArgumentError(\n                `Invalid timeout: ${req.opt.timeout}`, req);\n        }\n    }\n\n    static _validateDurability(req) {\n        if (req.opt == null || req.opt.durability == null) {\n            return;\n        }\n        if (!(req.opt.durability.masterSync instanceof SyncPolicy)) {\n            throw new NoSQLArgumentError(\n                `Invalid durability.masterSync: \\\n${req.opt.durability.masterSync}`, req);\n        }\n        if (!(req.opt.durability.replicaSync instanceof SyncPolicy)) {\n            throw new NoSQLArgumentError(\n                `Invalid durability.replicaSync: \\\n${req.opt.durability.replicaSync}`, req);\n        }\n        if (!(req.opt.durability.replicaAck instanceof ReplicaAckPolicy)) {\n            throw new NoSQLArgumentError(\n                `Invalid durability.replicaAck: \\\n${req.opt.durability.replicaAck}`, req);\n        }\n    }\n\n    static _validateRequest(req) {\n        this._validateOpt(req);\n        this._validateTimeout(req);\n        //set timeout to use for single request (vs timeout across retries)\n        req.opt.requestTimeout = Math.min(req.opt.timeout,\n            Limits.MAX_REQUEST_TIMEOUT);\n    }\n\n    static _validateReadRequest(req) {\n        this._validateRequest(req);\n        this._chkTblName(req);\n        this._chkConsistency(req);\n    }\n\n    static _validateWriteRequest(req, isSubRequest) {\n        if (!isSubRequest) {\n            this._validateRequest(req);\n            this._chkTblName(req);\n        } else {\n            this._validateOpt(req);\n        }\n        this._validateDurability(req);\n    }\n\n    static get REQUEST_SIZE_LIMIT() {\n        return Limits.REQUEST_SIZE;\n    }\n\n    static _chkRequestSizeLimit(req, len) {\n        if (len > this.REQUEST_SIZE_LIMIT) {\n            throw new NoSQLError(ErrorCode.REQUEST_SIZE_LIMIT_EXCEEDED,\n                `Request size ${len} exceeds the limit of ` +\n                `${this.REQUEST_SIZE_LIMIT}`,\n                null,\n                req);\n        }\n    }\n\n    static chkRequestSizeLimit(pm, buf, req) {\n        this._chkRequestSizeLimit(req, pm.getContentLength(buf));\n    }\n\n    static serialize(pm, buf, req) {\n        const writer = pm.getWriter(buf);\n        pm.startWrite(writer, req);\n        const serializer = pm.serializer(this.name);\n        assert(serializer != null);\n        serializer.serialize(writer, req, req._serialVersion);\n        this.chkRequestSizeLimit(pm, buf, req);\n    }\n\n    static deserialize(pm, buf, req) {\n        const reader = pm.getReader(buf);\n        pm.startRead(reader, req);\n        const serializer = pm.serializer(this.name);\n        assert(serializer != null);\n        return serializer.deserialize(reader, req, req._serialVersion);\n    }\n\n    static applyDefaults(req, def) {\n        req.opt = Config.inheritOpt(req.opt, def, req);\n    }\n\n    static validate() {}\n\n    static onResult(client, req, res) {\n        if (res.consumedCapacity) {\n            client.emit('consumedCapacity', res.consumedCapacity, req);\n        }\n        //query topology may be received by any dml/query result\n        if (res._topoInfo && (!client._config._topoInfo ||\n            client._config._topoInfo.seqNum < res._topoInfo.seqNum)) {\n            client._config._topoInfo = res._topoInfo;\n        }\n    }\n\n    //Subclasses may provide req as an argument if needed\n    static shouldRetry() {\n        return true;\n    }\n\n    //The following are used by rate limiter\n\n    static get supportsRateLimiting() {\n        return false;\n    }\n\n    static getTableName(req) {\n        return req.tableName;\n    }\n\n    static doesReads() {\n        return false;\n    }\n\n    static doesWrites() {\n        return false;\n    }\n\n    //Cloud only. Requests that may require cross-region auth in the proxy\n    //have to have their content signed (via \"x-content-sha256\" header).\n    static needsContentSigned() {\n        return false;\n    }\n\n    //The reason for dealing with protocol versions here is to abstract this\n    //logic from HttpClient, because now we have to deal with both serial\n    //version and query version. Prepare and query operations can override\n    //the 2 methods below to add code to deal with query version change (it\n    //also allows for operation-specific versioning of other operations if\n    //ever needed).\n\n    static setProtocolVersion(client, req) {\n        req._serialVersion = client._pm.serialVersion;\n    }\n\n    //Returns true if the operation can be retried immediately because we\n    //received UNSUPPORTED_PROTOCOL error.\n    static handleUnsupportedProtocol(client, req, err) {\n        //Check if we got UNSUPPORTED_PROTOCOL error and can can retry with\n        //older protocol, in which case we can immediately retry (otherwise\n        //use retry handler as usual).\n        if (err.errorCode === ErrorCode.UNSUPPORTED_PROTOCOL) {\n            if (!client._decrementSerialVersion(req._serialVersion)) {\n                throw err;\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    static protocolChanged(client, req) {\n        return req._serialVersion !== client._pm.serialVersion;\n    }\n\n}\n\n//These parameters have to be specified in initial configuration and may not\n//be overriden in options.\nOp.NO_OVERRIDE_OPTS = [ 'serviceType', 'retry', 'auth' ];\n\n//For advanced queries and other possible cases where continuation key is\n//an object, this allows us to validate that user did not supply a bogus\n//value that could cause internal failures down the line\nOp.ccAsObj = Symbol('ccAsObj');\n\nmodule.exports = Op;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}