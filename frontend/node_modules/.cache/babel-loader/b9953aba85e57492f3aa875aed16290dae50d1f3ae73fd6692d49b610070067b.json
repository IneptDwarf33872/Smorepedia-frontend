{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst OpCode = require('../binary_protocol/constants').OpCode;\nconst Protocol = require('./protocol');\nconst ErrorCode = require('../error_code');\nconst NoSQLError = require('../error').NoSQLError;\nconst PutOp = require('../ops').PutOp;\nconst Op = require('../ops').Op;\nconst Fields = require('./constants').Fields;\nclass GetSerializer extends Protocol {\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    this.writeHeader(nw, OpCode.GET, serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    this.writeConsistency(nw, req.opt.consistency);\n    this.writeKey(nw, req.key, req.opt);\n    nw.endMapField();\n    nw.endMap();\n  }\n  static deserialize(nr, req) {\n    return this.deserializeResponse(nr, req, (field, res) => {\n      if (field !== Fields.ROW) {\n        return false;\n      }\n      this.readMap(nr, field => {\n        switch (field) {\n          case Fields.VALUE:\n            res.row = this.readRow(nr, req.opt);\n            return true;\n          case Fields.ROW_VERSION:\n            res.version = this.readRowVersion(nr);\n            return true;\n          case Fields.EXPIRATION:\n            res.expirationTime = this.readDateAsLong(nr);\n            return true;\n          case Fields.MODIFIED:\n            res.modificationTime = this.readDateAsLong(nr);\n            return true;\n          default:\n            return false;\n        }\n      });\n      return true;\n    }, {\n      row: null\n    }); //value if row doesn't exist\n  }\n}\nclass PutSerializer extends Protocol {\n  static _opcode(opt) {\n    if (opt.ifAbsent) {\n      return OpCode.PUT_IF_ABSENT;\n    }\n    if (opt.ifPresent) {\n      return OpCode.PUT_IF_PRESENT;\n    }\n    if (opt.matchVersion) {\n      return OpCode.PUT_IF_VERSION;\n    }\n    return OpCode.PUT;\n  }\n  static _serializePutOp(nw, op) {\n    this.checkWriteBooleanField(nw, Fields.EXACT_MATCH, op.opt.exactMatch);\n    this.checkWriteBooleanField(nw, Fields.UPDATE_TTL, PutOp.needUpdateTTL(op));\n    if (op.opt.ttl != null) {\n      nw.writeStringField(Fields.TTL, this.ttlToString(op.opt.ttl));\n    }\n    this.checkWriteIntField(nw, Fields.IDENTITY_CACHE_SIZE, op.opt.identityCacheSize);\n    if (op.opt.matchVersion != null) {\n      this.writeRowVersion(nw, op.opt.matchVersion);\n    }\n    this.writeValue(nw, op.row, op.opt);\n  }\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    this.writeHeader(nw, this._opcode(req.opt), serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    this.serializeWriteRequest(nw, req);\n    this._serializePutOp(nw, req);\n    nw.endMapField();\n    nw.endMap();\n  }\n  static deserialize(nr, req) {\n    return this.deserializeResponse(nr, req, (field, res) => {\n      switch (field) {\n        case Fields.ROW_VERSION:\n          res.version = this.readRowVersion(nr);\n          res.success = true;\n          return true;\n        case Fields.RETURN_INFO:\n          this.deserializeReturnInfo(nr, res, req.opt);\n          return true;\n        case Fields.GENERATED:\n          res.generatedValue = this.readFieldValue(nr, req.opt);\n          return true;\n        default:\n          return false;\n      }\n    }, {\n      success: false\n    });\n  }\n}\nclass DeleteSerializer extends Protocol {\n  static _opcode(opt) {\n    return opt.matchVersion ? OpCode.DELETE_IF_VERSION : OpCode.DELETE;\n  }\n  static _serializeDeleteOp(nw, op) {\n    if (op.opt.matchVersion != null) {\n      this.writeRowVersion(nw, op.opt.matchVersion);\n    }\n    this.writeKey(nw, op.key, op.opt);\n  }\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    this.writeHeader(nw, this._opcode(req.opt), serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    this.serializeWriteRequest(nw, req);\n    this._serializeDeleteOp(nw, req);\n    nw.endMapField();\n    nw.endMap();\n  }\n  static deserialize(nr, req) {\n    return this.deserializeResponse(nr, req, (field, res) => {\n      switch (field) {\n        case Fields.SUCCESS:\n          res.success = nr.readBoolean();\n          return true;\n        case Fields.RETURN_INFO:\n          this.deserializeReturnInfo(nr, res, req.opt);\n          return true;\n        default:\n          return false;\n      }\n    }, {\n      success: false\n    });\n  }\n}\nclass MultiDeleteSerializer extends Protocol {\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    this.writeHeader(nw, OpCode.MULTI_DELETE, serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    this.writeDurability(nw, req.opt.durability);\n    this.checkWriteIntField(nw, Fields.MAX_WRITE_KB, req.opt.maxWriteKB);\n    if (req.opt.continuationKey != null) {\n      nw.writeBinaryField(Fields.CONTINUATION_KEY, req.opt.continuationKey);\n    }\n    if (req.opt.fieldRange != null) {\n      this.writeFieldRange(nw, req.opt.fieldRange, req.opt);\n    }\n    this.writeKey(nw, req.key, req.opt);\n    nw.endMapField();\n    nw.endMap();\n  }\n  static deserialize(nr, req) {\n    return this.deserializeResponse(nr, req, (field, res) => {\n      switch (field) {\n        case Fields.NUM_DELETIONS:\n          res.deletedCount = nr.readInt();\n          return true;\n        case Fields.CONTINUATION_KEY:\n          res.continuationKey = nr.readBinary();\n          return true;\n        default:\n          return false;\n      }\n    });\n  }\n}\nclass WriteMultipleSerializer extends Protocol {\n  static serialize(nw, req, serialVersion) {\n    nw.startMap();\n    //req.tableName is set for single-table requests but not for\n    //multi-table requests.\n    this.writeHeader(nw, OpCode.WRITE_MULTIPLE, serialVersion, req);\n    nw.startMapField(Fields.PAYLOAD);\n    this.writeDurability(nw, req.opt.durability);\n    nw.writeIntField(Fields.NUM_OPERATIONS, req.ops.length);\n    nw.startArrayField(Fields.OPERATIONS);\n    let i = 0;\n    for (const op of req.ops) {\n      const start = nw.length;\n      nw.startMap();\n      this.checkWriteStringField(nw, Fields.TABLE_NAME, op.tableName);\n      if (op.put) {\n        nw.writeIntField(Fields.OP_CODE, PutSerializer._opcode(op.opt));\n        PutSerializer._serializePutOp(nw, op);\n      } else {\n        assert(op.delete);\n        nw.writeIntField(Fields.OP_CODE, DeleteSerializer._opcode(op.opt));\n        DeleteSerializer._serializeDeleteOp(nw, op);\n      }\n      this.checkWriteBooleanField(nw, Fields.RETURN_ROW, op.opt.returnExisting);\n      this.checkWriteBooleanField(nw, Fields.ABORT_ON_FAIL, op.opt.abortOnFail);\n      nw.endMap();\n      const opLen = nw.length - start;\n      if (opLen > Op.REQUEST_SIZE_LIMIT) {\n        throw new NoSQLError(ErrorCode.REQUEST_SIZE_LIMIT_EXCEEDED, `Operation size ${opLen} exceeds the limit of \\\n${this.REQUEST_SIZE_LIMIT} for ${op.put ? 'put' : 'delete'} operation at \\\nindex ${i}`, null, req);\n      }\n      i++;\n    }\n    nw.endArrayField();\n    nw.endMapField();\n    nw.endMap();\n  }\n  static _readOpResult(nr, opt) {\n    const res = {};\n    Protocol.readMap(nr, field => {\n      switch (field) {\n        case Fields.SUCCESS:\n          res.success = nr.readBoolean();\n          return true;\n        case Fields.ROW_VERSION:\n          res.version = Protocol.readRowVersion(nr);\n          return true;\n        case Fields.GENERATED:\n          res.generatedValue = Protocol.readFieldValue(nr, opt);\n          return true;\n        case Fields.RETURN_INFO:\n          Protocol.deserializeReturnInfo(nr, res, opt);\n          return true;\n        default:\n          return false;\n      }\n    });\n    return res;\n  }\n  static deserialize(nr, req) {\n    return this.deserializeResponse(nr, req, (field, res) => {\n      switch (field) {\n        case Fields.WM_SUCCESS:\n          res.results = this.readArray(nr, this._readOpResult, req.opt);\n          return true;\n        case Fields.WM_FAILURE:\n          this.readMap(nr, field => {\n            switch (field) {\n              case Fields.WM_FAIL_INDEX:\n                res.failedOpIndex = nr.readInt();\n                return true;\n              case Fields.WM_FAIL_RESULT:\n                res.failedOpResult = this._readOpResult(nr, req);\n                return true;\n              default:\n                return false;\n            }\n          });\n          return true;\n        default:\n          return false;\n      }\n    });\n  }\n}\nmodule.exports = {\n  GetSerializer,\n  PutSerializer,\n  DeleteSerializer,\n  MultiDeleteSerializer,\n  WriteMultipleSerializer\n};","map":{"version":3,"names":["assert","require","OpCode","Protocol","ErrorCode","NoSQLError","PutOp","Op","Fields","GetSerializer","serialize","nw","req","serialVersion","startMap","writeHeader","GET","startMapField","PAYLOAD","writeConsistency","opt","consistency","writeKey","key","endMapField","endMap","deserialize","nr","deserializeResponse","field","res","ROW","readMap","VALUE","row","readRow","ROW_VERSION","version","readRowVersion","EXPIRATION","expirationTime","readDateAsLong","MODIFIED","modificationTime","PutSerializer","_opcode","ifAbsent","PUT_IF_ABSENT","ifPresent","PUT_IF_PRESENT","matchVersion","PUT_IF_VERSION","PUT","_serializePutOp","op","checkWriteBooleanField","EXACT_MATCH","exactMatch","UPDATE_TTL","needUpdateTTL","ttl","writeStringField","TTL","ttlToString","checkWriteIntField","IDENTITY_CACHE_SIZE","identityCacheSize","writeRowVersion","writeValue","serializeWriteRequest","success","RETURN_INFO","deserializeReturnInfo","GENERATED","generatedValue","readFieldValue","DeleteSerializer","DELETE_IF_VERSION","DELETE","_serializeDeleteOp","SUCCESS","readBoolean","MultiDeleteSerializer","MULTI_DELETE","writeDurability","durability","MAX_WRITE_KB","maxWriteKB","continuationKey","writeBinaryField","CONTINUATION_KEY","fieldRange","writeFieldRange","NUM_DELETIONS","deletedCount","readInt","readBinary","WriteMultipleSerializer","WRITE_MULTIPLE","writeIntField","NUM_OPERATIONS","ops","length","startArrayField","OPERATIONS","i","start","checkWriteStringField","TABLE_NAME","tableName","put","OP_CODE","delete","RETURN_ROW","returnExisting","ABORT_ON_FAIL","abortOnFail","opLen","REQUEST_SIZE_LIMIT","REQUEST_SIZE_LIMIT_EXCEEDED","endArrayField","_readOpResult","WM_SUCCESS","results","readArray","WM_FAILURE","WM_FAIL_INDEX","failedOpIndex","WM_FAIL_RESULT","failedOpResult","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/nson_protocol/dml.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst OpCode = require('../binary_protocol/constants').OpCode;\nconst Protocol = require('./protocol');\nconst ErrorCode = require('../error_code');\nconst NoSQLError = require('../error').NoSQLError;\nconst PutOp = require('../ops').PutOp;\nconst Op = require('../ops').Op;\nconst Fields = require('./constants').Fields;\n\nclass GetSerializer extends Protocol {\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        this.writeHeader(nw, OpCode.GET, serialVersion, req);\n        nw.startMapField(Fields.PAYLOAD);\n        this.writeConsistency(nw, req.opt.consistency);\n        this.writeKey(nw, req.key, req.opt);\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static deserialize(nr, req) {\n        return this.deserializeResponse(nr, req, (field, res) => {\n            if (field !== Fields.ROW) {\n                return false;\n            }\n\n            this.readMap(nr, field => {\n                switch (field) {\n                case Fields.VALUE:\n                    res.row = this.readRow(nr, req.opt);\n                    return true;\n                case Fields.ROW_VERSION:\n                    res.version = this.readRowVersion(nr);\n                    return true;\n                case Fields.EXPIRATION:\n                    res.expirationTime = this.readDateAsLong(nr);\n                    return true;\n                case Fields.MODIFIED:\n                    res.modificationTime = this.readDateAsLong(nr);\n                    return true;\n                default:\n                    return false;\n                }\n            });\n\n            return true;\n        }, { row: null }); //value if row doesn't exist\n    }\n\n}\n\nclass PutSerializer extends Protocol {\n\n    static _opcode(opt) {\n        if (opt.ifAbsent) {\n            return OpCode.PUT_IF_ABSENT;\n        }\n        if (opt.ifPresent) {\n            return OpCode.PUT_IF_PRESENT;\n        }\n        if (opt.matchVersion) {\n            return OpCode.PUT_IF_VERSION;\n        }\n        return OpCode.PUT;\n    }\n\n    static _serializePutOp(nw, op) {\n        this.checkWriteBooleanField(nw, Fields.EXACT_MATCH,\n            op.opt.exactMatch);\n        this.checkWriteBooleanField(nw, Fields.UPDATE_TTL,\n            PutOp.needUpdateTTL(op));\n\n        if (op.opt.ttl != null) {\n            nw.writeStringField(Fields.TTL, this.ttlToString(op.opt.ttl));\n        }\n\n        this.checkWriteIntField(nw, Fields.IDENTITY_CACHE_SIZE,\n            op.opt.identityCacheSize);\n\n        if (op.opt.matchVersion != null) {\n            this.writeRowVersion(nw, op.opt.matchVersion);\n        }\n\n        this.writeValue(nw, op.row, op.opt);\n    }\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        this.writeHeader(nw, this._opcode(req.opt), serialVersion, req);\n        nw.startMapField(Fields.PAYLOAD);\n        this.serializeWriteRequest(nw, req);\n        this._serializePutOp(nw, req);\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static deserialize(nr, req) {\n        return this.deserializeResponse(nr, req, (field, res) => {\n            switch (field) {\n            case Fields.ROW_VERSION:\n                res.version = this.readRowVersion(nr);\n                res.success = true;\n                return true;\n            case Fields.RETURN_INFO:\n                this.deserializeReturnInfo(nr, res, req.opt);\n                return true;\n            case Fields.GENERATED:\n                res.generatedValue = this.readFieldValue(nr, req.opt);\n                return true;\n            default:\n                return false;\n            }\n        }, { success: false });\n    }\n}\n\nclass DeleteSerializer extends Protocol {\n\n    static _opcode(opt) {\n        return opt.matchVersion ? OpCode.DELETE_IF_VERSION :\n            OpCode.DELETE;\n    }\n\n    static _serializeDeleteOp(nw, op) {\n        if (op.opt.matchVersion != null) {\n            this.writeRowVersion(nw, op.opt.matchVersion);\n        }\n        this.writeKey(nw, op.key, op.opt);\n    }\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        this.writeHeader(nw, this._opcode(req.opt), serialVersion, req);\n        nw.startMapField(Fields.PAYLOAD);\n        this.serializeWriteRequest(nw, req);\n        this._serializeDeleteOp(nw, req);\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static deserialize(nr, req) {\n        return this.deserializeResponse(nr, req, (field, res) => {\n            switch (field) {\n            case Fields.SUCCESS:\n                res.success = nr.readBoolean();\n                return true;\n            case Fields.RETURN_INFO:\n                this.deserializeReturnInfo(nr, res, req.opt);\n                return true;\n            default:\n                return false;\n            }\n        }, { success: false });\n    }\n\n}\n\nclass MultiDeleteSerializer extends Protocol {\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        this.writeHeader(nw, OpCode.MULTI_DELETE, serialVersion, req);\n        nw.startMapField(Fields.PAYLOAD);\n        this.writeDurability(nw, req.opt.durability);\n        this.checkWriteIntField(nw, Fields.MAX_WRITE_KB, req.opt.maxWriteKB);\n\n        if (req.opt.continuationKey != null) {\n            nw.writeBinaryField(Fields.CONTINUATION_KEY,\n                req.opt.continuationKey);\n        }\n\n        if (req.opt.fieldRange != null) {\n            this.writeFieldRange(nw, req.opt.fieldRange, req.opt);\n        }\n\n        this.writeKey(nw, req.key, req.opt);\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static deserialize(nr, req) {\n        return this.deserializeResponse(nr, req, (field, res) => {\n            switch (field) {\n            case Fields.NUM_DELETIONS:\n                res.deletedCount = nr.readInt();\n                return true;\n            case Fields.CONTINUATION_KEY:\n                res.continuationKey = nr.readBinary();\n                return true;\n            default:\n                return false;\n            }\n        });\n    }\n\n}\n\nclass WriteMultipleSerializer extends Protocol {\n\n    static serialize(nw, req, serialVersion) {\n        nw.startMap();\n        //req.tableName is set for single-table requests but not for\n        //multi-table requests.\n        this.writeHeader(nw, OpCode.WRITE_MULTIPLE, serialVersion, req);\n        nw.startMapField(Fields.PAYLOAD);\n        this.writeDurability(nw, req.opt.durability);\n        nw.writeIntField(Fields.NUM_OPERATIONS, req.ops.length);\n        \n        nw.startArrayField(Fields.OPERATIONS);\n        let i = 0;\n\n        for(const op of req.ops) {\n            const start = nw.length;\n            nw.startMap();\n            this.checkWriteStringField(nw, Fields.TABLE_NAME, op.tableName);\n\n            if (op.put) {\n                nw.writeIntField(Fields.OP_CODE, PutSerializer._opcode(\n                    op.opt));\n                PutSerializer._serializePutOp(nw, op);\n            } else {\n                assert(op.delete);\n                nw.writeIntField(Fields.OP_CODE, DeleteSerializer._opcode(\n                    op.opt));\n                DeleteSerializer._serializeDeleteOp(nw, op);\n            }\n\n            this.checkWriteBooleanField(nw, Fields.RETURN_ROW,\n                op.opt.returnExisting);\n            this.checkWriteBooleanField(nw, Fields.ABORT_ON_FAIL,\n                op.opt.abortOnFail);\n            nw.endMap();\n\n            const opLen = nw.length - start;\n            if (opLen > Op.REQUEST_SIZE_LIMIT) {\n                throw new NoSQLError(ErrorCode.REQUEST_SIZE_LIMIT_EXCEEDED,\n                    `Operation size ${opLen} exceeds the limit of \\\n${this.REQUEST_SIZE_LIMIT} for ${op.put ? 'put' : 'delete'} operation at \\\nindex ${i}`, null, req);\n            }\n\n            i++;\n        }\n\n        nw.endArrayField();\n        nw.endMapField();\n        nw.endMap();\n    }\n\n    static _readOpResult(nr, opt) {\n        const res = {};\n        Protocol.readMap(nr, field => {\n            switch (field) {\n            case Fields.SUCCESS:\n                res.success = nr.readBoolean();\n                return true;\n            case Fields.ROW_VERSION:\n                res.version = Protocol.readRowVersion(nr);\n                return true;\n            case Fields.GENERATED:\n                res.generatedValue = Protocol.readFieldValue(nr, opt);\n                return true;\n            case Fields.RETURN_INFO:\n                Protocol.deserializeReturnInfo(nr, res, opt);\n                return true;\n            default:\n                return false;\n            }\n        });\n\n        return res;\n    }\n\n    static deserialize(nr, req) {\n        return this.deserializeResponse(nr, req, (field, res) => {\n            switch (field) {\n            case Fields.WM_SUCCESS:\n                res.results = this.readArray(nr, this._readOpResult, req.opt);\n                return true;\n            case Fields.WM_FAILURE:\n                this.readMap(nr, field => {\n                    switch (field) {\n                    case Fields.WM_FAIL_INDEX:\n                        res.failedOpIndex = nr.readInt();\n                        return true;\n                    case Fields.WM_FAIL_RESULT:\n                        res.failedOpResult = this._readOpResult(nr, req);\n                        return true;\n                    default:\n                        return false;\n                    }\n                });\n                return true;\n            default:\n                return false;\n            }\n        });\n    }\n\n}\n\nmodule.exports = {\n    GetSerializer,\n    PutSerializer,\n    DeleteSerializer,\n    MultiDeleteSerializer,\n    WriteMultipleSerializer\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}