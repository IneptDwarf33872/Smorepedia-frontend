{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst NoSQLArgumentError = require('../error').NoSQLArgumentError;\nconst NoSQLProtocolError = require('../error').NoSQLProtocolError;\nconst AdminState = require('../constants').AdminState;\nconst isPlainObject = require('../utils').isPlainObject;\nconst isPosInt32 = require('../utils').isPosInt32;\nconst hasOwnProperty = require('../utils').hasOwnProperty;\nconst Op = require('./op');\nclass AdminDDLOp extends Op {\n  static applyDefaults(req, def) {\n    super.applyDefaults(req, def);\n    if (hasOwnProperty(req.opt, 'timeout')) {\n      req.opt._ownsTimeout = true;\n    } else {\n      req.opt.timeout = def.ddlTimeout;\n    }\n    if (req.opt.complete && !hasOwnProperty(req.opt, 'delay')) {\n      req.opt.delay = def.adminPollDelay;\n    }\n  }\n  static _validateTimeout(req) {\n    if ((!req.opt.complete || req.opt.timeout !== Infinity) && !isPosInt32(req.opt.timeout)) {\n      throw new NoSQLArgumentError(`Invalid timeout for admin DDL: ${req.opt.timeout}`, req);\n    }\n  }\n  static validate(req) {\n    this._validateRequest(req);\n    if (!Buffer.isBuffer(req.stmt) && typeof req.stmt !== 'string' || !req.stmt.length) {\n      throw new NoSQLArgumentError('Missing or invalid statement', req);\n    }\n    if (req.opt.complete) {\n      this._validateDelay(req);\n    }\n  }\n  static shouldRetry() {\n    return false;\n  }\n  static onResult(client, req, res) {\n    if (res.operationId == null && res.state !== AdminState.COMPLETE) {\n      throw new NoSQLProtocolError('Missing operation id for \\\nincomplete admin result', null, req);\n    }\n    res._forAdmin = true;\n  }\n}\nclass AdminStatusOp extends Op {\n  static validate(req) {\n    this._validateRequest(req);\n    const res = req.adminResult;\n    if (!isPlainObject(res)) {\n      throw new NoSQLArgumentError('Missing or invalid admin result', req);\n    }\n    if (res.operationId == null) {\n      //If operationId is null, the request is not sent to the server,\n      //see NoSQLClientImpl._adminStatus()\n      if (res.state !== AdminState.COMPLETE) {\n        throw new NoSQLArgumentError('Missing operation id for \\\nincomplete admin result', req);\n      }\n    } else if (typeof res.operationId !== 'string' || !res.operationId.length) {\n      throw new NoSQLArgumentError('Invalid operation id', req);\n    }\n    if (res.statement != null && typeof res.statement !== 'string') {\n      throw new NoSQLArgumentError('Invalid statememt', req);\n    }\n  }\n  static onResult(client, req, res) {\n    res._forAdmin = true;\n  }\n}\nclass AdminPollOp extends AdminStatusOp {\n  static applyDefaults(req, def) {\n    super.applyDefaults(req, def);\n    if (!hasOwnProperty(req.opt, 'timeout')) {\n      req.opt.timeout = def.adminPollTimeout;\n    }\n    if (!hasOwnProperty(req.opt, 'delay')) {\n      req.opt.delay = def.adminPollDelay;\n    }\n  }\n  static _validateTimeout(req) {\n    if (req.opt.timeout !== Infinity && !isPosInt32(req.opt.timeout)) {\n      throw new NoSQLArgumentError(`Invalid timeout for admin poll: ${req.opt.timeout}`, req);\n    }\n  }\n  static validate(req) {\n    super.validate(req);\n    this._validateDelay(req);\n  }\n}\nmodule.exports = {\n  AdminDDLOp,\n  AdminStatusOp,\n  AdminPollOp\n};","map":{"version":3,"names":["NoSQLArgumentError","require","NoSQLProtocolError","AdminState","isPlainObject","isPosInt32","hasOwnProperty","Op","AdminDDLOp","applyDefaults","req","def","opt","_ownsTimeout","timeout","ddlTimeout","complete","delay","adminPollDelay","_validateTimeout","Infinity","validate","_validateRequest","Buffer","isBuffer","stmt","length","_validateDelay","shouldRetry","onResult","client","res","operationId","state","COMPLETE","_forAdmin","AdminStatusOp","adminResult","statement","AdminPollOp","adminPollTimeout","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/ops/admin.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst NoSQLArgumentError = require('../error').NoSQLArgumentError;\nconst NoSQLProtocolError = require('../error').NoSQLProtocolError;\nconst AdminState = require('../constants').AdminState;\nconst isPlainObject = require('../utils').isPlainObject;\nconst isPosInt32 = require('../utils').isPosInt32;\nconst hasOwnProperty = require('../utils').hasOwnProperty;\nconst Op = require('./op');\n\nclass AdminDDLOp extends Op {\n\n    static applyDefaults(req, def) {\n        super.applyDefaults(req, def);\n        if (hasOwnProperty(req.opt, 'timeout')) {\n            req.opt._ownsTimeout = true;\n        } else {\n            req.opt.timeout = def.ddlTimeout;\n        }\n        if (req.opt.complete && !hasOwnProperty(req.opt, 'delay')) {\n            req.opt.delay = def.adminPollDelay;\n        }\n    }\n\n    static _validateTimeout(req) {\n        if ((!req.opt.complete || req.opt.timeout !== Infinity) &&\n            !isPosInt32(req.opt.timeout)) {\n            throw new NoSQLArgumentError(\n                `Invalid timeout for admin DDL: ${req.opt.timeout}`, req);\n        }\n    }\n\n    static validate(req) {\n        this._validateRequest(req);\n        if ((!Buffer.isBuffer(req.stmt) && typeof req.stmt !== 'string') ||\n            !req.stmt.length) {\n            throw new NoSQLArgumentError('Missing or invalid statement', req);\n        }\n        if (req.opt.complete) {\n            this._validateDelay(req);\n        }\n    }\n\n    static shouldRetry() {\n        return false;\n    }\n\n    static onResult(client, req, res) {\n        if (res.operationId == null && res.state !== AdminState.COMPLETE) {\n            throw new NoSQLProtocolError('Missing operation id for \\\nincomplete admin result', null, req);\n        }\n        res._forAdmin = true;\n    }\n\n}\n\nclass AdminStatusOp extends Op {\n\n    static validate(req) {\n        this._validateRequest(req);\n        const res = req.adminResult;\n        if (!isPlainObject(res)) {\n            throw new NoSQLArgumentError('Missing or invalid admin result',\n                req);\n        }\n        if (res.operationId == null) {\n            //If operationId is null, the request is not sent to the server,\n            //see NoSQLClientImpl._adminStatus()\n            if (res.state !== AdminState.COMPLETE) {\n                throw new NoSQLArgumentError('Missing operation id for \\\nincomplete admin result', req);\n            }\n        } else if (typeof res.operationId !== 'string' ||\n            !res.operationId.length) {\n            throw new NoSQLArgumentError('Invalid operation id', req);\n        }\n        if (res.statement != null && typeof res.statement !== 'string') {\n            throw new NoSQLArgumentError('Invalid statememt', req);\n        }\n    }\n\n    static onResult(client, req, res) {\n        res._forAdmin = true;\n    }\n\n}\n\nclass AdminPollOp extends AdminStatusOp {\n    \n    static applyDefaults(req, def) {\n        super.applyDefaults(req, def);\n        if (!hasOwnProperty(req.opt, 'timeout')) {\n            req.opt.timeout = def.adminPollTimeout;\n        }\n        if (!hasOwnProperty(req.opt, 'delay')) {\n            req.opt.delay = def.adminPollDelay;\n        }\n    }\n\n    static _validateTimeout(req) {\n        if (req.opt.timeout !== Infinity && !isPosInt32(req.opt.timeout)) {\n            throw new NoSQLArgumentError(\n                `Invalid timeout for admin poll: ${req.opt.timeout}`, req);\n        }\n    }\n\n    static validate(req) {\n        super.validate(req);\n        this._validateDelay(req);\n    }\n\n}\n\nmodule.exports = {\n    AdminDDLOp,\n    AdminStatusOp,\n    AdminPollOp\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}