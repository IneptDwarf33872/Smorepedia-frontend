{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\nconst assert = require('assert');\nconst Protocol = require('../../binary_protocol/protocol');\nconst NoSQLQueryError = require('../../error').NoSQLQueryError;\nconst DistributionKind = require('../common').DistributionKind;\nconst SQLFuncCode = require('../common').SQLFuncCode;\nconst ArithOpcode = require('../common').ArithOpcode;\nconst PlanIterator = require('../common').PlanIterator;\nconst ReceiveIterator = require('../receive');\nconst SFWIterator = require('../sfw');\nconst ConstIterator = require('../value').ConstIterator;\nconst VarRefIterator = require('../value').VarRefIterator;\nconst ExtVarRefIterator = require('../value').ExtVarRefIterator;\nconst FieldStepIterator = require('../value').FieldStepIterator;\nconst FuncMinMaxIterator = require('../func').FuncMinMaxIterator;\nconst FuncCollectIterator = require('../func').FuncCollectIterator;\nconst FuncSizeIterator = require('../value').FuncSizeIterator;\nconst FuncSumIterator = require('../func').FuncSumIterator;\nconst ArithOpIterator = require('../arith').ArithOpIterator;\nconst SortIterator = require('../sort');\nconst GroupIterator = require('../group');\n\n/**\n * NOTE: The kvcode stored with each value in this enum matches the ordinal\n * of the corresponding PlanIterKind in kvstore.\n */\nconst StepType = {\n  RECV: 17,\n  SFW: 14,\n  SORT: 47,\n  CONST: 0,\n  VAR_REF: 1,\n  EXTERNAL_VAR_REF: 2,\n  FIELD_STEP: 11,\n  ARITH_OP: 8,\n  FN_SIZE: 15,\n  FN_SUM: 39,\n  FN_MIN_MAX: 41,\n  GROUP: 65,\n  SORT2: 66,\n  FN_COLLECT: 78\n};\nclass QueryPlanSerializer {\n  static _deserializeBase(dr, res) {\n    res.resPos = dr.readInt32BE(); //resultReg\n    dr.readInt32BE(); //statePos, not used\n    res.exprLoc = {\n      //expression location in the query\n      startLine: dr.readInt32BE(),\n      startColumn: dr.readInt32BE(),\n      endLine: dr.readInt32BE(),\n      endColumn: dr.readInt32BE()\n    };\n    for (let p in res.exprLoc) {\n      if (res.exprLoc[p] < 0) {\n        throw NoSQLQueryError.badProto(`Query plan: received invalid \\\nvalue of property ${p} of expression location: ${res.exprLoc[p]}`);\n      }\n    }\n  }\n  static _deserializeSortSpecs(dr) {\n    const fields = dr.readStringArray();\n    const attrs = dr.readArray(() => ({\n      isDesc: dr.readBoolean(),\n      nullsLowest: dr.readBoolean()\n    }));\n    const fldCnt = fields ? fields.length : 0;\n    const attrCnt = attrs ? attrs.length : 0;\n    if (fldCnt !== attrCnt) {\n      throw NoSQLQueryError.badProto(`Query plan, received \\\nnon-matching arrays lengths of sort fields: ${fldCnt} and sort attributes: \\\n${attrCnt}`);\n    }\n    return attrCnt ? attrs.map((v, i) => ({\n      fieldName: fields[i],\n      isDesc: v.isDesc,\n      //nullRank is easier to use for comparisons.\n      //Note: isDesc will reverse the whole sorted order, including\n      //special values, which happens after nullRank has been applied.\n      //To account for this, we reverse the value of nullRank if isDesc\n      //is true.\n      nullRank: v.nullsLowest !== v.isDesc ? -1 : 1\n    })) : null;\n  }\n  static _deserializeFuncCode(dr) {\n    try {\n      return SQLFuncCode.fromOrdinal(dr.readInt16BE());\n    } catch (err) {\n      throw NoSQLQueryError.badProto('Query plan: received invalid \\\nSQL function code', null, err);\n    }\n  }\n  static _deserializeArithOpcode(dr) {\n    try {\n      return ArithOpcode.fromOrdinal(dr.readInt16BE());\n    } catch (err) {\n      throw NoSQLQueryError.badProto('Query plan: received invalid \\\nSQL arithmetic opcode', null, err);\n    }\n  }\n  static _deserializeSortStep(dr, stepType, res) {\n    res.displayName = 'SORT';\n    res.itCls = SortIterator;\n    res.input = this.deserialize(dr);\n    res.sortSpecs = this._deserializeSortSpecs(dr);\n    res.countMem = stepType === StepType.SORT2 ? dr.readBoolean() : true;\n  }\n  static _deserializeSFWStep(dr, res) {\n    res.displayName = 'SFW';\n    res.itCls = SFWIterator;\n    res.colNames = dr.readStringArray();\n    res.gbColCnt = dr.readInt32BE();\n    res.fromVarName = dr.readString();\n    res.isSelectStar = dr.readBoolean();\n    res.colSteps = this.deserializeMultiple(dr);\n    res.fromStep = this.deserialize(dr);\n    res.offsetStep = this.deserialize(dr);\n    res.limitStep = this.deserialize(dr);\n  }\n  static _deserializeReceiveStep(dr, res) {\n    res.displayName = 'RECV';\n    res.itCls = ReceiveIterator;\n    try {\n      res.distKind = DistributionKind.fromOrdinal(dr.readInt16BE());\n    } catch (err) {\n      throw NoSQLQueryError.badProto('Query plan: received invalid \\\ndistribution kind for ReceiveOp', err);\n    }\n    res.sortSpecs = this._deserializeSortSpecs(dr);\n    res.pkFields = dr.readStringArray();\n  }\n  static _deserializeConstStep(dr, res) {\n    res.displayName = 'CONST';\n    res.itCls = ConstIterator;\n    res.val = Protocol.readFieldValue(dr);\n  }\n  static _deserializeVarRefStep(dr, res) {\n    res.displayName = 'VAR_REF';\n    res.itCls = VarRefIterator;\n    res.name = dr.readString();\n  }\n  static _deserializeExtVarRefStep(dr, res) {\n    res.displayName = 'EXTERNAL_VAR_REF';\n    res.itCls = ExtVarRefIterator;\n    res.name = dr.readString();\n    res.pos = dr.readInt32BE();\n    if (res.pos < 0) {\n      throw NoSQLQueryError.badProto(`Query plan: received invalid\nposition for external variable ${res.name}: ${res.pos}`);\n    }\n  }\n  static _deserializeFieldStep(dr, res) {\n    res.displayName = 'FIELD_STEP';\n    res.itCls = FieldStepIterator;\n    res.input = this.deserialize(dr);\n    res.fldName = dr.readString();\n  }\n  static _deserializeArithStep(dr, res) {\n    res.itCls = ArithOpIterator;\n    res.opcode = this._deserializeArithOpcode(dr);\n    res.displayName = res.opcode.name;\n    res.args = this.deserializeMultiple(dr);\n    res.ops = dr.readString();\n    const argCnt = res.args ? res.args.length : 0;\n    const opsCnt = res.ops ? res.ops.length : 0;\n    if (argCnt !== opsCnt) {\n      throw NoSQLQueryError.badProto(`Query plan: received \\\nnon-matching counts of argumetns: ${argCnt} and ops: ${opsCnt} for ArithOp`);\n    }\n  }\n  static _deserializeFuncSumStep(dr, res) {\n    res.displayName = 'FN_SUM';\n    res.itCls = FuncSumIterator;\n    res.input = this.deserialize(dr);\n  }\n  static _deserializeFuncMinMaxStep(dr, res) {\n    res.itCls = FuncMinMaxIterator;\n    const code = this._deserializeFuncCode(dr);\n    if (code !== SQLFuncCode.FN_MIN && code !== SQLFuncCode.FN_MAX) {\n      throw NoSQLQueryError.badProto(`Query plan: received invalid sql \\\nfunction code for FuncMinMaxIterator: ${code.name}`);\n    }\n    res.funcCode = code;\n    res.displayName = code.name;\n    res.input = this.deserialize(dr);\n  }\n  static _deserializeFuncCollectStep(dr, res) {\n    res.itCls = FuncCollectIterator;\n    res.isDistinct = dr.readBoolean();\n    res.displayName = res.isDistinct ? 'FN_COLLECT_DISTINCT' : 'FN_COLLECT';\n    res.input = this.deserialize(dr);\n  }\n  static _deserializeFuncSizeStep(dr, res) {\n    res.displayName = 'FN_SIZE';\n    res.itCls = FuncSizeIterator;\n    res.input = this.deserialize(dr);\n  }\n  static _deserializeGroupStep(dr, res) {\n    res.displayName = 'GROUP';\n    res.itCls = GroupIterator;\n    res.input = this.deserialize(dr);\n    if (!res.input) {\n      throw NoSQLQueryError.badProto('Missing input iterator for GroupIterator');\n    }\n    res.gbColCnt = dr.readInt32BE();\n    res.colNames = dr.readStringArray();\n    if (!res.colNames || !res.colNames.length) {\n      throw NoSQLQueryError.badProto('Query plan: missing column names \\\nfor GroupIterator');\n    }\n    if (res.gbColCnt < 0 || res.gbColCnt > res.colNames.length) {\n      throw NoSQLQueryError.badProto(`Invalid group by column count \\\nfor GroupIterator: ${res.gbColCnt}, total columns: ${res.colNames.length}`);\n    }\n    const aggrCnt = res.colNames.length - res.gbColCnt;\n    if (aggrCnt) {\n      res.aggrFuncCodes = new Array(aggrCnt);\n      for (let i = 0; i < aggrCnt; i++) {\n        res.aggrFuncCodes[i] = this._deserializeFuncCode(dr);\n      }\n    }\n    res.isDistinct = dr.readBoolean();\n    res.removeRes = dr.readBoolean();\n    res.countMem = dr.readBoolean();\n  }\n  static deserialize(dr) {\n    const res = {};\n    const stepType = dr.readByte();\n    if (stepType === -1) {\n      return null;\n    }\n    this._deserializeBase(dr, res);\n    switch (stepType) {\n      case StepType.SORT:\n      case StepType.SORT2:\n        this._deserializeSortStep(dr, stepType, res);\n        break;\n      case StepType.SFW:\n        this._deserializeSFWStep(dr, res);\n        break;\n      case StepType.RECV:\n        this._deserializeReceiveStep(dr, res);\n        break;\n      case StepType.CONST:\n        this._deserializeConstStep(dr, res);\n        break;\n      case StepType.VAR_REF:\n        this._deserializeVarRefStep(dr, res);\n        break;\n      case StepType.EXTERNAL_VAR_REF:\n        this._deserializeExtVarRefStep(dr, res);\n        break;\n      case StepType.FIELD_STEP:\n        this._deserializeFieldStep(dr, res);\n        break;\n      case StepType.ARITH_OP:\n        this._deserializeArithStep(dr, res);\n        break;\n      case StepType.FN_SUM:\n        this._deserializeFuncSumStep(dr, res);\n        break;\n      case StepType.FN_MIN_MAX:\n        this._deserializeFuncMinMaxStep(dr, res);\n        break;\n      case StepType.FN_COLLECT:\n        this._deserializeFuncCollectStep(dr, res);\n        break;\n      case StepType.FN_SIZE:\n        this._deserializeFuncSizeStep(dr, res);\n        break;\n      case StepType.GROUP:\n        this._deserializeGroupStep(dr, res);\n        break;\n      default:\n        throw NoSQLQueryError.badProto(`Query plan: received invalid \\\noperation type: ${stepType}`);\n    }\n    assert(res.itCls && res.itCls.prototype instanceof PlanIterator);\n    res.itCls.validateStep(res);\n    return res;\n  }\n  static deserializeMultiple(dr) {\n    return dr.readArray(() => this.deserialize(dr));\n  }\n}\nmodule.exports = QueryPlanSerializer;","map":{"version":3,"names":["assert","require","Protocol","NoSQLQueryError","DistributionKind","SQLFuncCode","ArithOpcode","PlanIterator","ReceiveIterator","SFWIterator","ConstIterator","VarRefIterator","ExtVarRefIterator","FieldStepIterator","FuncMinMaxIterator","FuncCollectIterator","FuncSizeIterator","FuncSumIterator","ArithOpIterator","SortIterator","GroupIterator","StepType","RECV","SFW","SORT","CONST","VAR_REF","EXTERNAL_VAR_REF","FIELD_STEP","ARITH_OP","FN_SIZE","FN_SUM","FN_MIN_MAX","GROUP","SORT2","FN_COLLECT","QueryPlanSerializer","_deserializeBase","dr","res","resPos","readInt32BE","exprLoc","startLine","startColumn","endLine","endColumn","p","badProto","_deserializeSortSpecs","fields","readStringArray","attrs","readArray","isDesc","readBoolean","nullsLowest","fldCnt","length","attrCnt","map","v","i","fieldName","nullRank","_deserializeFuncCode","fromOrdinal","readInt16BE","err","_deserializeArithOpcode","_deserializeSortStep","stepType","displayName","itCls","input","deserialize","sortSpecs","countMem","_deserializeSFWStep","colNames","gbColCnt","fromVarName","readString","isSelectStar","colSteps","deserializeMultiple","fromStep","offsetStep","limitStep","_deserializeReceiveStep","distKind","pkFields","_deserializeConstStep","val","readFieldValue","_deserializeVarRefStep","name","_deserializeExtVarRefStep","pos","_deserializeFieldStep","fldName","_deserializeArithStep","opcode","args","ops","argCnt","opsCnt","_deserializeFuncSumStep","_deserializeFuncMinMaxStep","code","FN_MIN","FN_MAX","funcCode","_deserializeFuncCollectStep","isDistinct","_deserializeFuncSizeStep","_deserializeGroupStep","aggrCnt","aggrFuncCodes","Array","removeRes","readByte","prototype","validateStep","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/query/binary_protocol/serializer.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\nconst assert = require('assert');\nconst Protocol = require('../../binary_protocol/protocol');\nconst NoSQLQueryError = require('../../error').NoSQLQueryError;\nconst DistributionKind = require('../common').DistributionKind;\nconst SQLFuncCode = require('../common').SQLFuncCode;\nconst ArithOpcode = require('../common').ArithOpcode;\nconst PlanIterator = require('../common').PlanIterator;\nconst ReceiveIterator = require('../receive');\nconst SFWIterator = require('../sfw');\nconst ConstIterator = require('../value').ConstIterator;\nconst VarRefIterator = require('../value').VarRefIterator;\nconst ExtVarRefIterator = require('../value').ExtVarRefIterator;\nconst FieldStepIterator = require('../value').FieldStepIterator;\nconst FuncMinMaxIterator = require('../func').FuncMinMaxIterator;\nconst FuncCollectIterator = require('../func').FuncCollectIterator;\nconst FuncSizeIterator = require('../value').FuncSizeIterator;\nconst FuncSumIterator = require('../func').FuncSumIterator;\nconst ArithOpIterator = require('../arith').ArithOpIterator;\nconst SortIterator = require('../sort');\nconst GroupIterator = require('../group');\n\n/**\n * NOTE: The kvcode stored with each value in this enum matches the ordinal\n * of the corresponding PlanIterKind in kvstore.\n */\nconst StepType = {\n    RECV: 17,\n    SFW: 14,\n    SORT: 47,\n    CONST: 0,\n    VAR_REF: 1,\n    EXTERNAL_VAR_REF: 2,\n    FIELD_STEP: 11,\n    ARITH_OP: 8,\n    FN_SIZE: 15,\n    FN_SUM: 39,\n    FN_MIN_MAX: 41,\n    GROUP: 65,\n    SORT2: 66,\n    FN_COLLECT: 78\n};\n\nclass QueryPlanSerializer {\n\n    static _deserializeBase(dr, res) {\n        res.resPos = dr.readInt32BE(); //resultReg\n        dr.readInt32BE(); //statePos, not used\n        res.exprLoc = { //expression location in the query\n            startLine: dr.readInt32BE(),\n            startColumn: dr.readInt32BE(),\n            endLine: dr.readInt32BE(),\n            endColumn: dr.readInt32BE()\n        };\n        for(let p in res.exprLoc) {\n            if (res.exprLoc[p] < 0) {\n                throw NoSQLQueryError.badProto(`Query plan: received invalid \\\nvalue of property ${p} of expression location: ${res.exprLoc[p]}`);\n            }\n        }\n    }\n\n    static _deserializeSortSpecs(dr) {\n        const fields = dr.readStringArray();\n        const attrs = dr.readArray(() => ({\n            isDesc: dr.readBoolean(),\n            nullsLowest: dr.readBoolean()\n        }));\n        const fldCnt = fields ? fields.length : 0;\n        const attrCnt = attrs ? attrs.length : 0;\n        if (fldCnt !== attrCnt) {\n            throw NoSQLQueryError.badProto(`Query plan, received \\\nnon-matching arrays lengths of sort fields: ${fldCnt} and sort attributes: \\\n${attrCnt}`);\n        }\n        return attrCnt ? attrs.map((v, i) => ({\n            fieldName: fields[i],\n            isDesc: v.isDesc,\n            //nullRank is easier to use for comparisons.\n            //Note: isDesc will reverse the whole sorted order, including\n            //special values, which happens after nullRank has been applied.\n            //To account for this, we reverse the value of nullRank if isDesc\n            //is true.\n            nullRank: v.nullsLowest !== v.isDesc ? -1 : 1\n        })) : null;\n    }\n\n    static _deserializeFuncCode(dr) {\n        try {\n            return SQLFuncCode.fromOrdinal(dr.readInt16BE());\n        } catch(err) {\n            throw NoSQLQueryError.badProto('Query plan: received invalid \\\nSQL function code', null, err);\n        }\n    }\n\n    static _deserializeArithOpcode(dr) {\n        try {\n            return ArithOpcode.fromOrdinal(dr.readInt16BE());\n        } catch(err) {\n            throw NoSQLQueryError.badProto('Query plan: received invalid \\\nSQL arithmetic opcode', null, err);\n        }\n    }\n\n    static _deserializeSortStep(dr, stepType, res) {\n        res.displayName = 'SORT';\n        res.itCls = SortIterator;\n        res.input = this.deserialize(dr);\n        res.sortSpecs = this._deserializeSortSpecs(dr);\n        res.countMem = stepType === StepType.SORT2 ? dr.readBoolean() : true;\n    }\n\n    static _deserializeSFWStep(dr, res) {\n        res.displayName = 'SFW';\n        res.itCls = SFWIterator;\n        res.colNames = dr.readStringArray();\n        res.gbColCnt = dr.readInt32BE();\n        res.fromVarName = dr.readString();\n        res.isSelectStar = dr.readBoolean();\n        res.colSteps = this.deserializeMultiple(dr);\n        res.fromStep = this.deserialize(dr);\n        res.offsetStep = this.deserialize(dr);\n        res.limitStep = this.deserialize(dr);\n    }\n\n    static _deserializeReceiveStep(dr, res) {\n        res.displayName = 'RECV';\n        res.itCls = ReceiveIterator;\n        try {\n            res.distKind = DistributionKind.fromOrdinal(dr.readInt16BE());\n        } catch(err) {\n            throw NoSQLQueryError.badProto('Query plan: received invalid \\\ndistribution kind for ReceiveOp', err);\n        }\n        res.sortSpecs = this._deserializeSortSpecs(dr);\n        res.pkFields = dr.readStringArray();\n    }\n\n    static _deserializeConstStep(dr, res) {\n        res.displayName = 'CONST';\n        res.itCls = ConstIterator;\n        res.val = Protocol.readFieldValue(dr);\n    }\n\n    static _deserializeVarRefStep(dr, res) {\n        res.displayName = 'VAR_REF';\n        res.itCls = VarRefIterator;\n        res.name = dr.readString();\n    }\n\n    static _deserializeExtVarRefStep(dr, res) {\n        res.displayName = 'EXTERNAL_VAR_REF';\n        res.itCls = ExtVarRefIterator;\n        res.name = dr.readString();\n        res.pos = dr.readInt32BE();\n        if (res.pos < 0) {\n            throw NoSQLQueryError.badProto(`Query plan: received invalid\nposition for external variable ${res.name}: ${res.pos}`);\n        }\n    }\n\n    static _deserializeFieldStep(dr, res) {\n        res.displayName = 'FIELD_STEP';\n        res.itCls = FieldStepIterator;\n        res.input = this.deserialize(dr);\n        res.fldName = dr.readString();\n    }\n\n    static _deserializeArithStep(dr, res) {\n        res.itCls = ArithOpIterator;\n        res.opcode = this._deserializeArithOpcode(dr);\n        res.displayName = res.opcode.name;\n        res.args = this.deserializeMultiple(dr);\n        res.ops = dr.readString();\n        const argCnt = res.args ? res.args.length : 0;\n        const opsCnt = res.ops ? res.ops.length : 0;\n        if (argCnt !== opsCnt) {\n            throw NoSQLQueryError.badProto(`Query plan: received \\\nnon-matching counts of argumetns: ${argCnt} and ops: ${opsCnt} for ArithOp`);\n        }\n    }\n\n    static _deserializeFuncSumStep(dr, res) {\n        res.displayName = 'FN_SUM';\n        res.itCls = FuncSumIterator;\n        res.input = this.deserialize(dr);\n    }\n\n    static _deserializeFuncMinMaxStep(dr, res) {\n        res.itCls = FuncMinMaxIterator;\n        const code = this._deserializeFuncCode(dr);\n        if (code !== SQLFuncCode.FN_MIN && code !== SQLFuncCode.FN_MAX) {\n            throw NoSQLQueryError.badProto(`Query plan: received invalid sql \\\nfunction code for FuncMinMaxIterator: ${code.name}`);\n        }\n        res.funcCode = code;\n        res.displayName = code.name;\n        res.input = this.deserialize(dr);\n    }\n\n    static _deserializeFuncCollectStep(dr, res) {\n        res.itCls = FuncCollectIterator;\n        res.isDistinct = dr.readBoolean();\n        res.displayName = res.isDistinct ?\n            'FN_COLLECT_DISTINCT' : 'FN_COLLECT';\n        res.input = this.deserialize(dr);\n    }\n\n    static _deserializeFuncSizeStep(dr, res) {\n        res.displayName = 'FN_SIZE';\n        res.itCls = FuncSizeIterator;\n        res.input = this.deserialize(dr);\n    }\n\n    static _deserializeGroupStep(dr, res)\n    {\n        res.displayName = 'GROUP';\n        res.itCls = GroupIterator;\n        \n        res.input = this.deserialize(dr);\n        if (!res.input) {\n            throw NoSQLQueryError.badProto(\n                'Missing input iterator for GroupIterator');\n        }\n\n        res.gbColCnt = dr.readInt32BE();\n        res.colNames = dr.readStringArray();\n        if (!res.colNames || !res.colNames.length) {\n            throw NoSQLQueryError.badProto('Query plan: missing column names \\\nfor GroupIterator');\n        }\n        if (res.gbColCnt < 0 || res.gbColCnt > res.colNames.length) {\n            throw NoSQLQueryError.badProto(`Invalid group by column count \\\nfor GroupIterator: ${res.gbColCnt}, total columns: ${res.colNames.length}`);\n        }\n                \n        const aggrCnt = res.colNames.length - res.gbColCnt;\n        if (aggrCnt) {\n            res.aggrFuncCodes = new Array(aggrCnt);\n            for(let i = 0; i < aggrCnt; i++) {\n                res.aggrFuncCodes[i] = this._deserializeFuncCode(dr);\n            }\n        }\n\n        res.isDistinct = dr.readBoolean();\n        res.removeRes = dr.readBoolean();\n        res.countMem = dr.readBoolean();\n    }\n\n    static deserialize(dr) {\n        const res = {};\n        const stepType = dr.readByte();\n        if (stepType === -1) {\n            return null;\n        }\n        this._deserializeBase(dr, res);\n        switch (stepType) {\n        case StepType.SORT:\n        case StepType.SORT2:\n            this._deserializeSortStep(dr, stepType, res);\n            break;\n        case StepType.SFW:\n            this._deserializeSFWStep(dr, res);\n            break;\n        case StepType.RECV:\n            this._deserializeReceiveStep(dr, res);\n            break;\n        case StepType.CONST:\n            this._deserializeConstStep(dr, res);\n            break;\n        case StepType.VAR_REF:\n            this._deserializeVarRefStep(dr, res);\n            break;\n        case StepType.EXTERNAL_VAR_REF:\n            this._deserializeExtVarRefStep(dr, res);\n            break;\n        case StepType.FIELD_STEP:\n            this._deserializeFieldStep(dr, res);\n            break;\n        case StepType.ARITH_OP:\n            this._deserializeArithStep(dr, res);\n            break;\n        case StepType.FN_SUM:\n            this._deserializeFuncSumStep(dr, res);\n            break;\n        case StepType.FN_MIN_MAX:\n            this._deserializeFuncMinMaxStep(dr, res);\n            break;\n        case StepType.FN_COLLECT:\n            this._deserializeFuncCollectStep(dr, res);\n            break;\n        case StepType.FN_SIZE:\n            this._deserializeFuncSizeStep(dr, res);\n            break;\n        case StepType.GROUP:\n            this._deserializeGroupStep(dr, res);\n            break;\n        default:\n            throw NoSQLQueryError.badProto(`Query plan: received invalid \\\noperation type: ${stepType}`);\n        }\n\n        assert(res.itCls && res.itCls.prototype instanceof PlanIterator);\n        res.itCls.validateStep(res);\n        return res;\n    }\n\n    static deserializeMultiple(dr) {\n        return dr.readArray(() => this.deserialize(dr));\n    }\n\n}\n\nmodule.exports = QueryPlanSerializer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}