{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst util = require('util');\nconst Enum = require('../constants').Enum;\nconst QueryOp = require('../ops').QueryOp;\nconst ccAsObj = require('../ops').ccAsObj;\nconst ServiceType = require('../constants').ServiceType;\nconst NoSQLQueryError = require('../error').NoSQLQueryError;\nclass QueryPlanExecutor {\n  constructor(client, prepStmt) {\n    this._client = client;\n    this._prepStmt = prepStmt;\n    this._res = [];\n    this._mem = 0;\n    if (prepStmt._varNames) {\n      this._initExtVars();\n    }\n    //handle both query V4 and <= V3\n    this._baseTopo = this._client._config._topoInfo || this._prepStmt._topoInfo;\n  }\n  _initExtVars() {\n    this._extVars = new Array(this._prepStmt._varNames.length);\n    const bindCnt = this._prepStmt.bindings ? Object.keys(this._prepStmt.bindings).length : 0;\n    if (bindCnt != this._extVars.length) {\n      throw this.illegalArg(`Query: number of bound external variables \\\n${bindCnt} does not match expected ${this._extVars.length}`);\n    }\n    if (!bindCnt) {\n      return;\n    }\n    for (let i = 0; i < bindCnt; i++) {\n      const name = this._prepStmt._varNames[i];\n      if (!(name in this._prepStmt.bindings)) {\n        throw this.illegalArg(`Query: unbound external variable ${name}`);\n      }\n      this._extVars[i] = this._prepStmt.bindings[name];\n    }\n  }\n  _makeResult() {\n    return {\n      consumedCapacity: this._cc,\n      rows: this._rows,\n      continuationKey: this._needUserCont ? {\n        [ccAsObj]: true,\n        _prepStmt: this._prepStmt,\n        _qpExec: this\n      } : null\n    };\n  }\n  makeIterator(step) {\n    return step ? new step.itCls(this, step) : null;\n  }\n  async execute(req) {\n    QueryOp.applyDefaults(req, this._client._config);\n    QueryOp.validate(req);\n    this._req = req;\n    this._maxMem = req.opt._maxMemory == null ?\n    //test hook\n    req.opt.maxMemoryMB * 1024 * 1024 : req.opt._maxMemory;\n    //default consumed capacity if no requests to the server were made\n    if (this._client._config.serviceType !== ServiceType.KVSTORE) {\n      this._cc = {\n        readUnits: 0,\n        readKB: 0,\n        writeUnits: 0,\n        writeKB: 0\n      };\n    }\n    //We limit to 1 request to the server per user's call to query().\n    this._fetchDone = false;\n    //Indicates whether user needs to call query() again.\n    this._needUserCont = false;\n    //Make sure we don't append to query traces from previous request.\n    this._traces = undefined;\n\n    //If the previous call threw retryable exception, we may still have\n    //results (this.rows).  In this case we return them and let user issue\n    //query again to get more results.\n    if (!this._rows) {\n      this._rows = [];\n      const limit = req.opt ? req.opt.limit : 0;\n      if (!this._iter) {\n        this._iter = this.makeIterator(this._prepStmt._queryPlan);\n      }\n      while (await this._iter.next()) {\n        this._rows.push(this._iter.result);\n        if (limit && this._rows.length === limit) {\n          this._needUserCont = true;\n          break;\n        }\n      }\n    }\n    const res = this._makeResult();\n    if (this._traces) {\n      res.queryTraces = this._traces;\n    }\n    this._rows = null;\n    return res;\n  }\n  get maxMem() {\n    return this._maxMem;\n  }\n  get maxMemMB() {\n    return this._req.opt.maxMemoryMB;\n  }\n  get opt() {\n    return this._req.opt;\n  }\n  incMem(val) {\n    this._mem += val;\n    if (this._mem > this._maxMem) {\n      throw this.memoryExceeded(`Memory used for the query exceeded \\\nmaximum allowed value of ${this.maxMemMB} MB`);\n    }\n  }\n  decMem(val) {\n    this._mem -= val;\n    assert(this._mem >= 0);\n  }\n  addTraces(traces) {\n    this._traces = this._traces || [];\n    this._traces.push(...traces);\n  }\n  badProto(msg, cause) {\n    return NoSQLQueryError.badProto(msg, this._req, cause);\n  }\n  illegalArg(msg, exprLoc) {\n    let exprLocStr = '';\n    if (exprLoc) {\n      exprLocStr = ` Expression location: ${exprLoc.startLine}:\\\n${exprLoc.startColumn}-${exprLoc.endLine}:${exprLoc.endColumn}`;\n    }\n    return NoSQLQueryError.illegalArg(msg + exprLocStr, this._req);\n  }\n  illegalState(msg, cause) {\n    return NoSQLQueryError.illegalState(msg, this._req, cause);\n  }\n  memoryExceeded(msg) {\n    return NoSQLQueryError.memory(msg, this._req);\n  }\n}\n\n//Base class for all iterators\nclass PlanIterator {\n  constructor(qpExec, step) {\n    this._qpExec = qpExec;\n    this._step = step;\n    //Handler for custom DB Number type if present, needed for sorting and\n    //arithmetic operations\n    this._dbNumber = qpExec._client._config._dbNumber;\n  }\n  static validateStep() {}\n  static _validateStepInputSync(step) {\n    if (!step.input) {\n      throw NoSQLQueryError.illegalState(`Missing input iterator for \\\n${step.displayName}`);\n    }\n    assert(step.input.itCls);\n    if (step.input.itCls._isAsync) {\n      throw NoSQLQueryError.illegalState(`Unexpected async input \\\niterator ${step.input.displayName} for ${step.displayName}`);\n    }\n  }\n\n  //attach info for debugging to error\n  _addErrInfo(err) {\n    return Object.assign(err, {\n      _planIterator: this\n    });\n  }\n  get result() {\n    return this._qpExec._res[this._step.resPos];\n  }\n  set result(val) {\n    this._qpExec._res[this._step.resPos] = val;\n  }\n\n  //empty next()\n  next() {\n    return this._done ? false : this._done = true;\n  }\n  reset() {\n    this._done = false;\n  }\n  badProto(msg, cause) {\n    return this._addErrInfo(this._qpExec.badProto(msg, cause));\n  }\n  illegalState(msg, cause) {\n    return this._addErrInfo(this._qpExec.illegalState(msg, cause));\n  }\n  memoryExceeded(msg) {\n    return this._addErrInfo(this._qpExec.memoryExceeded(msg));\n  }\n  illegalArg(msg, loc) {\n    return this._addErrInfo(this._qpExec.illegalArg(msg, loc ? loc : this._step.exprLoc));\n  }\n  unsupportedComp(val) {\n    return this.illegalState(`Encountered value not suitable for \\\ncomparison: ${util.inspect(val)}`);\n  }\n  isAsync() {\n    return this.constructor._isAsync;\n  }\n}\nclass DistributionKind extends Enum {}\n\n/*\n * The query predicates specify a complete shard key, and as a result,\n * the query goes to a single partition and uses the primary index for\n * its execution.\n */\nDistributionKind.SINGLE_PARTITION = new DistributionKind(0);\n\n/*\n * The query uses the primary index for its execution, but does not\n * specify a complete shard key. As a result, it must be sent to all\n * partitions.\n */\nDistributionKind.ALL_PARTITIONS = new DistributionKind(1);\n\n/*\n * The query uses a secondary index for its execution. As a result,\n * it must be sent to all shards.\n */\nDistributionKind.ALL_SHARDS = new DistributionKind(2);\nDistributionKind.seal();\nclass ArithOpcode extends Enum {}\nArithOpcode.OP_ADD_SUB = new ArithOpcode(14);\nArithOpcode.OP_MULT_DIV = new ArithOpcode(15);\nArithOpcode.seal();\nclass SQLFuncCode extends Enum {}\nSQLFuncCode.FN_COUNT_STAR = new SQLFuncCode(42);\nSQLFuncCode.FN_COUNT = new SQLFuncCode(43);\nSQLFuncCode.FN_COUNT_NUMBERS = new SQLFuncCode(44);\nSQLFuncCode.FN_SUM = new SQLFuncCode(45);\nSQLFuncCode.FN_MIN = new SQLFuncCode(47);\nSQLFuncCode.FN_MAX = new SQLFuncCode(48);\nSQLFuncCode.FN_ARRAY_COLLECT = new SQLFuncCode(91);\nSQLFuncCode.FN_ARRAY_COLLECT_DISTINCT = new SQLFuncCode(92);\nSQLFuncCode.seal();\nmodule.exports = {\n  QueryPlanExecutor,\n  PlanIterator,\n  DistributionKind,\n  ArithOpcode,\n  SQLFuncCode\n};","map":{"version":3,"names":["assert","require","util","Enum","QueryOp","ccAsObj","ServiceType","NoSQLQueryError","QueryPlanExecutor","constructor","client","prepStmt","_client","_prepStmt","_res","_mem","_varNames","_initExtVars","_baseTopo","_config","_topoInfo","_extVars","Array","length","bindCnt","bindings","Object","keys","illegalArg","i","name","_makeResult","consumedCapacity","_cc","rows","_rows","continuationKey","_needUserCont","_qpExec","makeIterator","step","itCls","execute","req","applyDefaults","validate","_req","_maxMem","opt","_maxMemory","maxMemoryMB","serviceType","KVSTORE","readUnits","readKB","writeUnits","writeKB","_fetchDone","_traces","undefined","limit","_iter","_queryPlan","next","push","result","res","queryTraces","maxMem","maxMemMB","incMem","val","memoryExceeded","decMem","addTraces","traces","badProto","msg","cause","exprLoc","exprLocStr","startLine","startColumn","endLine","endColumn","illegalState","memory","PlanIterator","qpExec","_step","_dbNumber","validateStep","_validateStepInputSync","input","displayName","_isAsync","_addErrInfo","err","assign","_planIterator","resPos","_done","reset","loc","unsupportedComp","inspect","isAsync","DistributionKind","SINGLE_PARTITION","ALL_PARTITIONS","ALL_SHARDS","seal","ArithOpcode","OP_ADD_SUB","OP_MULT_DIV","SQLFuncCode","FN_COUNT_STAR","FN_COUNT","FN_COUNT_NUMBERS","FN_SUM","FN_MIN","FN_MAX","FN_ARRAY_COLLECT","FN_ARRAY_COLLECT_DISTINCT","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/query/common.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst util = require('util');\nconst Enum = require('../constants').Enum;\nconst QueryOp = require('../ops').QueryOp;\nconst ccAsObj = require('../ops').ccAsObj;\nconst ServiceType = require('../constants').ServiceType;\nconst NoSQLQueryError = require('../error').NoSQLQueryError;\n\nclass QueryPlanExecutor {\n\n    constructor(client, prepStmt) {\n        this._client = client;\n        this._prepStmt = prepStmt;\n        this._res = [];\n        this._mem = 0;\n        if (prepStmt._varNames) {\n            this._initExtVars();\n        }\n        //handle both query V4 and <= V3\n        this._baseTopo = this._client._config._topoInfo ||\n            this._prepStmt._topoInfo;\n    }\n\n    _initExtVars() {\n        this._extVars = new Array(this._prepStmt._varNames.length);\n        \n        const bindCnt = this._prepStmt.bindings ?\n            Object.keys(this._prepStmt.bindings).length : 0;\n        if (bindCnt != this._extVars.length) {\n            throw this.illegalArg(`Query: number of bound external variables \\\n${bindCnt} does not match expected ${this._extVars.length}`);\n        }\n\n        if (!bindCnt) {\n            return;\n        }\n\n        for(let i = 0; i < bindCnt; i++) {\n            const name = this._prepStmt._varNames[i];\n            if (!(name in this._prepStmt.bindings)) {\n                throw this.illegalArg(\n                    `Query: unbound external variable ${name}`);\n            }\n            this._extVars[i] = this._prepStmt.bindings[name];\n        }\n    }\n\n    _makeResult() {\n        return {\n            consumedCapacity: this._cc,\n            rows: this._rows,\n            continuationKey: this._needUserCont ? {\n                [ccAsObj]: true,\n                _prepStmt: this._prepStmt,\n                _qpExec: this\n            } : null\n        };\n    }\n\n    makeIterator(step) {\n        return step ? new step.itCls(this, step) : null;\n    }\n\n    async execute(req) {\n        QueryOp.applyDefaults(req, this._client._config);\n        QueryOp.validate(req);\n\n        this._req = req;\n        this._maxMem = req.opt._maxMemory == null ? //test hook\n            req.opt.maxMemoryMB * 1024 * 1024 : req.opt._maxMemory;\n        //default consumed capacity if no requests to the server were made\n        if (this._client._config.serviceType !== ServiceType.KVSTORE) {\n            this._cc = {\n                readUnits: 0,\n                readKB: 0,\n                writeUnits: 0,\n                writeKB: 0\n            };\n        }\n        //We limit to 1 request to the server per user's call to query().\n        this._fetchDone = false;\n        //Indicates whether user needs to call query() again.\n        this._needUserCont = false;\n        //Make sure we don't append to query traces from previous request.\n        this._traces = undefined;\n\n        //If the previous call threw retryable exception, we may still have\n        //results (this.rows).  In this case we return them and let user issue\n        //query again to get more results.\n        if (!this._rows) {\n            this._rows = [];\n            const limit = req.opt ? req.opt.limit : 0;\n            if (!this._iter) {\n                this._iter = this.makeIterator(this._prepStmt._queryPlan);\n            }\n            while(await this._iter.next()) {\n                this._rows.push(this._iter.result);\n                if (limit && this._rows.length === limit) {\n                    this._needUserCont = true;\n                    break;\n                }\n            }\n        }\n        const res = this._makeResult();\n        if (this._traces) {\n            res.queryTraces = this._traces;\n        }\n        this._rows = null;\n        return res;\n    }\n\n    get maxMem() {\n        return this._maxMem;\n    }\n\n    get maxMemMB() {\n        return this._req.opt.maxMemoryMB;\n    }\n\n    get opt() {\n        return this._req.opt;\n    }\n\n    incMem(val) {\n        this._mem += val;\n        if (this._mem > this._maxMem) {\n            throw this.memoryExceeded(`Memory used for the query exceeded \\\nmaximum allowed value of ${this.maxMemMB} MB`);\n        }\n    }\n\n    decMem(val) {\n        this._mem -= val;\n        assert(this._mem >= 0);\n    }\n\n    addTraces(traces) {\n        this._traces = this._traces || [];\n        this._traces.push(...traces);\n    }\n\n    badProto(msg, cause) {\n        return NoSQLQueryError.badProto(msg, this._req, cause);\n    }\n\n    illegalArg(msg, exprLoc) {\n        let exprLocStr = '';\n        if (exprLoc) {\n            exprLocStr = ` Expression location: ${exprLoc.startLine}:\\\n${exprLoc.startColumn}-${exprLoc.endLine}:${exprLoc.endColumn}`;\n        }\n        return NoSQLQueryError.illegalArg(msg + exprLocStr, this._req);\n    }\n\n    illegalState(msg, cause) {\n        return NoSQLQueryError.illegalState(msg, this._req, cause);\n    }\n\n    memoryExceeded(msg) {\n        return NoSQLQueryError.memory(msg, this._req);\n    }\n\n}\n\n//Base class for all iterators\nclass PlanIterator {\n    \n    constructor(qpExec, step) {\n        this._qpExec = qpExec;\n        this._step = step;\n        //Handler for custom DB Number type if present, needed for sorting and\n        //arithmetic operations\n        this._dbNumber = qpExec._client._config._dbNumber;\n    }\n\n    static validateStep() {}\n\n    static _validateStepInputSync(step) {\n        if (!step.input) {\n            throw NoSQLQueryError.illegalState(`Missing input iterator for \\\n${step.displayName}`);\n        }\n        assert(step.input.itCls);\n        if (step.input.itCls._isAsync) {\n            throw NoSQLQueryError.illegalState(`Unexpected async input \\\niterator ${step.input.displayName} for ${step.displayName}`);\n        }\n    }\n\n    //attach info for debugging to error\n    _addErrInfo(err) {\n        return Object.assign(err, { _planIterator: this});\n    }\n\n    get result() {\n        return this._qpExec._res[this._step.resPos];\n    }\n\n    set result(val) {\n        this._qpExec._res[this._step.resPos] = val;\n    }\n\n    //empty next()\n    next() {\n        return this._done ? false : this._done = true;\n    }\n\n    reset() {\n        this._done = false;\n    }\n\n    badProto(msg, cause) {\n        return this._addErrInfo(this._qpExec.badProto(msg, cause));\n    }\n\n    illegalState(msg, cause) {\n        return this._addErrInfo(this._qpExec.illegalState(msg, cause));\n    }\n\n    memoryExceeded(msg) {\n        return this._addErrInfo(this._qpExec.memoryExceeded(msg));\n    }\n\n    illegalArg(msg, loc) {\n        return this._addErrInfo(this._qpExec.illegalArg(msg, loc ? loc :\n            this._step.exprLoc));\n    }\n\n    unsupportedComp(val) {\n        return this.illegalState(`Encountered value not suitable for \\\ncomparison: ${util.inspect(val)}`);\n    }\n\n    isAsync() {\n        return this.constructor._isAsync;\n    }\n}\n\nclass DistributionKind extends Enum {}\n\n/*\n * The query predicates specify a complete shard key, and as a result,\n * the query goes to a single partition and uses the primary index for\n * its execution.\n */\nDistributionKind.SINGLE_PARTITION = new DistributionKind(0);\n\n/*\n * The query uses the primary index for its execution, but does not\n * specify a complete shard key. As a result, it must be sent to all\n * partitions.\n */\nDistributionKind.ALL_PARTITIONS = new DistributionKind(1);\n\n/*\n * The query uses a secondary index for its execution. As a result,\n * it must be sent to all shards.\n */\nDistributionKind.ALL_SHARDS = new DistributionKind(2);\n\nDistributionKind.seal();\n\nclass ArithOpcode extends Enum {}\n\nArithOpcode.OP_ADD_SUB = new ArithOpcode(14);\nArithOpcode.OP_MULT_DIV = new ArithOpcode(15);\n\nArithOpcode.seal();\n\nclass SQLFuncCode extends Enum {}\n\nSQLFuncCode.FN_COUNT_STAR = new SQLFuncCode(42);\nSQLFuncCode.FN_COUNT = new SQLFuncCode(43);\nSQLFuncCode.FN_COUNT_NUMBERS = new SQLFuncCode(44);\nSQLFuncCode.FN_SUM = new SQLFuncCode(45);\nSQLFuncCode.FN_MIN = new SQLFuncCode(47);\nSQLFuncCode.FN_MAX = new SQLFuncCode(48);\nSQLFuncCode.FN_ARRAY_COLLECT = new SQLFuncCode(91);\nSQLFuncCode.FN_ARRAY_COLLECT_DISTINCT = new SQLFuncCode(92);\n\nSQLFuncCode.seal();\n\nmodule.exports = {\n    QueryPlanExecutor,\n    PlanIterator,\n    DistributionKind,\n    ArithOpcode,\n    SQLFuncCode\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}