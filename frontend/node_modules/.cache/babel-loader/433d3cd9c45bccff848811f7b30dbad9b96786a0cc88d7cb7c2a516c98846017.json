{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst Enum = require('./constants').Enum;\n\n/**\n * Defines errors and related classes used by the driver.\n */\n\n/**\n * This enumeration lists error codes for different errors raised by the\n * driver.  Error code constants also store additional properties of the error\n * such as if the error is retryable.  ErrorCode is used by {@link NoSQLError}\n * and its subclasses.  It is indicated below which errors are retryable.\n * @extends Enum\n * @hideconstructor\n * @tutorial tables\n */\nclass ErrorCode extends Enum {\n  constructor(ordinal, desc, name) {\n    super(ordinal, desc, name);\n    this.retryable = false;\n  }\n}\n\n/*\n * Error codes for user-generated errors, range from 1 to 50(exclusive).\n * These include illegal arguments, exceeding size limits for some objects,\n * resource not found, etc.\n */\n\n/**\n * Server received unknown or unsupported operation.\n * @type {ErrorCode}\n */\nErrorCode.UNKNOWN_OPERATION = new ErrorCode(1);\n\n/**\n * The operation attempted to access a table that does not exist\n * or is not in a visible state.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_NOT_FOUND = new ErrorCode(2, 'Table not found');\n\n/**\n * The operation attempted to access a index that does not exist\n * or is not in a visible state.\n * @type {ErrorCode}\n */\nErrorCode.INDEX_NOT_FOUND = new ErrorCode(3);\n\n/**\n * Operation is called with invalid argument value(s) or invalid options.\n * This error code is also used if invalid configuration is passed to\n * {@link NoSQLClient} constructor.\n * @type {ErrorCode}\n * @see {@link NoSQLArgumentError}\n */\nErrorCode.ILLEGAL_ARGUMENT = new ErrorCode(4);\n\n/**\n * Indicates that an attempt has been made to create a row with a\n * size that exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.ROW_SIZE_LIMIT_EXCEEDED = new ErrorCode(5);\n\n/**\n * Indicates that an attempt has been made to create a row with a\n * primary key or index key size that exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.KEY_SIZE_LIMIT_EXCEEDED = new ErrorCode(6);\n\n/**\n * Indicates that the number of operations passed to\n * {@link NoSQLClient#writeMany}, {@link NoSQLClient#putMany} or\n * {@link NoSQLClient#deleteMany} methods exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.BATCH_OP_NUMBER_LIMIT_EXCEEDED = new ErrorCode(7);\n\n/**\n * Indicates that the size of a request to the server exceeds the system\n * defined limit.\n * @type {ErrorCode}\n */\nErrorCode.REQUEST_SIZE_LIMIT_EXCEEDED = new ErrorCode(8);\n\n/**\n * The operation attempted to create a table but the named table already\n * exists.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_EXISTS = new ErrorCode(9);\n\n/**\n * The operation attempted to create an index for a table but the named index\n * already exists.\n * @type {ErrorCode}\n */\nErrorCode.INDEX_EXISTS = new ErrorCode(10);\n\n/**\n * Indicates that an application presented an invalid authorization string\n * in a request to the server.  Whether this error is retryalble depends on\n * the cause.  If the error is due to access token expiration, it can be\n * retried, in which case a fresh access token should be obtained before the\n * retry.  However if the retry results in the same error, then the cause is\n * not access token expiration and the error is no longer retryable and should\n * be returned to the application.  This logic is implemented by default\n * {@link RetryHandler} and default {@link AuthorizationProvider}.\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n * @see {@link Config}\n */\nErrorCode.INVALID_AUTHORIZATION = new ErrorCode(11);\n\n/**\n * Indicates that an application does not have sufficient permission\n * to perform an operation.\n * @type {ErrorCode}\n */\nErrorCode.INSUFFICIENT_PERMISSION = new ErrorCode(12);\n\n//Not used by the driver\n/** @ignore */\nErrorCode.RESOURCE_EXISTS = new ErrorCode(13);\n\n//Not used by the driver\n/** @ignore */\nErrorCode.RESOURCE_NOT_FOUND = new ErrorCode(14);\n\n/**\n * Indicates that an attempt has been made to create a number of tables\n * that exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_LIMIT_EXCEEDED = new ErrorCode(15);\n\n/**\n * Indicates that an attempt has been made to create more indexes on\n * a table than the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.INDEX_LIMIT_EXCEEDED = new ErrorCode(16);\n\n/**\n * Invalid protocol message is received by the server or by the client.\n * Indicates communication error between the server and the driver.\n * @type {ErrorCode}\n */\nErrorCode.BAD_PROTOCOL_MESSAGE = new ErrorCode(17);\n\n/**\n * Indicates that an attempt has been made to evolve the schema of a\n * a table more times than allowed by the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.EVOLUTION_LIMIT_EXCEEDED = new ErrorCode(18);\n\n/**\n * Indicates that an attempt has been made to create or modify a table\n * using limits that exceed the maximum allowed for a single table.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_DEPLOYMENT_LIMIT_EXCEEDED = new ErrorCode(19);\n\n/**\n * Indicates that an attempt has been made to create or modify a table\n * using limits that cause the tenant's aggregate resources to exceed\n * the maximum allowed for a tenant.\n * @type {ErrorCode}\n */\nErrorCode.TENANT_DEPLOYMENT_LIMIT_EXCEEDED = new ErrorCode(20);\n\n/**\n * Indicates that the requested operation is not supported.  Some operations\n * are supported for Cloud Service but not for On-Premise NoSQL Database\n * (see {@link ServiceType}) and vice versa.\n * @type {ErrorCode}\n */\nErrorCode.OPERATION_NOT_SUPPORTED = new ErrorCode(21);\n\n/**\n * Indicates a record version mismatch. REST operations only.\n * @type {ErrorCode}\n */\nErrorCode.ETAG_MISMATCH = new ErrorCode(22);\n\n/**\n * Indicates a work request cannot be cancelled. REST operations only.\n * @type {ErrorCode}\n */\nErrorCode.CANNOT_CANCEL_WORK_REQUEST = new ErrorCode(23);\n\n/**\n * Indicates the client protocol version is not supported by the\n * server, i.e. the client is newer than the server. The client should\n * decrement its protocol version and try again.\n * @type {ErrorCode}\n */\nErrorCode.UNSUPPORTED_PROTOCOL = new ErrorCode(24);\n\n/**\n * Cloud service only.\n * Indicates that an operation is attempted on a replicated table that\n * is not yet fully initialized.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_NOT_READY = new ErrorCode(26);\n\n/**\n * Indicates that the server does not support the current query protocol\n * version.\n * @type {ErrorCode}\n */\nErrorCode.UNSUPPORTED_QUERY_VERSION = new ErrorCode(27);\n\n/*\n * Error codes for user throttling, range from 50 to 100(exclusive).\n */\n\n/**\n * Indicates that the provisioned read throughput has been exceeded.\n * <p>\n * This error is retryable and will be retried by the driver's default\n * {@link RetryHandler}.  However, it is recommended that applications\n * attempt to avoid throttling exceptions by rate limiting themselves to\n * the degree possible.\n * <p>\n * Retries and behavior related to throttling can be managed by configuring\n * retry handler and options in {@link RetryConfig}.\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n */\nErrorCode.READ_LIMIT_EXCEEDED = new ErrorCode(50);\n\n/**\n * Indicates that the provisioned write throughput has been exceeded.\n * <p>\n * This error is retryable and will be retried by the driver's default\n * {@link RetryHandler}.  However, it is recommended that applications\n * attempt to avoid throttling exceptions by rate limiting themselves to\n * the degree possible.\n * <p>\n * Retries and behavior related to throttling can be managed by configuring\n * retry handler and options in {@link RetryConfig}.\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n */\nErrorCode.WRITE_LIMIT_EXCEEDED = new ErrorCode(51);\n\n/**\n * Indicates that a table size limit has been exceeded by writing more\n * data than the table can support. This error is not retryable because the\n * conditions that lead to it being thrown, while potentially transient,\n * typically require user intervention.\n * @type {ErrorCode}\n */\nErrorCode.SIZE_LIMIT_EXCEEDED = new ErrorCode(52);\n\n/**\n * This error happens when a non-data operation is throttled.\n * This can happen if an application attempts too many control operations\n * such as table creation, deletion, or similar methods. Such operations\n * do not use throughput or capacity provisioned for a given table but\n * they consume system resources and their use is limited.\n * <p>\n * This error is retryable but a large delay should be used in order to\n * minimize the chance that a retry will also be throttled.  This delay\n * can be configured by {@link RetryConfig#controlOpBaseDelay}\n * property of the default {@link RetryHandler}\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n */\nErrorCode.OPERATION_LIMIT_EXCEEDED = new ErrorCode(53);\n\n/*\n * Error codes for server issues, range from 100 to 150(exclusive).\n */\n\n/*\n * Retryable server issues, range from 100 to 125(exclusive).\n * These are internal problems, presumably temporary, and need to be sent\n * back to the application for retry.\n */\n\n/**\n * Indicates that operation cannot be processed because the provided timeout\n * interval is exceeded. If the operation is retryable, it is possible that\n * it has been retried a number of times before the timeout occurs.\n * @type {ErrorCode}\n * @see {@link Config}#timeout\n * @see {@link Config}#ddlTimeout\n * @see {@link NoSQLTimeoutError}\n */\nErrorCode.REQUEST_TIMEOUT = new ErrorCode(100);\n\n/**\n * Indicates that there is an internal system problem.\n * Most system problems are temporary, so this is a retryable error.\n * @type {ErrorCode}\n */\nErrorCode.SERVER_ERROR = new ErrorCode(101);\n\n/**\n * Indicates that the service is temporarily unavailable.  This is retryable\n * error.\n * @type {ErrorCode}\n */\nErrorCode.SERVICE_UNAVAILABLE = new ErrorCode(102);\n\n/**\n * Indicates that a table operation failed because the table is in use or\n * busy.  Only one modification operation at a time is allowed on a table.\n * This is a retryable error.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_BUSY = new ErrorCode(103);\n\n/**\n * Indicates that security information is not ready in the system. This error\n * will occur as the system acquires security information and must be retried\n * in order for authorization to work properly.\n * @type {ErrorCode}\n */\nErrorCode.SECURITY_INFO_UNAVAILABLE = new ErrorCode(104);\n\n/**\n * Indicates that authentication to kvstore failed either because\n * authentication information was not provided or because authentication\n * session has expired.  The driver will automatically retry\n * authentication.\n */\nErrorCode.RETRY_AUTHENTICATION = new ErrorCode(105);\nErrorCode.SECURITY_INFO_UNAVAILABLE.retryable = true;\nErrorCode.SERVER_ERROR.retryable = true;\nErrorCode.TABLE_BUSY.retryable = true;\nErrorCode.READ_LIMIT_EXCEEDED.retryable = true;\nErrorCode.WRITE_LIMIT_EXCEEDED.retryable = true;\nErrorCode.INVALID_AUTHORIZATION.retryable = true;\nErrorCode.RETRY_AUTHENTICATION.retryable = true;\nErrorCode.OPERATION_LIMIT_EXCEEDED.retryable = true;\nErrorCode.SERVICE_UNAVAILABLE.retryable = true;\nErrorCode.REQUEST_TIMEOUT.retryable = true;\nErrorCode.TABLE_NOT_READY.retryable = true;\n\n/*\n * Other server issues, begin from 125.\n * These include server illegal state, unknown server error, etc.\n * They might be retry-able, or not.\n */\n\n/**\n * Indicates that a server error occured that is not classified by known\n * error codes.  Server response may still provide additional information.\n * @type {ErrorCode}\n */\nErrorCode.UNKNOWN_ERROR = new ErrorCode(125);\n\n/**\n * Indicates that a service is in incorrect state.  Administrative\n * intervention may be required.\n * @type {ErrorCode}\n */\nErrorCode.ILLEGAL_STATE = new ErrorCode(126);\n\n/*\n * Node.js driver error codes.\n */\nconst DRV_ERR_START = 1000;\n\n/**\n * Indicates network error when trying to communicate with the service.\n * Can be due to inability to connect (e.g. if the network or\n * the service is down).  Note that this is different from unsuccessful\n * response from the service, which is indicated by\n * {@link ErrorCode.SERVICE_ERROR}.\n * @type {ErrorCode}\n * @see {@link NoSQLNetworkError} \n */\nErrorCode.NETWORK_ERROR = new ErrorCode(DRV_ERR_START);\nErrorCode.NETWORK_ERROR.retryable = true;\n\n/**\n * Indicates unsuccessful response from the service.  Even though the client\n * was able to communicate with the service, the service was not able to\n * process client request and thus returned unsuccessful response.\n * Additional information is provided in the error message.  Note that\n * this is different from inability to communicate with the service which is\n * indicated by {@link ErrorCode.NETWORK_ERROR}.\n * @type {ErrorCode}\n * @see {@link NoSQLServiceError}\n */\nErrorCode.SERVICE_ERROR = new ErrorCode(DRV_ERR_START + 1);\n\n/**\n * Indicates authorization error caused by problem with accessing user or\n * application credentials.  The reason for this error depends on what\n * credential provider is used for the authorization.  E.g. if file system\n * credentials are used, this error may result if the credentials file is\n * not found or not accessible.\n * @type {ErrorCode}\n * @see {@link NoSQLAuthorizationError}\n */\nErrorCode.CREDENTIALS_ERROR = new ErrorCode(DRV_ERR_START + 2);\n\n/**\n * Indicates that the operation to obtain access token or other data\n * from authorization server was unauthorized.  See\n * {@link NoSQLAuthorizationError} for more information on this error.\n * @type {ErrorCode}\n * @see {@link NoSQLAuthorizationError}\n */\nErrorCode.UNAUTHORIZED = new ErrorCode(DRV_ERR_START + 3);\n\n/**\n * Memory consumed by client-side query execution exceeded the limit set by\n * <em>opt.maxMemoryMB</em> in {@link NoSQLClient#query} API,\n * {@link Config}#maxMemoryMB or default limit of 1 GB.  To execute the\n * query successfully you may need to increase this limit.\n * @type {ErrorCode}\n * @see {@link NoSQLQueryError}\n * @see {@link NoSQLClient#query}\n * @see {@link Config}#maxMemoryMB\n */\nErrorCode.MEMORY_LIMIT_EXCEEDED = new ErrorCode(DRV_ERR_START + 4);\nErrorCode.seal();\nmodule.exports = ErrorCode;","map":{"version":3,"names":["Enum","require","ErrorCode","constructor","ordinal","desc","name","retryable","UNKNOWN_OPERATION","TABLE_NOT_FOUND","INDEX_NOT_FOUND","ILLEGAL_ARGUMENT","ROW_SIZE_LIMIT_EXCEEDED","KEY_SIZE_LIMIT_EXCEEDED","BATCH_OP_NUMBER_LIMIT_EXCEEDED","REQUEST_SIZE_LIMIT_EXCEEDED","TABLE_EXISTS","INDEX_EXISTS","INVALID_AUTHORIZATION","INSUFFICIENT_PERMISSION","RESOURCE_EXISTS","RESOURCE_NOT_FOUND","TABLE_LIMIT_EXCEEDED","INDEX_LIMIT_EXCEEDED","BAD_PROTOCOL_MESSAGE","EVOLUTION_LIMIT_EXCEEDED","TABLE_DEPLOYMENT_LIMIT_EXCEEDED","TENANT_DEPLOYMENT_LIMIT_EXCEEDED","OPERATION_NOT_SUPPORTED","ETAG_MISMATCH","CANNOT_CANCEL_WORK_REQUEST","UNSUPPORTED_PROTOCOL","TABLE_NOT_READY","UNSUPPORTED_QUERY_VERSION","READ_LIMIT_EXCEEDED","WRITE_LIMIT_EXCEEDED","SIZE_LIMIT_EXCEEDED","OPERATION_LIMIT_EXCEEDED","REQUEST_TIMEOUT","SERVER_ERROR","SERVICE_UNAVAILABLE","TABLE_BUSY","SECURITY_INFO_UNAVAILABLE","RETRY_AUTHENTICATION","UNKNOWN_ERROR","ILLEGAL_STATE","DRV_ERR_START","NETWORK_ERROR","SERVICE_ERROR","CREDENTIALS_ERROR","UNAUTHORIZED","MEMORY_LIMIT_EXCEEDED","seal","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/error_code.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst Enum = require('./constants').Enum;\n\n/**\n * Defines errors and related classes used by the driver.\n */\n\n/**\n * This enumeration lists error codes for different errors raised by the\n * driver.  Error code constants also store additional properties of the error\n * such as if the error is retryable.  ErrorCode is used by {@link NoSQLError}\n * and its subclasses.  It is indicated below which errors are retryable.\n * @extends Enum\n * @hideconstructor\n * @tutorial tables\n */\nclass ErrorCode extends Enum {\n    constructor(ordinal, desc, name) {\n        super(ordinal, desc, name);\n        this.retryable = false;\n    }\n}\n\n/*\n * Error codes for user-generated errors, range from 1 to 50(exclusive).\n * These include illegal arguments, exceeding size limits for some objects,\n * resource not found, etc.\n */\n\n/**\n * Server received unknown or unsupported operation.\n * @type {ErrorCode}\n */\nErrorCode.UNKNOWN_OPERATION = new ErrorCode(1);\n\n/**\n * The operation attempted to access a table that does not exist\n * or is not in a visible state.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_NOT_FOUND = new ErrorCode(2, 'Table not found');\n\n/**\n * The operation attempted to access a index that does not exist\n * or is not in a visible state.\n * @type {ErrorCode}\n */\nErrorCode.INDEX_NOT_FOUND = new ErrorCode(3);\n\n/**\n * Operation is called with invalid argument value(s) or invalid options.\n * This error code is also used if invalid configuration is passed to\n * {@link NoSQLClient} constructor.\n * @type {ErrorCode}\n * @see {@link NoSQLArgumentError}\n */\nErrorCode.ILLEGAL_ARGUMENT = new ErrorCode(4);\n\n/**\n * Indicates that an attempt has been made to create a row with a\n * size that exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.ROW_SIZE_LIMIT_EXCEEDED = new ErrorCode(5);\n\n/**\n * Indicates that an attempt has been made to create a row with a\n * primary key or index key size that exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.KEY_SIZE_LIMIT_EXCEEDED = new ErrorCode(6);\n\n/**\n * Indicates that the number of operations passed to\n * {@link NoSQLClient#writeMany}, {@link NoSQLClient#putMany} or\n * {@link NoSQLClient#deleteMany} methods exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.BATCH_OP_NUMBER_LIMIT_EXCEEDED = new ErrorCode(7);\n\n/**\n * Indicates that the size of a request to the server exceeds the system\n * defined limit.\n * @type {ErrorCode}\n */\nErrorCode.REQUEST_SIZE_LIMIT_EXCEEDED = new ErrorCode(8);\n\n/**\n * The operation attempted to create a table but the named table already\n * exists.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_EXISTS = new ErrorCode(9);\n\n/**\n * The operation attempted to create an index for a table but the named index\n * already exists.\n * @type {ErrorCode}\n */\nErrorCode.INDEX_EXISTS = new ErrorCode(10);\n\n/**\n * Indicates that an application presented an invalid authorization string\n * in a request to the server.  Whether this error is retryalble depends on\n * the cause.  If the error is due to access token expiration, it can be\n * retried, in which case a fresh access token should be obtained before the\n * retry.  However if the retry results in the same error, then the cause is\n * not access token expiration and the error is no longer retryable and should\n * be returned to the application.  This logic is implemented by default\n * {@link RetryHandler} and default {@link AuthorizationProvider}.\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n * @see {@link Config}\n */\nErrorCode.INVALID_AUTHORIZATION = new ErrorCode(11);\n\n/**\n * Indicates that an application does not have sufficient permission\n * to perform an operation.\n * @type {ErrorCode}\n */\nErrorCode.INSUFFICIENT_PERMISSION = new ErrorCode(12);\n\n//Not used by the driver\n/** @ignore */\nErrorCode.RESOURCE_EXISTS = new ErrorCode(13);\n\n//Not used by the driver\n/** @ignore */\nErrorCode.RESOURCE_NOT_FOUND = new ErrorCode(14);\n\n/**\n * Indicates that an attempt has been made to create a number of tables\n * that exceeds the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_LIMIT_EXCEEDED = new ErrorCode(15);\n\n/**\n * Indicates that an attempt has been made to create more indexes on\n * a table than the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.INDEX_LIMIT_EXCEEDED = new ErrorCode(16);\n\n/**\n * Invalid protocol message is received by the server or by the client.\n * Indicates communication error between the server and the driver.\n * @type {ErrorCode}\n */\nErrorCode.BAD_PROTOCOL_MESSAGE = new ErrorCode(17);\n\n/**\n * Indicates that an attempt has been made to evolve the schema of a\n * a table more times than allowed by the system defined limit.\n * @type {ErrorCode}\n */\nErrorCode.EVOLUTION_LIMIT_EXCEEDED = new ErrorCode(18);\n\n/**\n * Indicates that an attempt has been made to create or modify a table\n * using limits that exceed the maximum allowed for a single table.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_DEPLOYMENT_LIMIT_EXCEEDED = new ErrorCode(19);\n\n/**\n * Indicates that an attempt has been made to create or modify a table\n * using limits that cause the tenant's aggregate resources to exceed\n * the maximum allowed for a tenant.\n * @type {ErrorCode}\n */\nErrorCode.TENANT_DEPLOYMENT_LIMIT_EXCEEDED = new ErrorCode(20);\n\n/**\n * Indicates that the requested operation is not supported.  Some operations\n * are supported for Cloud Service but not for On-Premise NoSQL Database\n * (see {@link ServiceType}) and vice versa.\n * @type {ErrorCode}\n */\nErrorCode.OPERATION_NOT_SUPPORTED = new ErrorCode(21);\n\n/**\n * Indicates a record version mismatch. REST operations only.\n * @type {ErrorCode}\n */\nErrorCode.ETAG_MISMATCH = new ErrorCode(22);\n\n/**\n * Indicates a work request cannot be cancelled. REST operations only.\n * @type {ErrorCode}\n */\nErrorCode.CANNOT_CANCEL_WORK_REQUEST = new ErrorCode(23);\n\n/**\n * Indicates the client protocol version is not supported by the\n * server, i.e. the client is newer than the server. The client should\n * decrement its protocol version and try again.\n * @type {ErrorCode}\n */\nErrorCode.UNSUPPORTED_PROTOCOL = new ErrorCode(24);\n\n/**\n * Cloud service only.\n * Indicates that an operation is attempted on a replicated table that\n * is not yet fully initialized.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_NOT_READY = new ErrorCode(26);\n\n/**\n * Indicates that the server does not support the current query protocol\n * version.\n * @type {ErrorCode}\n */\nErrorCode.UNSUPPORTED_QUERY_VERSION = new ErrorCode(27);\n\n/*\n * Error codes for user throttling, range from 50 to 100(exclusive).\n */\n\n/**\n * Indicates that the provisioned read throughput has been exceeded.\n * <p>\n * This error is retryable and will be retried by the driver's default\n * {@link RetryHandler}.  However, it is recommended that applications\n * attempt to avoid throttling exceptions by rate limiting themselves to\n * the degree possible.\n * <p>\n * Retries and behavior related to throttling can be managed by configuring\n * retry handler and options in {@link RetryConfig}.\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n */\nErrorCode.READ_LIMIT_EXCEEDED = new ErrorCode(50);\n\n/**\n * Indicates that the provisioned write throughput has been exceeded.\n * <p>\n * This error is retryable and will be retried by the driver's default\n * {@link RetryHandler}.  However, it is recommended that applications\n * attempt to avoid throttling exceptions by rate limiting themselves to\n * the degree possible.\n * <p>\n * Retries and behavior related to throttling can be managed by configuring\n * retry handler and options in {@link RetryConfig}.\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n */\nErrorCode.WRITE_LIMIT_EXCEEDED = new ErrorCode(51);\n\n/**\n * Indicates that a table size limit has been exceeded by writing more\n * data than the table can support. This error is not retryable because the\n * conditions that lead to it being thrown, while potentially transient,\n * typically require user intervention.\n * @type {ErrorCode}\n */\nErrorCode.SIZE_LIMIT_EXCEEDED = new ErrorCode(52);\n\n/**\n * This error happens when a non-data operation is throttled.\n * This can happen if an application attempts too many control operations\n * such as table creation, deletion, or similar methods. Such operations\n * do not use throughput or capacity provisioned for a given table but\n * they consume system resources and their use is limited.\n * <p>\n * This error is retryable but a large delay should be used in order to\n * minimize the chance that a retry will also be throttled.  This delay\n * can be configured by {@link RetryConfig#controlOpBaseDelay}\n * property of the default {@link RetryHandler}\n * @type {ErrorCode}\n * @see {@link RetryConfig}\n */\nErrorCode.OPERATION_LIMIT_EXCEEDED = new ErrorCode(53);\n\n/*\n * Error codes for server issues, range from 100 to 150(exclusive).\n */\n\n/*\n * Retryable server issues, range from 100 to 125(exclusive).\n * These are internal problems, presumably temporary, and need to be sent\n * back to the application for retry.\n */\n\n/**\n * Indicates that operation cannot be processed because the provided timeout\n * interval is exceeded. If the operation is retryable, it is possible that\n * it has been retried a number of times before the timeout occurs.\n * @type {ErrorCode}\n * @see {@link Config}#timeout\n * @see {@link Config}#ddlTimeout\n * @see {@link NoSQLTimeoutError}\n */\nErrorCode.REQUEST_TIMEOUT = new ErrorCode(100);\n\n/**\n * Indicates that there is an internal system problem.\n * Most system problems are temporary, so this is a retryable error.\n * @type {ErrorCode}\n */\nErrorCode.SERVER_ERROR = new ErrorCode(101);\n\n/**\n * Indicates that the service is temporarily unavailable.  This is retryable\n * error.\n * @type {ErrorCode}\n */\nErrorCode.SERVICE_UNAVAILABLE = new ErrorCode(102);\n\n/**\n * Indicates that a table operation failed because the table is in use or\n * busy.  Only one modification operation at a time is allowed on a table.\n * This is a retryable error.\n * @type {ErrorCode}\n */\nErrorCode.TABLE_BUSY = new ErrorCode(103);\n\n/**\n * Indicates that security information is not ready in the system. This error\n * will occur as the system acquires security information and must be retried\n * in order for authorization to work properly.\n * @type {ErrorCode}\n */\nErrorCode.SECURITY_INFO_UNAVAILABLE = new ErrorCode(104);\n\n/**\n * Indicates that authentication to kvstore failed either because\n * authentication information was not provided or because authentication\n * session has expired.  The driver will automatically retry\n * authentication.\n */\nErrorCode.RETRY_AUTHENTICATION = new ErrorCode(105);\n\nErrorCode.SECURITY_INFO_UNAVAILABLE.retryable = true;\nErrorCode.SERVER_ERROR.retryable = true;\nErrorCode.TABLE_BUSY.retryable = true;\nErrorCode.READ_LIMIT_EXCEEDED.retryable = true;\nErrorCode.WRITE_LIMIT_EXCEEDED.retryable = true;\nErrorCode.INVALID_AUTHORIZATION.retryable = true;\nErrorCode.RETRY_AUTHENTICATION.retryable = true;\nErrorCode.OPERATION_LIMIT_EXCEEDED.retryable = true;\nErrorCode.SERVICE_UNAVAILABLE.retryable = true;\nErrorCode.REQUEST_TIMEOUT.retryable = true;\nErrorCode.TABLE_NOT_READY.retryable = true;\n\n/*\n * Other server issues, begin from 125.\n * These include server illegal state, unknown server error, etc.\n * They might be retry-able, or not.\n */\n\n/**\n * Indicates that a server error occured that is not classified by known\n * error codes.  Server response may still provide additional information.\n * @type {ErrorCode}\n */\nErrorCode.UNKNOWN_ERROR = new ErrorCode(125);\n\n/**\n * Indicates that a service is in incorrect state.  Administrative\n * intervention may be required.\n * @type {ErrorCode}\n */\nErrorCode.ILLEGAL_STATE = new ErrorCode(126);\n\n/*\n * Node.js driver error codes.\n */\nconst DRV_ERR_START = 1000;\n\n/**\n * Indicates network error when trying to communicate with the service.\n * Can be due to inability to connect (e.g. if the network or\n * the service is down).  Note that this is different from unsuccessful\n * response from the service, which is indicated by\n * {@link ErrorCode.SERVICE_ERROR}.\n * @type {ErrorCode}\n * @see {@link NoSQLNetworkError} \n */\nErrorCode.NETWORK_ERROR = new ErrorCode(DRV_ERR_START);\n\nErrorCode.NETWORK_ERROR.retryable = true;\n\n/**\n * Indicates unsuccessful response from the service.  Even though the client\n * was able to communicate with the service, the service was not able to\n * process client request and thus returned unsuccessful response.\n * Additional information is provided in the error message.  Note that\n * this is different from inability to communicate with the service which is\n * indicated by {@link ErrorCode.NETWORK_ERROR}.\n * @type {ErrorCode}\n * @see {@link NoSQLServiceError}\n */\nErrorCode.SERVICE_ERROR = new ErrorCode(DRV_ERR_START + 1);\n\n/**\n * Indicates authorization error caused by problem with accessing user or\n * application credentials.  The reason for this error depends on what\n * credential provider is used for the authorization.  E.g. if file system\n * credentials are used, this error may result if the credentials file is\n * not found or not accessible.\n * @type {ErrorCode}\n * @see {@link NoSQLAuthorizationError}\n */\nErrorCode.CREDENTIALS_ERROR = new ErrorCode(DRV_ERR_START + 2);\n\n/**\n * Indicates that the operation to obtain access token or other data\n * from authorization server was unauthorized.  See\n * {@link NoSQLAuthorizationError} for more information on this error.\n * @type {ErrorCode}\n * @see {@link NoSQLAuthorizationError}\n */\nErrorCode.UNAUTHORIZED = new ErrorCode(DRV_ERR_START + 3);\n\n/**\n * Memory consumed by client-side query execution exceeded the limit set by\n * <em>opt.maxMemoryMB</em> in {@link NoSQLClient#query} API,\n * {@link Config}#maxMemoryMB or default limit of 1 GB.  To execute the\n * query successfully you may need to increase this limit.\n * @type {ErrorCode}\n * @see {@link NoSQLQueryError}\n * @see {@link NoSQLClient#query}\n * @see {@link Config}#maxMemoryMB\n */\nErrorCode.MEMORY_LIMIT_EXCEEDED = new ErrorCode(DRV_ERR_START + 4); \n\nErrorCode.seal();\n\nmodule.exports = ErrorCode;\n"],"mappings":"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;AACA;AACA;AACAA,SAAS,CAAC8B,eAAe,GAAG,IAAI9B,SAAS,CAAC,EAAE,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACAA,SAAS,CAAC+B,yBAAyB,GAAG,IAAI/B,SAAS,CAAC,EAAE,CAAC;;AAEvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACgC,mBAAmB,GAAG,IAAIhC,SAAS,CAAC,EAAE,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACiC,oBAAoB,GAAG,IAAIjC,SAAS,CAAC,EAAE,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACkC,mBAAmB,GAAG,IAAIlC,SAAS,CAAC,EAAE,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACmC,wBAAwB,GAAG,IAAInC,SAAS,CAAC,EAAE,CAAC;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACoC,eAAe,GAAG,IAAIpC,SAAS,CAAC,GAAG,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACqC,YAAY,GAAG,IAAIrC,SAAS,CAAC,GAAG,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACsC,mBAAmB,GAAG,IAAItC,SAAS,CAAC,GAAG,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACuC,UAAU,GAAG,IAAIvC,SAAS,CAAC,GAAG,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACwC,yBAAyB,GAAG,IAAIxC,SAAS,CAAC,GAAG,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACyC,oBAAoB,GAAG,IAAIzC,SAAS,CAAC,GAAG,CAAC;AAEnDA,SAAS,CAACwC,yBAAyB,CAACnC,SAAS,GAAG,IAAI;AACpDL,SAAS,CAACqC,YAAY,CAAChC,SAAS,GAAG,IAAI;AACvCL,SAAS,CAACuC,UAAU,CAAClC,SAAS,GAAG,IAAI;AACrCL,SAAS,CAACgC,mBAAmB,CAAC3B,SAAS,GAAG,IAAI;AAC9CL,SAAS,CAACiC,oBAAoB,CAAC5B,SAAS,GAAG,IAAI;AAC/CL,SAAS,CAACgB,qBAAqB,CAACX,SAAS,GAAG,IAAI;AAChDL,SAAS,CAACyC,oBAAoB,CAACpC,SAAS,GAAG,IAAI;AAC/CL,SAAS,CAACmC,wBAAwB,CAAC9B,SAAS,GAAG,IAAI;AACnDL,SAAS,CAACsC,mBAAmB,CAACjC,SAAS,GAAG,IAAI;AAC9CL,SAAS,CAACoC,eAAe,CAAC/B,SAAS,GAAG,IAAI;AAC1CL,SAAS,CAAC8B,eAAe,CAACzB,SAAS,GAAG,IAAI;;AAE1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAL,SAAS,CAAC0C,aAAa,GAAG,IAAI1C,SAAS,CAAC,GAAG,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACAA,SAAS,CAAC2C,aAAa,GAAG,IAAI3C,SAAS,CAAC,GAAG,CAAC;;AAE5C;AACA;AACA;AACA,MAAM4C,aAAa,GAAG,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5C,SAAS,CAAC6C,aAAa,GAAG,IAAI7C,SAAS,CAAC4C,aAAa,CAAC;AAEtD5C,SAAS,CAAC6C,aAAa,CAACxC,SAAS,GAAG,IAAI;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,SAAS,CAAC8C,aAAa,GAAG,IAAI9C,SAAS,CAAC4C,aAAa,GAAG,CAAC,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5C,SAAS,CAAC+C,iBAAiB,GAAG,IAAI/C,SAAS,CAAC4C,aAAa,GAAG,CAAC,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA5C,SAAS,CAACgD,YAAY,GAAG,IAAIhD,SAAS,CAAC4C,aAAa,GAAG,CAAC,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5C,SAAS,CAACiD,qBAAqB,GAAG,IAAIjD,SAAS,CAAC4C,aAAa,GAAG,CAAC,CAAC;AAElE5C,SAAS,CAACkD,IAAI,CAAC,CAAC;AAEhBC,MAAM,CAACC,OAAO,GAAGpD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}