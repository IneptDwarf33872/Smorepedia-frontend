{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst BinaryProtocolManager = require('../binary_protocol/protocol_manager');\nconst NsonWriter = require('./writer');\nconst NsonReader = require('./reader');\nconst ErrorCode = require('../error_code');\nconst NoSQLUnsupportedProtocolError = require('../error').NoSQLUnsupportedProtocolError;\nconst TableSerializers = require('./table');\nconst DMLSerializers = require('./dml');\nconst QuerySerializers = require('./query');\nconst AdminSerializers = require('./admin');\nconst V4 = 4;\nclass ProtocolManager extends BinaryProtocolManager {\n  static get serialVersion() {\n    return V4;\n  }\n  static decrementSerialVersion() {\n    return false;\n  }\n  static getWriter(buf) {\n    //Is this too much optimization?\n    return !buf._nw ? buf._nw = new NsonWriter(buf) : buf._nw.reset();\n  }\n  static getReader(buf) {\n    return !buf._nr ? buf._nr = new NsonReader(buf) : buf._nr.reset();\n  }\n\n  //Nson request always starts with serial version.\n  static startWrite(writer) {\n    writer.dataWriter.writeInt16BE(this.serialVersion);\n  }\n\n  //In Nson, the error information is part of the top-level Nson map.\n  static startRead(reader, req) {\n    const dr = reader.dataReader;\n    var code = dr.readByte();\n\n    //If the client is connected to a pre-V4 server, the following\n    //error codes can be returned by the pre-V4 servers:\n    //V3: UNSUPPORTED_PROTOCOL (24)\n    //V2: BAD_PROTOCOL_MESSAGE (17)\n    //Neither of these currently maps to any valid Nson type, so we\n    //know the server is not speaking V4 protocol. We can throw\n    //NoSQLUnsupportedProtocolError so that the protocol serial\n    //version will be decremented accordingly.\n    if (code === ErrorCode.UNSUPPORTED_PROTOCOL.ordinal || code === ErrorCode.BAD_PROTOCOL_MESSAGE.ordinal) {\n      throw new NoSQLUnsupportedProtocolError(`Unsupported protocol version ${this.serialVersion}`, null, req);\n    }\n    dr.offset = 0;\n  }\n}\n\n//Serializers\n\nProtocolManager._serializers = {\n  GetOp: DMLSerializers.GetSerializer,\n  PutOp: DMLSerializers.PutSerializer,\n  DeleteOp: DMLSerializers.DeleteSerializer,\n  MultiDeleteOp: DMLSerializers.MultiDeleteSerializer,\n  WriteMultipleOp: DMLSerializers.WriteMultipleSerializer,\n  TableDDLOp: TableSerializers.TableRequestSerializer,\n  TableLimitsOp: TableSerializers.TableRequestSerializer,\n  TableTagsOp: TableSerializers.TableRequestSerializer,\n  AddReplicaOp: TableSerializers.ReplicaOpSerializer,\n  DropReplicaOp: TableSerializers.ReplicaOpSerializer,\n  GetTableOp: TableSerializers.GetTableSerializer,\n  TableUsageOp: TableSerializers.TableUsageSerializer,\n  ReplicaStatsOp: TableSerializers.ReplicaStatsSerializer,\n  GetIndexesOp: TableSerializers.GetIndexesSerializer,\n  ListTablesOp: TableSerializers.ListTablesSerializer,\n  PrepareOp: QuerySerializers.PrepareSerializer,\n  QueryOp: QuerySerializers.QuerySerializer,\n  AdminDDLOp: AdminSerializers.SystemRequestSerializer,\n  AdminStatusOp: AdminSerializers.SystemStatusSerializer\n};\nmodule.exports = ProtocolManager;","map":{"version":3,"names":["BinaryProtocolManager","require","NsonWriter","NsonReader","ErrorCode","NoSQLUnsupportedProtocolError","TableSerializers","DMLSerializers","QuerySerializers","AdminSerializers","V4","ProtocolManager","serialVersion","decrementSerialVersion","getWriter","buf","_nw","reset","getReader","_nr","startWrite","writer","dataWriter","writeInt16BE","startRead","reader","req","dr","dataReader","code","readByte","UNSUPPORTED_PROTOCOL","ordinal","BAD_PROTOCOL_MESSAGE","offset","_serializers","GetOp","GetSerializer","PutOp","PutSerializer","DeleteOp","DeleteSerializer","MultiDeleteOp","MultiDeleteSerializer","WriteMultipleOp","WriteMultipleSerializer","TableDDLOp","TableRequestSerializer","TableLimitsOp","TableTagsOp","AddReplicaOp","ReplicaOpSerializer","DropReplicaOp","GetTableOp","GetTableSerializer","TableUsageOp","TableUsageSerializer","ReplicaStatsOp","ReplicaStatsSerializer","GetIndexesOp","GetIndexesSerializer","ListTablesOp","ListTablesSerializer","PrepareOp","PrepareSerializer","QueryOp","QuerySerializer","AdminDDLOp","SystemRequestSerializer","AdminStatusOp","SystemStatusSerializer","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/nson_protocol/protocol_manager.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst BinaryProtocolManager = require('../binary_protocol/protocol_manager');\nconst NsonWriter = require('./writer');\nconst NsonReader = require('./reader');\nconst ErrorCode = require('../error_code');\nconst NoSQLUnsupportedProtocolError = require('../error')\n    .NoSQLUnsupportedProtocolError;\nconst TableSerializers = require('./table');\nconst DMLSerializers = require('./dml');\nconst QuerySerializers = require('./query');\nconst AdminSerializers = require('./admin');\n\nconst V4 = 4;\n\nclass ProtocolManager extends BinaryProtocolManager {\n\n    static get serialVersion() {\n        return V4;\n    }\n\n    static decrementSerialVersion() {\n        return false;\n    }\n\n    static getWriter(buf) {\n        //Is this too much optimization?\n        return !buf._nw ? (buf._nw = new NsonWriter(buf)) : buf._nw.reset();\n    }\n\n    static getReader(buf) {\n        return !buf._nr ? (buf._nr = new NsonReader(buf)) : buf._nr.reset();\n    }\n\n    //Nson request always starts with serial version.\n    static startWrite(writer) {\n        writer.dataWriter.writeInt16BE(this.serialVersion);\n    }\n\n    //In Nson, the error information is part of the top-level Nson map.\n    static startRead(reader, req) {\n        const dr = reader.dataReader;\n        var code = dr.readByte();\n\n        //If the client is connected to a pre-V4 server, the following\n        //error codes can be returned by the pre-V4 servers:\n        //V3: UNSUPPORTED_PROTOCOL (24)\n        //V2: BAD_PROTOCOL_MESSAGE (17)\n        //Neither of these currently maps to any valid Nson type, so we\n        //know the server is not speaking V4 protocol. We can throw\n        //NoSQLUnsupportedProtocolError so that the protocol serial\n        //version will be decremented accordingly.\n        if (code === ErrorCode.UNSUPPORTED_PROTOCOL.ordinal ||\n            code === ErrorCode.BAD_PROTOCOL_MESSAGE.ordinal) {\n            throw new NoSQLUnsupportedProtocolError(\n                `Unsupported protocol version ${this.serialVersion}`, null,\n                req);\n        }\n\n        dr.offset = 0;\n    }\n\n}\n\n//Serializers\n\nProtocolManager._serializers = {\n    GetOp: DMLSerializers.GetSerializer,\n    PutOp: DMLSerializers.PutSerializer,\n    DeleteOp: DMLSerializers.DeleteSerializer,\n    MultiDeleteOp: DMLSerializers.MultiDeleteSerializer,\n    WriteMultipleOp: DMLSerializers.WriteMultipleSerializer,\n    TableDDLOp: TableSerializers.TableRequestSerializer,\n    TableLimitsOp: TableSerializers.TableRequestSerializer,\n    TableTagsOp: TableSerializers.TableRequestSerializer,\n    AddReplicaOp: TableSerializers.ReplicaOpSerializer,\n    DropReplicaOp: TableSerializers.ReplicaOpSerializer,\n    GetTableOp: TableSerializers.GetTableSerializer,\n    TableUsageOp: TableSerializers.TableUsageSerializer,\n    ReplicaStatsOp: TableSerializers.ReplicaStatsSerializer,\n    GetIndexesOp: TableSerializers.GetIndexesSerializer,\n    ListTablesOp: TableSerializers.ListTablesSerializer,\n    PrepareOp: QuerySerializers.PrepareSerializer,\n    QueryOp: QuerySerializers.QuerySerializer,\n    AdminDDLOp: AdminSerializers.SystemRequestSerializer,\n    AdminStatusOp: AdminSerializers.SystemStatusSerializer,\n};\n\nmodule.exports = ProtocolManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}