{"ast":null,"code":"// const readline = require(\"readline\");\n// const rl = readline.createInterface({\n//   input: process.stdin,\n//   output: process.stdout,\n// });\n\nconst server = require(\"./server.js\");\nconst axios = require(\"axios\"); // Import axios\nserver.listen(3000, () => {\n  console.log(`Tasks API listening at http://localhost:3000`);\n  commandEntry();\n});\n\n// Function to make GET requests with axios\nasync function query(path, dataToSend) {\n  try {\n    const response = await axios.get(`http://localhost:3000${path}`, {\n      data: dataToSend\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    throw error;\n  }\n}\n\n// Function to make POST requests with axios\nasync function add(path, id, title, content, infobox) {\n  const postData = {\n    id,\n    title,\n    content,\n    infobox\n  };\n  try {\n    const response = await axios.post(`http://localhost:3000${path}`, postData, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(`Success: ${JSON.stringify(response.data.result)}`);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    throw error;\n  }\n}\n\n// Function to make DELETE requests with axios\nasync function remove(id) {\n  const postData = {\n    id\n  };\n  try {\n    const response = await axios.delete(`http://localhost:3000/byid`, {\n      data: postData,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(`Success: ${JSON.stringify(response.data.result)}`);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    throw error;\n  }\n}\n\n// Simplified version of askQuestion function\nfunction askQuestion(prompt) {\n  return new Promise(resolve => {\n    rl.question(prompt, answer => {\n      resolve(answer);\n    });\n  });\n}\n\n// Updated update function using axios\nasync function update(id, newData, prop) {\n  try {\n    const row = await query(\"/byid\", {\n      id\n    });\n    let updatedRow = {\n      ...row\n    };\n    updatedRow[prop] = newData; // Update the specified property\n\n    await remove(id); // Delete the existing entry\n    await add(\"/add\", updatedRow.id, updatedRow.title, updatedRow.content, updatedRow.infobox); // Re-add with updated data\n  } catch (error) {\n    console.error(\"Error updating data:\", error.message);\n  }\n}\n\n// Function to get the highest ID\nasync function getHighestID() {\n  try {\n    const result = await query(\"/maxid\", {});\n    return result.high;\n  } catch (error) {\n    console.error(\"Error fetching highest ID:\", error.message);\n    throw error;\n  }\n}\n\n// Main command entry point\n// async function commandEntry() {\n//   const command = await askQuestion(\"Enter a command (add, query, delete, update, or stop): \");\n\n//   switch (command) {\n//     case \"add\":\n//       const id = await getHighestID() + 1;\n//       const title = await askQuestion(\"Enter Title: \");\n//       const content = await askQuestion(\"Enter Content: \");\n//       const infobox = await askQuestion(\"Enter Infobox: \");\n//       await add(\"/add\", id, title, content, infobox);\n//       break;\n//     case \"query\":\n//       console.log(await query(\"/\", {}));\n//       break;\n//     case \"delete\":\n//       const deleteId = await askQuestion(\"Enter ID to delete: \");\n//       await remove(deleteId);\n//       break;\n//     case \"update\":\n//       const updateId = await askQuestion(\"Enter ID to update: \");\n//       const newData = await askQuestion(\"Enter new value: \");\n//       const prop = await askQuestion(\"Enter property to update: \");\n//       await update(updateId, newData, prop);\n//       break;\n//     default:\n//       console.log(\"Command not recognized\");\n//   }\n// Continue processing commands\n// }\nmodule.exports = {\n  query,\n  add,\n  update\n};","map":{"version":3,"names":["server","require","axios","listen","console","log","commandEntry","query","path","dataToSend","response","get","data","error","message","add","id","title","content","infobox","postData","post","headers","JSON","stringify","result","remove","delete","askQuestion","prompt","Promise","resolve","rl","question","answer","update","newData","prop","row","updatedRow","getHighestID","high","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/src/middleware.js"],"sourcesContent":["// const readline = require(\"readline\");\r\n// const rl = readline.createInterface({\r\n//   input: process.stdin,\r\n//   output: process.stdout,\r\n// });\r\n\r\nconst server = require(\"./server.js\");\r\nconst axios = require(\"axios\"); // Import axios\r\nserver.listen(3000, () => {\r\n  console.log(`Tasks API listening at http://localhost:3000`);\r\n  commandEntry();\r\n});\r\n\r\n// Function to make GET requests with axios\r\nasync function query(path, dataToSend) {\r\n  try {\r\n    const response = await axios.get(`http://localhost:3000${path}`, {\r\n      data: dataToSend,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to make POST requests with axios\r\nasync function add(path, id, title, content, infobox) {\r\n  const postData = {\r\n    id,\r\n    title,\r\n    content,\r\n    infobox,\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post(`http://localhost:3000${path}`, postData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    console.log(`Success: ${JSON.stringify(response.data.result)}`);\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to make DELETE requests with axios\r\nasync function remove(id) {\r\n  const postData = { id };\r\n\r\n  try {\r\n    const response = await axios.delete(`http://localhost:3000/byid`, {\r\n      data: postData,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    console.log(`Success: ${JSON.stringify(response.data.result)}`);\r\n  } catch (error) {\r\n    console.error(\"Error:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Simplified version of askQuestion function\r\nfunction askQuestion(prompt) {\r\n  return new Promise((resolve) => {\r\n    rl.question(prompt, (answer) => {\r\n      resolve(answer);\r\n    });\r\n  });\r\n}\r\n\r\n// Updated update function using axios\r\nasync function update(id, newData, prop) {\r\n  try {\r\n    const row = await query(\"/byid\", { id });\r\n    let updatedRow = { ...row };\r\n    updatedRow[prop] = newData; // Update the specified property\r\n    \r\n    await remove(id); // Delete the existing entry\r\n    await add(\"/add\", updatedRow.id, updatedRow.title, updatedRow.content, updatedRow.infobox); // Re-add with updated data\r\n  } catch (error) {\r\n    console.error(\"Error updating data:\", error.message);\r\n  }\r\n}\r\n\r\n// Function to get the highest ID\r\nasync function getHighestID() {\r\n  try {\r\n    const result = await query(\"/maxid\", {});\r\n    return result.high;\r\n  } catch (error) {\r\n    console.error(\"Error fetching highest ID:\", error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Main command entry point\r\n// async function commandEntry() {\r\n//   const command = await askQuestion(\"Enter a command (add, query, delete, update, or stop): \");\r\n  \r\n//   switch (command) {\r\n//     case \"add\":\r\n//       const id = await getHighestID() + 1;\r\n//       const title = await askQuestion(\"Enter Title: \");\r\n//       const content = await askQuestion(\"Enter Content: \");\r\n//       const infobox = await askQuestion(\"Enter Infobox: \");\r\n//       await add(\"/add\", id, title, content, infobox);\r\n//       break;\r\n//     case \"query\":\r\n//       console.log(await query(\"/\", {}));\r\n//       break;\r\n//     case \"delete\":\r\n//       const deleteId = await askQuestion(\"Enter ID to delete: \");\r\n//       await remove(deleteId);\r\n//       break;\r\n//     case \"update\":\r\n//       const updateId = await askQuestion(\"Enter ID to update: \");\r\n//       const newData = await askQuestion(\"Enter new value: \");\r\n//       const prop = await askQuestion(\"Enter property to update: \");\r\n//       await update(updateId, newData, prop);\r\n//       break;\r\n//     default:\r\n//       console.log(\"Command not recognized\");\r\n//   }\r\n// Continue processing commands\r\n// }\r\nmodule.exports = {\r\n    query,\r\n    add,\r\n    update,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}