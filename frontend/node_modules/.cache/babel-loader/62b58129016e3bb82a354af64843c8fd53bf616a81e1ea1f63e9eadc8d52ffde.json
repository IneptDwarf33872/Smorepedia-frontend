{"ast":null,"code":"/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst PlanIterator = require('./common').PlanIterator;\nconst SQLFuncCode = require('./common').SQLFuncCode;\nconst MinMaxAggregator = require('./value_aggr').MinMaxAggregator;\nconst SumAggregator = require('./value_aggr').SumAggregator;\nconst CollectAggregator = require('./value_aggr').CollectAggregator;\nclass AggrFuncIterator extends PlanIterator {\n  _aggregator;\n  constructor(qpExec, step) {\n    super(qpExec, step);\n    this._inputIter = qpExec.makeIterator(step.input);\n    assert(this._inputIter && !this._inputIter.isAsync());\n  }\n  static validateStep(step) {\n    this._validateStepInputSync(step);\n  }\n  next() {\n    for (;;) {\n      if (!this._inputIter.next()) {\n        return true;\n      }\n      const val = this._inputIter.result;\n      this._aggregator.aggregate(val);\n    }\n  }\n  reset(resetRes) {\n    this._inputIter.reset();\n    if (resetRes) {\n      this._aggregator.reset();\n    }\n  }\n\n  //Aggregate function iterators do not use the result register.\n  get result() {\n    return this._aggregator.result;\n  }\n\n  //This should never be called for aggregate function iterators.\n  set result(val) {\n    assert(false);\n  }\n}\n\n/*\n * any_atomic min(any*)\n * any_atomic max(any*)\n *\n * Implements the MIN/MAX aggregate functions. It is needed by the driver\n * to compute the total min/max from the partial mins/maxs received from the\n * proxy.\n */\nclass FuncMinMaxIterator extends AggrFuncIterator {\n  constructor(qpExec, step) {\n    super(qpExec, step);\n    this._aggregator = new MinMaxAggregator(this, undefined, step.funcCode === SQLFuncCode.FN_MIN);\n  }\n}\n\n/*\n *  any_atomic sum(any*)\n *\n * Implements the SUM aggregate function. It is needed by the driver to\n * re-sum partial sums and counts received from the proxy.\n */\nclass FuncSumIterator extends AggrFuncIterator {\n  constructor(qpExec, step) {\n    super(qpExec, step);\n    this._aggregator = new SumAggregator(this);\n  }\n}\nclass FuncCollectIterator extends AggrFuncIterator {\n  constructor(qpExec, step) {\n    super(qpExec, step);\n    this._mem = 0;\n    this._aggregator = new CollectAggregator(this, val => {\n      this._mem += val;\n      this._qpExec.incMem(val);\n    }, step.isDistinct, this._qpExec.opt._testMode);\n  }\n}\nmodule.exports = {\n  FuncMinMaxIterator,\n  FuncSumIterator,\n  FuncCollectIterator\n};","map":{"version":3,"names":["assert","require","PlanIterator","SQLFuncCode","MinMaxAggregator","SumAggregator","CollectAggregator","AggrFuncIterator","_aggregator","constructor","qpExec","step","_inputIter","makeIterator","input","isAsync","validateStep","_validateStepInputSync","next","val","result","aggregate","reset","resetRes","FuncMinMaxIterator","undefined","funcCode","FN_MIN","FuncSumIterator","FuncCollectIterator","_mem","_qpExec","incMem","isDistinct","opt","_testMode","module","exports"],"sources":["C:/Users/teddy/Desktop/VSCodeProjects/Smorepedia/smoresapp/node_modules/oracle-nosqldb/lib/query/func.js"],"sourcesContent":["/*-\n * Copyright (c) 2018, 2024 Oracle and/or its affiliates. All rights reserved.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n *  https://oss.oracle.com/licenses/upl/\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst PlanIterator = require('./common').PlanIterator;\nconst SQLFuncCode = require('./common').SQLFuncCode;\nconst MinMaxAggregator = require('./value_aggr').MinMaxAggregator;\nconst SumAggregator = require('./value_aggr').SumAggregator;\nconst CollectAggregator = require('./value_aggr').CollectAggregator;\n\nclass AggrFuncIterator extends PlanIterator {\n\n    _aggregator;\n\n    constructor(qpExec, step) {\n        super(qpExec, step);\n        this._inputIter = qpExec.makeIterator(step.input);\n        assert(this._inputIter && !this._inputIter.isAsync());\n    }\n\n    static validateStep(step) {\n        this._validateStepInputSync(step);\n    }\n\n    next() {\n        for(;;) {\n            if (!this._inputIter.next()) {\n                return true;\n            }\n            const val = this._inputIter.result;\n            this._aggregator.aggregate(val);\n        }\n    }\n\n    reset(resetRes) {\n        this._inputIter.reset();\n        if (resetRes) {\n            this._aggregator.reset();\n        }\n    }\n\n    //Aggregate function iterators do not use the result register.\n    get result() {\n        return this._aggregator.result;\n    }\n\n    //This should never be called for aggregate function iterators.\n    set result(val) {\n        assert(false);\n    }\n}\n\n/*\n * any_atomic min(any*)\n * any_atomic max(any*)\n *\n * Implements the MIN/MAX aggregate functions. It is needed by the driver\n * to compute the total min/max from the partial mins/maxs received from the\n * proxy.\n */\nclass FuncMinMaxIterator extends AggrFuncIterator {\n    constructor(qpExec, step) {\n        super(qpExec, step);\n        this._aggregator = new MinMaxAggregator(this, undefined,\n            step.funcCode === SQLFuncCode.FN_MIN);\n    }\n}\n\n/*\n *  any_atomic sum(any*)\n *\n * Implements the SUM aggregate function. It is needed by the driver to\n * re-sum partial sums and counts received from the proxy.\n */\nclass FuncSumIterator extends AggrFuncIterator {\n    constructor(qpExec, step) {\n        super(qpExec, step);\n        this._aggregator = new SumAggregator(this);\n    }\n}\n\nclass FuncCollectIterator extends AggrFuncIterator {\n    constructor(qpExec, step) {\n        super(qpExec, step);\n        this._mem = 0;\n        this._aggregator = new CollectAggregator(this, val => {\n            this._mem += val;\n            this._qpExec.incMem(val);\n        }, step.isDistinct, this._qpExec.opt._testMode);\n    }\n}\n\nmodule.exports = {\n    FuncMinMaxIterator,\n    FuncSumIterator,\n    FuncCollectIterator\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}